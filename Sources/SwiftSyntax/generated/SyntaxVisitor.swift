//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
// Automatically generated by generate-swift-syntax
// Do not edit directly!
// swift-format-ignore-file

/// The enum describes how the ``SyntaxVisitor`` should continue after visiting
/// the current node.
public enum SyntaxVisitorContinueKind {
  /// The visitor should visit the descendants of the current node.
  case visitChildren
  /// The visitor should avoid visiting the descendants of the current node.
  case skipChildren
}

/// An instance of `ThrowingSyntaxVisitor` that never throws.
public typealias SyntaxVisitor = ThrowingSyntaxVisitor<Never>

open class ThrowingSyntaxVisitor<E: Error> {
  public let viewMode: SyntaxTreeViewMode

  public init(viewMode: SyntaxTreeViewMode) {
    self.viewMode = viewMode
  }

  /// Walk all nodes of the given syntax tree, calling the corresponding `visit`
  /// function for every node that is being visited.
  public func walk(_ node: some SyntaxProtocol) throws (E) {
    try dispatchVisit(Syntax(node))
  }

  /// Visiting ``ABIAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ABIAttributeArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ABIAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ABIAttributeArgumentsSyntax) throws (E) {
  }

  /// Visiting ``AccessorBlockFileSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(Compiler)
  open func visit(_ node: AccessorBlockFileSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AccessorBlockFileSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(Compiler)
  open func visitPost(_ node: AccessorBlockFileSyntax) throws (E) {
  }

  /// Visiting ``AccessorBlockSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorBlockSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AccessorBlockSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorBlockSyntax) throws (E) {
  }

  /// Visiting ``AccessorDeclListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorDeclListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AccessorDeclListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorDeclListSyntax) throws (E) {
  }

  /// Visiting ``AccessorDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AccessorDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorDeclSyntax) throws (E) {
  }

  /// Visiting ``AccessorEffectSpecifiersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorEffectSpecifiersSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AccessorEffectSpecifiersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorEffectSpecifiersSyntax) throws (E) {
  }

  /// Visiting ``AccessorParametersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AccessorParametersSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AccessorParametersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AccessorParametersSyntax) throws (E) {
  }

  /// Visiting ``ActorDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ActorDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ActorDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ActorDeclSyntax) throws (E) {
  }

  /// Visiting ``ArrayElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrayElementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ArrayElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrayElementListSyntax) throws (E) {
  }

  /// Visiting ``ArrayElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrayElementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ArrayElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrayElementSyntax) throws (E) {
  }

  /// Visiting ``ArrayExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrayExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ArrayExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrayExprSyntax) throws (E) {
  }

  /// Visiting ``ArrayTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrayTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ArrayTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrayTypeSyntax) throws (E) {
  }

  /// Visiting ``ArrowExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ArrowExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ArrowExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ArrowExprSyntax) throws (E) {
  }

  /// Visiting ``AsExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AsExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AsExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AsExprSyntax) throws (E) {
  }

  /// Visiting ``AssignmentExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AssignmentExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AssignmentExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AssignmentExprSyntax) throws (E) {
  }

  /// Visiting ``AssociatedTypeDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AssociatedTypeDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AssociatedTypeDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AssociatedTypeDeclSyntax) throws (E) {
  }

  /// Visiting ``AttributeClauseFileSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(Compiler)
  open func visit(_ node: AttributeClauseFileSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AttributeClauseFileSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(Compiler)
  open func visitPost(_ node: AttributeClauseFileSyntax) throws (E) {
  }

  /// Visiting ``AttributeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AttributeListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AttributeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AttributeListSyntax) throws (E) {
  }

  /// Visiting ``AttributeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AttributeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AttributeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AttributeSyntax) throws (E) {
  }

  /// Visiting ``AttributedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AttributedTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AttributedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AttributedTypeSyntax) throws (E) {
  }

  /// Visiting ``AvailabilityArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AvailabilityArgumentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AvailabilityArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AvailabilityArgumentListSyntax) throws (E) {
  }

  /// Visiting ``AvailabilityArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AvailabilityArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AvailabilityArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AvailabilityArgumentSyntax) throws (E) {
  }

  /// Visiting ``AvailabilityConditionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AvailabilityConditionSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AvailabilityConditionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AvailabilityConditionSyntax) throws (E) {
  }

  /// Visiting ``AvailabilityLabeledArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AvailabilityLabeledArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AvailabilityLabeledArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AvailabilityLabeledArgumentSyntax) throws (E) {
  }

  /// Visiting ``AvailabilityMacroDefinitionFileSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(Compiler)
  open func visit(_ node: AvailabilityMacroDefinitionFileSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AvailabilityMacroDefinitionFileSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(Compiler)
  open func visitPost(_ node: AvailabilityMacroDefinitionFileSyntax) throws (E) {
  }

  /// Visiting ``AwaitExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: AwaitExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``AwaitExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: AwaitExprSyntax) throws (E) {
  }

  /// Visiting ``BackDeployedAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BackDeployedAttributeArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``BackDeployedAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BackDeployedAttributeArgumentsSyntax) throws (E) {
  }

  /// Visiting ``BinaryOperatorExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BinaryOperatorExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``BinaryOperatorExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BinaryOperatorExprSyntax) throws (E) {
  }

  /// Visiting ``BooleanLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BooleanLiteralExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``BooleanLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BooleanLiteralExprSyntax) throws (E) {
  }

  /// Visiting ``BorrowExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BorrowExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``BorrowExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BorrowExprSyntax) throws (E) {
  }

  /// Visiting ``BreakStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: BreakStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``BreakStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: BreakStmtSyntax) throws (E) {
  }

  /// Visiting `_CanImportExprSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: _CanImportExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `_CanImportExprSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: _CanImportExprSyntax) throws (E) {
  }

  /// Visiting `_CanImportVersionInfoSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: _CanImportVersionInfoSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `_CanImportVersionInfoSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: _CanImportVersionInfoSyntax) throws (E) {
  }

  /// Visiting ``CatchClauseListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CatchClauseListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CatchClauseListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CatchClauseListSyntax) throws (E) {
  }

  /// Visiting ``CatchClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CatchClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CatchClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CatchClauseSyntax) throws (E) {
  }

  /// Visiting ``CatchItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CatchItemListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CatchItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CatchItemListSyntax) throws (E) {
  }

  /// Visiting ``CatchItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CatchItemSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CatchItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CatchItemSyntax) throws (E) {
  }

  /// Visiting ``ClassDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClassDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClassDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClassDeclSyntax) throws (E) {
  }

  /// Visiting ``ClassRestrictionTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClassRestrictionTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClassRestrictionTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClassRestrictionTypeSyntax) throws (E) {
  }

  /// Visiting ``ClosureCaptureClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureCaptureClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureCaptureClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureCaptureClauseSyntax) throws (E) {
  }

  /// Visiting ``ClosureCaptureListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureCaptureListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureCaptureListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureCaptureListSyntax) throws (E) {
  }

  /// Visiting ``ClosureCaptureSpecifierSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureCaptureSpecifierSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureCaptureSpecifierSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureCaptureSpecifierSyntax) throws (E) {
  }

  /// Visiting ``ClosureCaptureSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureCaptureSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureCaptureSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureCaptureSyntax) throws (E) {
  }

  /// Visiting ``ClosureExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureExprSyntax) throws (E) {
  }

  /// Visiting ``ClosureParameterClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureParameterClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureParameterClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureParameterClauseSyntax) throws (E) {
  }

  /// Visiting ``ClosureParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureParameterListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureParameterListSyntax) throws (E) {
  }

  /// Visiting ``ClosureParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureParameterSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureParameterSyntax) throws (E) {
  }

  /// Visiting ``ClosureShorthandParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureShorthandParameterListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureShorthandParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureShorthandParameterListSyntax) throws (E) {
  }

  /// Visiting ``ClosureShorthandParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureShorthandParameterSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureShorthandParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureShorthandParameterSyntax) throws (E) {
  }

  /// Visiting ``ClosureSignatureSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ClosureSignatureSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ClosureSignatureSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ClosureSignatureSyntax) throws (E) {
  }

  /// Visiting ``CodeBlockFileSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(Compiler)
  open func visit(_ node: CodeBlockFileSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CodeBlockFileSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(Compiler)
  open func visitPost(_ node: CodeBlockFileSyntax) throws (E) {
  }

  /// Visiting ``CodeBlockItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CodeBlockItemListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CodeBlockItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CodeBlockItemListSyntax) throws (E) {
  }

  /// Visiting ``CodeBlockItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CodeBlockItemSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CodeBlockItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CodeBlockItemSyntax) throws (E) {
  }

  /// Visiting ``CodeBlockSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CodeBlockSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CodeBlockSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CodeBlockSyntax) throws (E) {
  }

  /// Visiting ``CompositionTypeElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CompositionTypeElementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CompositionTypeElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CompositionTypeElementListSyntax) throws (E) {
  }

  /// Visiting ``CompositionTypeElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CompositionTypeElementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CompositionTypeElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CompositionTypeElementSyntax) throws (E) {
  }

  /// Visiting ``CompositionTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CompositionTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CompositionTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CompositionTypeSyntax) throws (E) {
  }

  /// Visiting ``ConditionElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConditionElementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ConditionElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConditionElementListSyntax) throws (E) {
  }

  /// Visiting ``ConditionElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConditionElementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ConditionElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConditionElementSyntax) throws (E) {
  }

  /// Visiting ``ConformanceRequirementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConformanceRequirementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ConformanceRequirementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConformanceRequirementSyntax) throws (E) {
  }

  /// Visiting ``ConsumeExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ConsumeExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ConsumeExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ConsumeExprSyntax) throws (E) {
  }

  /// Visiting ``ContinueStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ContinueStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ContinueStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ContinueStmtSyntax) throws (E) {
  }

  /// Visiting ``CopyExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: CopyExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``CopyExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: CopyExprSyntax) throws (E) {
  }

  /// Visiting ``DeclModifierDetailSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclModifierDetailSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeclModifierDetailSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclModifierDetailSyntax) throws (E) {
  }

  /// Visiting ``DeclModifierListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclModifierListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeclModifierListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclModifierListSyntax) throws (E) {
  }

  /// Visiting ``DeclModifierSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclModifierSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeclModifierSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclModifierSyntax) throws (E) {
  }

  /// Visiting ``DeclNameArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclNameArgumentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeclNameArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclNameArgumentListSyntax) throws (E) {
  }

  /// Visiting ``DeclNameArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclNameArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeclNameArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclNameArgumentSyntax) throws (E) {
  }

  /// Visiting ``DeclNameArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclNameArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeclNameArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclNameArgumentsSyntax) throws (E) {
  }

  /// Visiting ``DeclReferenceExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeclReferenceExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeclReferenceExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeclReferenceExprSyntax) throws (E) {
  }

  /// Visiting ``DeferStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeferStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeferStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeferStmtSyntax) throws (E) {
  }

  /// Visiting ``DeinitializerDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeinitializerDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeinitializerDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeinitializerDeclSyntax) throws (E) {
  }

  /// Visiting ``DeinitializerEffectSpecifiersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DeinitializerEffectSpecifiersSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DeinitializerEffectSpecifiersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DeinitializerEffectSpecifiersSyntax) throws (E) {
  }

  /// Visiting ``DerivativeAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DerivativeAttributeArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DerivativeAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DerivativeAttributeArgumentsSyntax) throws (E) {
  }

  /// Visiting ``DesignatedTypeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DesignatedTypeListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DesignatedTypeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DesignatedTypeListSyntax) throws (E) {
  }

  /// Visiting ``DesignatedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DesignatedTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DesignatedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DesignatedTypeSyntax) throws (E) {
  }

  /// Visiting ``DictionaryElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DictionaryElementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DictionaryElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DictionaryElementListSyntax) throws (E) {
  }

  /// Visiting ``DictionaryElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DictionaryElementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DictionaryElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DictionaryElementSyntax) throws (E) {
  }

  /// Visiting ``DictionaryExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DictionaryExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DictionaryExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DictionaryExprSyntax) throws (E) {
  }

  /// Visiting ``DictionaryTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DictionaryTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DictionaryTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DictionaryTypeSyntax) throws (E) {
  }

  /// Visiting ``DifferentiabilityArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiabilityArgumentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DifferentiabilityArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiabilityArgumentListSyntax) throws (E) {
  }

  /// Visiting ``DifferentiabilityArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiabilityArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DifferentiabilityArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiabilityArgumentSyntax) throws (E) {
  }

  /// Visiting ``DifferentiabilityArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiabilityArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DifferentiabilityArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiabilityArgumentsSyntax) throws (E) {
  }

  /// Visiting ``DifferentiabilityWithRespectToArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiabilityWithRespectToArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DifferentiabilityWithRespectToArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiabilityWithRespectToArgumentSyntax) throws (E) {
  }

  /// Visiting ``DifferentiableAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DifferentiableAttributeArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DifferentiableAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DifferentiableAttributeArgumentsSyntax) throws (E) {
  }

  /// Visiting ``DiscardAssignmentExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DiscardAssignmentExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DiscardAssignmentExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DiscardAssignmentExprSyntax) throws (E) {
  }

  /// Visiting ``DiscardStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DiscardStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DiscardStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DiscardStmtSyntax) throws (E) {
  }

  /// Visiting `DoExprSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visit(_ node: DoExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `DoExprSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visitPost(_ node: DoExprSyntax) throws (E) {
  }

  /// Visiting ``DoStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DoStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DoStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DoStmtSyntax) throws (E) {
  }

  /// Visiting ``DocumentationAttributeArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DocumentationAttributeArgumentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DocumentationAttributeArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DocumentationAttributeArgumentListSyntax) throws (E) {
  }

  /// Visiting ``DocumentationAttributeArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DocumentationAttributeArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DocumentationAttributeArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DocumentationAttributeArgumentSyntax) throws (E) {
  }

  /// Visiting ``DynamicReplacementAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: DynamicReplacementAttributeArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``DynamicReplacementAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: DynamicReplacementAttributeArgumentsSyntax) throws (E) {
  }

  /// Visiting ``EditorPlaceholderDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EditorPlaceholderDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EditorPlaceholderDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EditorPlaceholderDeclSyntax) throws (E) {
  }

  /// Visiting ``EditorPlaceholderExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EditorPlaceholderExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EditorPlaceholderExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EditorPlaceholderExprSyntax) throws (E) {
  }

  /// Visiting ``EffectsAttributeArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EffectsAttributeArgumentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EffectsAttributeArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EffectsAttributeArgumentListSyntax) throws (E) {
  }

  /// Visiting ``EnumCaseDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EnumCaseDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseDeclSyntax) throws (E) {
  }

  /// Visiting ``EnumCaseElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseElementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EnumCaseElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseElementListSyntax) throws (E) {
  }

  /// Visiting ``EnumCaseElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseElementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EnumCaseElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseElementSyntax) throws (E) {
  }

  /// Visiting ``EnumCaseParameterClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseParameterClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EnumCaseParameterClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseParameterClauseSyntax) throws (E) {
  }

  /// Visiting ``EnumCaseParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseParameterListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EnumCaseParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseParameterListSyntax) throws (E) {
  }

  /// Visiting ``EnumCaseParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumCaseParameterSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EnumCaseParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumCaseParameterSyntax) throws (E) {
  }

  /// Visiting ``EnumDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: EnumDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``EnumDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: EnumDeclSyntax) throws (E) {
  }

  /// Visiting ``ExprListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExprListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ExprListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExprListSyntax) throws (E) {
  }

  /// Visiting ``ExpressionPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExpressionPatternSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ExpressionPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExpressionPatternSyntax) throws (E) {
  }

  /// Visiting ``ExpressionSegmentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExpressionSegmentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ExpressionSegmentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExpressionSegmentSyntax) throws (E) {
  }

  /// Visiting ``ExpressionStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExpressionStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ExpressionStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExpressionStmtSyntax) throws (E) {
  }

  /// Visiting ``ExtensionDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ExtensionDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ExtensionDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ExtensionDeclSyntax) throws (E) {
  }

  /// Visiting ``FallThroughStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FallThroughStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FallThroughStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FallThroughStmtSyntax) throws (E) {
  }

  /// Visiting ``FloatLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FloatLiteralExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FloatLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FloatLiteralExprSyntax) throws (E) {
  }

  /// Visiting ``ForStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ForStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ForStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ForStmtSyntax) throws (E) {
  }

  /// Visiting ``ForceUnwrapExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ForceUnwrapExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ForceUnwrapExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ForceUnwrapExprSyntax) throws (E) {
  }

  /// Visiting ``FunctionCallExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionCallExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FunctionCallExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionCallExprSyntax) throws (E) {
  }

  /// Visiting ``FunctionDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FunctionDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionDeclSyntax) throws (E) {
  }

  /// Visiting ``FunctionEffectSpecifiersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionEffectSpecifiersSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FunctionEffectSpecifiersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionEffectSpecifiersSyntax) throws (E) {
  }

  /// Visiting ``FunctionParameterClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionParameterClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FunctionParameterClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionParameterClauseSyntax) throws (E) {
  }

  /// Visiting ``FunctionParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionParameterListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FunctionParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionParameterListSyntax) throws (E) {
  }

  /// Visiting ``FunctionParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionParameterSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FunctionParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionParameterSyntax) throws (E) {
  }

  /// Visiting ``FunctionSignatureSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionSignatureSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FunctionSignatureSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionSignatureSyntax) throws (E) {
  }

  /// Visiting ``FunctionTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: FunctionTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``FunctionTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: FunctionTypeSyntax) throws (E) {
  }

  /// Visiting ``GenericArgumentClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericArgumentClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericArgumentClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericArgumentClauseSyntax) throws (E) {
  }

  /// Visiting ``GenericArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericArgumentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericArgumentListSyntax) throws (E) {
  }

  /// Visiting ``GenericArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericArgumentSyntax) throws (E) {
  }

  /// Visiting ``GenericParameterClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericParameterClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericParameterClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericParameterClauseSyntax) throws (E) {
  }

  /// Visiting ``GenericParameterListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericParameterListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericParameterListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericParameterListSyntax) throws (E) {
  }

  /// Visiting ``GenericParameterSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericParameterSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericParameterSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericParameterSyntax) throws (E) {
  }

  /// Visiting ``GenericRequirementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericRequirementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericRequirementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericRequirementListSyntax) throws (E) {
  }

  /// Visiting ``GenericRequirementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericRequirementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericRequirementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericRequirementSyntax) throws (E) {
  }

  /// Visiting ``GenericSpecializationExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericSpecializationExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericSpecializationExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericSpecializationExprSyntax) throws (E) {
  }

  /// Visiting ``GenericWhereClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GenericWhereClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GenericWhereClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GenericWhereClauseSyntax) throws (E) {
  }

  /// Visiting ``GuardStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: GuardStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``GuardStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: GuardStmtSyntax) throws (E) {
  }

  /// Visiting ``IdentifierPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IdentifierPatternSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IdentifierPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IdentifierPatternSyntax) throws (E) {
  }

  /// Visiting ``IdentifierTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IdentifierTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IdentifierTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IdentifierTypeSyntax) throws (E) {
  }

  /// Visiting ``IfConfigClauseListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IfConfigClauseListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IfConfigClauseListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IfConfigClauseListSyntax) throws (E) {
  }

  /// Visiting ``IfConfigClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IfConfigClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IfConfigClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IfConfigClauseSyntax) throws (E) {
  }

  /// Visiting ``IfConfigDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IfConfigDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IfConfigDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IfConfigDeclSyntax) throws (E) {
  }

  /// Visiting ``IfExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IfExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IfExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IfExprSyntax) throws (E) {
  }

  /// Visiting ``ImplementsAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImplementsAttributeArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ImplementsAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImplementsAttributeArgumentsSyntax) throws (E) {
  }

  /// Visiting ``ImplicitlyUnwrappedOptionalTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImplicitlyUnwrappedOptionalTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ImplicitlyUnwrappedOptionalTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImplicitlyUnwrappedOptionalTypeSyntax) throws (E) {
  }

  /// Visiting ``ImportDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImportDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ImportDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImportDeclSyntax) throws (E) {
  }

  /// Visiting ``ImportPathComponentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImportPathComponentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ImportPathComponentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImportPathComponentListSyntax) throws (E) {
  }

  /// Visiting ``ImportPathComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ImportPathComponentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ImportPathComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ImportPathComponentSyntax) throws (E) {
  }

  /// Visiting ``InOutExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InOutExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``InOutExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InOutExprSyntax) throws (E) {
  }

  /// Visiting ``InfixOperatorExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InfixOperatorExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``InfixOperatorExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InfixOperatorExprSyntax) throws (E) {
  }

  /// Visiting ``InheritanceClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InheritanceClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``InheritanceClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InheritanceClauseSyntax) throws (E) {
  }

  /// Visiting ``InheritedTypeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InheritedTypeListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``InheritedTypeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InheritedTypeListSyntax) throws (E) {
  }

  /// Visiting ``InheritedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InheritedTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``InheritedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InheritedTypeSyntax) throws (E) {
  }

  /// Visiting ``InitializerClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InitializerClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``InitializerClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InitializerClauseSyntax) throws (E) {
  }

  /// Visiting ``InitializerDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: InitializerDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``InitializerDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: InitializerDeclSyntax) throws (E) {
  }

  /// Visiting `InlineArrayTypeSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visit(_ node: InlineArrayTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `InlineArrayTypeSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visitPost(_ node: InlineArrayTypeSyntax) throws (E) {
  }

  /// Visiting ``IntegerLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IntegerLiteralExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IntegerLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IntegerLiteralExprSyntax) throws (E) {
  }

  /// Visiting ``IsExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IsExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IsExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IsExprSyntax) throws (E) {
  }

  /// Visiting ``IsTypePatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: IsTypePatternSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``IsTypePatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: IsTypePatternSyntax) throws (E) {
  }

  /// Visiting ``KeyPathComponentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathComponentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``KeyPathComponentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathComponentListSyntax) throws (E) {
  }

  /// Visiting ``KeyPathComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathComponentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``KeyPathComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathComponentSyntax) throws (E) {
  }

  /// Visiting ``KeyPathExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``KeyPathExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathExprSyntax) throws (E) {
  }

  /// Visiting `KeyPathMethodComponentSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visit(_ node: KeyPathMethodComponentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `KeyPathMethodComponentSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visitPost(_ node: KeyPathMethodComponentSyntax) throws (E) {
  }

  /// Visiting ``KeyPathOptionalComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathOptionalComponentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``KeyPathOptionalComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathOptionalComponentSyntax) throws (E) {
  }

  /// Visiting ``KeyPathPropertyComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathPropertyComponentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``KeyPathPropertyComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathPropertyComponentSyntax) throws (E) {
  }

  /// Visiting ``KeyPathSubscriptComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: KeyPathSubscriptComponentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``KeyPathSubscriptComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: KeyPathSubscriptComponentSyntax) throws (E) {
  }

  /// Visiting ``LabeledExprListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LabeledExprListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``LabeledExprListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LabeledExprListSyntax) throws (E) {
  }

  /// Visiting ``LabeledExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LabeledExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``LabeledExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LabeledExprSyntax) throws (E) {
  }

  /// Visiting ``LabeledSpecializeArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LabeledSpecializeArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``LabeledSpecializeArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LabeledSpecializeArgumentSyntax) throws (E) {
  }

  /// Visiting ``LabeledStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LabeledStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``LabeledStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LabeledStmtSyntax) throws (E) {
  }

  /// Visiting ``LayoutRequirementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: LayoutRequirementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``LayoutRequirementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: LayoutRequirementSyntax) throws (E) {
  }

  /// Visiting `LifetimeSpecifierArgumentListSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visit(_ node: LifetimeSpecifierArgumentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `LifetimeSpecifierArgumentListSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visitPost(_ node: LifetimeSpecifierArgumentListSyntax) throws (E) {
  }

  /// Visiting `LifetimeSpecifierArgumentSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visit(_ node: LifetimeSpecifierArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `LifetimeSpecifierArgumentSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visitPost(_ node: LifetimeSpecifierArgumentSyntax) throws (E) {
  }

  /// Visiting `LifetimeTypeSpecifierSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visit(_ node: LifetimeTypeSpecifierSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `LifetimeTypeSpecifierSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visitPost(_ node: LifetimeTypeSpecifierSyntax) throws (E) {
  }

  /// Visiting ``MacroDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MacroDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MacroDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MacroDeclSyntax) throws (E) {
  }

  /// Visiting ``MacroExpansionDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MacroExpansionDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MacroExpansionDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MacroExpansionDeclSyntax) throws (E) {
  }

  /// Visiting ``MacroExpansionExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MacroExpansionExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MacroExpansionExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MacroExpansionExprSyntax) throws (E) {
  }

  /// Visiting ``MatchingPatternConditionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MatchingPatternConditionSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MatchingPatternConditionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MatchingPatternConditionSyntax) throws (E) {
  }

  /// Visiting ``MemberAccessExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberAccessExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MemberAccessExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberAccessExprSyntax) throws (E) {
  }

  /// Visiting ``MemberBlockItemListFileSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(Compiler)
  open func visit(_ node: MemberBlockItemListFileSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MemberBlockItemListFileSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(Compiler)
  open func visitPost(_ node: MemberBlockItemListFileSyntax) throws (E) {
  }

  /// Visiting ``MemberBlockItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberBlockItemListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MemberBlockItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberBlockItemListSyntax) throws (E) {
  }

  /// Visiting ``MemberBlockItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberBlockItemSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MemberBlockItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberBlockItemSyntax) throws (E) {
  }

  /// Visiting ``MemberBlockSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberBlockSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MemberBlockSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberBlockSyntax) throws (E) {
  }

  /// Visiting ``MemberTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MemberTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MemberTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MemberTypeSyntax) throws (E) {
  }

  /// Visiting ``MetatypeTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MetatypeTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MetatypeTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MetatypeTypeSyntax) throws (E) {
  }

  /// Visiting ``MissingDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MissingDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingDeclSyntax) throws (E) {
  }

  /// Visiting ``MissingExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MissingExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingExprSyntax) throws (E) {
  }

  /// Visiting ``MissingPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingPatternSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MissingPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingPatternSyntax) throws (E) {
  }

  /// Visiting ``MissingStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MissingStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingStmtSyntax) throws (E) {
  }

  /// Visiting ``MissingSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MissingSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingSyntax) throws (E) {
  }

  /// Visiting ``MissingTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MissingTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MissingTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MissingTypeSyntax) throws (E) {
  }

  /// Visiting ``MultipleTrailingClosureElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MultipleTrailingClosureElementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MultipleTrailingClosureElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MultipleTrailingClosureElementListSyntax) throws (E) {
  }

  /// Visiting ``MultipleTrailingClosureElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: MultipleTrailingClosureElementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``MultipleTrailingClosureElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: MultipleTrailingClosureElementSyntax) throws (E) {
  }

  /// Visiting ``NamedOpaqueReturnTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: NamedOpaqueReturnTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``NamedOpaqueReturnTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: NamedOpaqueReturnTypeSyntax) throws (E) {
  }

  /// Visiting ``NilLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: NilLiteralExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``NilLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: NilLiteralExprSyntax) throws (E) {
  }

  /// Visiting ``NonisolatedSpecifierArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: NonisolatedSpecifierArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``NonisolatedSpecifierArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: NonisolatedSpecifierArgumentSyntax) throws (E) {
  }

  /// Visiting ``NonisolatedTypeSpecifierSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: NonisolatedTypeSpecifierSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``NonisolatedTypeSpecifierSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: NonisolatedTypeSpecifierSyntax) throws (E) {
  }

  /// Visiting ``ObjCSelectorPieceListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ObjCSelectorPieceListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ObjCSelectorPieceListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ObjCSelectorPieceListSyntax) throws (E) {
  }

  /// Visiting ``ObjCSelectorPieceSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ObjCSelectorPieceSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ObjCSelectorPieceSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ObjCSelectorPieceSyntax) throws (E) {
  }

  /// Visiting ``OperatorDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OperatorDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``OperatorDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OperatorDeclSyntax) throws (E) {
  }

  /// Visiting ``OperatorPrecedenceAndTypesSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OperatorPrecedenceAndTypesSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``OperatorPrecedenceAndTypesSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OperatorPrecedenceAndTypesSyntax) throws (E) {
  }

  /// Visiting ``OptionalBindingConditionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OptionalBindingConditionSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``OptionalBindingConditionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OptionalBindingConditionSyntax) throws (E) {
  }

  /// Visiting ``OptionalChainingExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OptionalChainingExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``OptionalChainingExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OptionalChainingExprSyntax) throws (E) {
  }

  /// Visiting ``OptionalTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OptionalTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``OptionalTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OptionalTypeSyntax) throws (E) {
  }

  /// Visiting ``OriginallyDefinedInAttributeArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: OriginallyDefinedInAttributeArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``OriginallyDefinedInAttributeArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: OriginallyDefinedInAttributeArgumentsSyntax) throws (E) {
  }

  /// Visiting ``PackElementExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PackElementExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PackElementExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PackElementExprSyntax) throws (E) {
  }

  /// Visiting ``PackElementTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PackElementTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PackElementTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PackElementTypeSyntax) throws (E) {
  }

  /// Visiting ``PackExpansionExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PackExpansionExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PackExpansionExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PackExpansionExprSyntax) throws (E) {
  }

  /// Visiting ``PackExpansionTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PackExpansionTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PackExpansionTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PackExpansionTypeSyntax) throws (E) {
  }

  /// Visiting ``PatternBindingListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PatternBindingListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PatternBindingListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PatternBindingListSyntax) throws (E) {
  }

  /// Visiting ``PatternBindingSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PatternBindingSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PatternBindingSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PatternBindingSyntax) throws (E) {
  }

  /// Visiting ``PatternExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PatternExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PatternExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PatternExprSyntax) throws (E) {
  }

  /// Visiting ``PlatformVersionItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PlatformVersionItemListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PlatformVersionItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PlatformVersionItemListSyntax) throws (E) {
  }

  /// Visiting ``PlatformVersionItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PlatformVersionItemSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PlatformVersionItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PlatformVersionItemSyntax) throws (E) {
  }

  /// Visiting ``PlatformVersionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PlatformVersionSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PlatformVersionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PlatformVersionSyntax) throws (E) {
  }

  /// Visiting ``PostfixIfConfigExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PostfixIfConfigExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PostfixIfConfigExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PostfixIfConfigExprSyntax) throws (E) {
  }

  /// Visiting ``PostfixOperatorExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PostfixOperatorExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PostfixOperatorExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PostfixOperatorExprSyntax) throws (E) {
  }

  /// Visiting ``PoundSourceLocationArgumentsSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PoundSourceLocationArgumentsSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PoundSourceLocationArgumentsSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PoundSourceLocationArgumentsSyntax) throws (E) {
  }

  /// Visiting ``PoundSourceLocationSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PoundSourceLocationSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PoundSourceLocationSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PoundSourceLocationSyntax) throws (E) {
  }

  /// Visiting ``PrecedenceGroupAssignmentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupAssignmentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrecedenceGroupAssignmentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupAssignmentSyntax) throws (E) {
  }

  /// Visiting ``PrecedenceGroupAssociativitySyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupAssociativitySyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrecedenceGroupAssociativitySyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupAssociativitySyntax) throws (E) {
  }

  /// Visiting ``PrecedenceGroupAttributeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupAttributeListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrecedenceGroupAttributeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupAttributeListSyntax) throws (E) {
  }

  /// Visiting ``PrecedenceGroupDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrecedenceGroupDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupDeclSyntax) throws (E) {
  }

  /// Visiting ``PrecedenceGroupNameListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupNameListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrecedenceGroupNameListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupNameListSyntax) throws (E) {
  }

  /// Visiting ``PrecedenceGroupNameSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupNameSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrecedenceGroupNameSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupNameSyntax) throws (E) {
  }

  /// Visiting ``PrecedenceGroupRelationSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrecedenceGroupRelationSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrecedenceGroupRelationSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrecedenceGroupRelationSyntax) throws (E) {
  }

  /// Visiting ``PrefixOperatorExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrefixOperatorExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrefixOperatorExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrefixOperatorExprSyntax) throws (E) {
  }

  /// Visiting ``PrimaryAssociatedTypeClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrimaryAssociatedTypeClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrimaryAssociatedTypeClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrimaryAssociatedTypeClauseSyntax) throws (E) {
  }

  /// Visiting ``PrimaryAssociatedTypeListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrimaryAssociatedTypeListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrimaryAssociatedTypeListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrimaryAssociatedTypeListSyntax) throws (E) {
  }

  /// Visiting ``PrimaryAssociatedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: PrimaryAssociatedTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``PrimaryAssociatedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: PrimaryAssociatedTypeSyntax) throws (E) {
  }

  /// Visiting ``ProtocolDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ProtocolDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ProtocolDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ProtocolDeclSyntax) throws (E) {
  }

  /// Visiting ``RegexLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: RegexLiteralExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``RegexLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: RegexLiteralExprSyntax) throws (E) {
  }

  /// Visiting ``RepeatStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: RepeatStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``RepeatStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: RepeatStmtSyntax) throws (E) {
  }

  /// Visiting ``ReturnClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ReturnClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ReturnClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ReturnClauseSyntax) throws (E) {
  }

  /// Visiting ``ReturnStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ReturnStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ReturnStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ReturnStmtSyntax) throws (E) {
  }

  /// Visiting ``SameTypeRequirementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SameTypeRequirementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SameTypeRequirementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SameTypeRequirementSyntax) throws (E) {
  }

  /// Visiting ``SequenceExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SequenceExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SequenceExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SequenceExprSyntax) throws (E) {
  }

  /// Visiting ``SimpleStringLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SimpleStringLiteralExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SimpleStringLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SimpleStringLiteralExprSyntax) throws (E) {
  }

  /// Visiting ``SimpleStringLiteralSegmentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SimpleStringLiteralSegmentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SimpleStringLiteralSegmentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SimpleStringLiteralSegmentListSyntax) throws (E) {
  }

  /// Visiting ``SimpleTypeSpecifierSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SimpleTypeSpecifierSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SimpleTypeSpecifierSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SimpleTypeSpecifierSyntax) throws (E) {
  }

  /// Visiting ``SomeOrAnyTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SomeOrAnyTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SomeOrAnyTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SomeOrAnyTypeSyntax) throws (E) {
  }

  /// Visiting ``SourceFileSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SourceFileSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SourceFileSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SourceFileSyntax) throws (E) {
  }

  /// Visiting ``SpecializeAttributeArgumentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SpecializeAttributeArgumentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SpecializeAttributeArgumentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SpecializeAttributeArgumentListSyntax) throws (E) {
  }

  /// Visiting ``SpecializeAvailabilityArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SpecializeAvailabilityArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SpecializeAvailabilityArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SpecializeAvailabilityArgumentSyntax) throws (E) {
  }

  /// Visiting ``SpecializeTargetFunctionArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SpecializeTargetFunctionArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SpecializeTargetFunctionArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SpecializeTargetFunctionArgumentSyntax) throws (E) {
  }

  /// Visiting ``SpecializedAttributeArgumentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SpecializedAttributeArgumentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SpecializedAttributeArgumentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SpecializedAttributeArgumentSyntax) throws (E) {
  }

  /// Visiting ``StringLiteralExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: StringLiteralExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``StringLiteralExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: StringLiteralExprSyntax) throws (E) {
  }

  /// Visiting ``StringLiteralSegmentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: StringLiteralSegmentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``StringLiteralSegmentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: StringLiteralSegmentListSyntax) throws (E) {
  }

  /// Visiting ``StringSegmentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: StringSegmentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``StringSegmentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: StringSegmentSyntax) throws (E) {
  }

  /// Visiting ``StructDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: StructDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``StructDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: StructDeclSyntax) throws (E) {
  }

  /// Visiting ``SubscriptCallExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SubscriptCallExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SubscriptCallExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SubscriptCallExprSyntax) throws (E) {
  }

  /// Visiting ``SubscriptDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SubscriptDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SubscriptDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SubscriptDeclSyntax) throws (E) {
  }

  /// Visiting ``SuperExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SuperExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SuperExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SuperExprSyntax) throws (E) {
  }

  /// Visiting ``SuppressedTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SuppressedTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SuppressedTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SuppressedTypeSyntax) throws (E) {
  }

  /// Visiting ``SwitchCaseItemListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseItemListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SwitchCaseItemListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseItemListSyntax) throws (E) {
  }

  /// Visiting ``SwitchCaseItemSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseItemSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SwitchCaseItemSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseItemSyntax) throws (E) {
  }

  /// Visiting ``SwitchCaseLabelSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseLabelSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SwitchCaseLabelSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseLabelSyntax) throws (E) {
  }

  /// Visiting ``SwitchCaseListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SwitchCaseListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseListSyntax) throws (E) {
  }

  /// Visiting ``SwitchCaseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchCaseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SwitchCaseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchCaseSyntax) throws (E) {
  }

  /// Visiting ``SwitchDefaultLabelSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchDefaultLabelSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SwitchDefaultLabelSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchDefaultLabelSyntax) throws (E) {
  }

  /// Visiting ``SwitchExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: SwitchExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``SwitchExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: SwitchExprSyntax) throws (E) {
  }

  /// Visiting ``TernaryExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TernaryExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TernaryExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TernaryExprSyntax) throws (E) {
  }

  /// Visiting `ThenStmtSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visit(_ node: ThenStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `ThenStmtSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visitPost(_ node: ThenStmtSyntax) throws (E) {
  }

  /// Visiting ``ThrowStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ThrowStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ThrowStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ThrowStmtSyntax) throws (E) {
  }

  /// Visiting ``ThrowsClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ThrowsClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ThrowsClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ThrowsClauseSyntax) throws (E) {
  }

  /// Visiting ``TryExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TryExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TryExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TryExprSyntax) throws (E) {
  }

  /// Visiting ``TupleExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TupleExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TupleExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TupleExprSyntax) throws (E) {
  }

  /// Visiting ``TuplePatternElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TuplePatternElementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TuplePatternElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TuplePatternElementListSyntax) throws (E) {
  }

  /// Visiting ``TuplePatternElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TuplePatternElementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TuplePatternElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TuplePatternElementSyntax) throws (E) {
  }

  /// Visiting ``TuplePatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TuplePatternSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TuplePatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TuplePatternSyntax) throws (E) {
  }

  /// Visiting ``TupleTypeElementListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TupleTypeElementListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TupleTypeElementListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TupleTypeElementListSyntax) throws (E) {
  }

  /// Visiting ``TupleTypeElementSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TupleTypeElementSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TupleTypeElementSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TupleTypeElementSyntax) throws (E) {
  }

  /// Visiting ``TupleTypeSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TupleTypeSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TupleTypeSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TupleTypeSyntax) throws (E) {
  }

  /// Visiting ``TypeAliasDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeAliasDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TypeAliasDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeAliasDeclSyntax) throws (E) {
  }

  /// Visiting ``TypeAnnotationSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeAnnotationSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TypeAnnotationSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeAnnotationSyntax) throws (E) {
  }

  /// Visiting ``TypeEffectSpecifiersSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeEffectSpecifiersSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TypeEffectSpecifiersSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeEffectSpecifiersSyntax) throws (E) {
  }

  /// Visiting ``TypeExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TypeExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeExprSyntax) throws (E) {
  }

  /// Visiting ``TypeInitializerClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeInitializerClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TypeInitializerClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeInitializerClauseSyntax) throws (E) {
  }

  /// Visiting ``TypeSpecifierListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: TypeSpecifierListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``TypeSpecifierListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TypeSpecifierListSyntax) throws (E) {
  }

  /// Visiting ``UnexpectedNodesSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnexpectedNodesSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``UnexpectedNodesSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnexpectedNodesSyntax) throws (E) {
  }

  /// Visiting ``UnresolvedAsExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnresolvedAsExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``UnresolvedAsExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnresolvedAsExprSyntax) throws (E) {
  }

  /// Visiting ``UnresolvedIsExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnresolvedIsExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``UnresolvedIsExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnresolvedIsExprSyntax) throws (E) {
  }

  /// Visiting ``UnresolvedTernaryExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnresolvedTernaryExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``UnresolvedTernaryExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnresolvedTernaryExprSyntax) throws (E) {
  }

  /// Visiting ``UnsafeExprSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: UnsafeExprSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``UnsafeExprSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: UnsafeExprSyntax) throws (E) {
  }

  /// Visiting `UsingDeclSyntax` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visit(_ node: UsingDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting `UsingDeclSyntax` and its descendants.
  ///   - node: the node we just finished visiting.
  @_spi(ExperimentalLanguageFeatures)
  open func visitPost(_ node: UsingDeclSyntax) throws (E) {
  }

  /// Visiting ``ValueBindingPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: ValueBindingPatternSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``ValueBindingPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: ValueBindingPatternSyntax) throws (E) {
  }

  /// Visiting ``VariableDeclSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: VariableDeclSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``VariableDeclSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: VariableDeclSyntax) throws (E) {
  }

  /// Visiting ``VersionComponentListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: VersionComponentListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``VersionComponentListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: VersionComponentListSyntax) throws (E) {
  }

  /// Visiting ``VersionComponentSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: VersionComponentSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``VersionComponentSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: VersionComponentSyntax) throws (E) {
  }

  /// Visiting ``VersionTupleSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: VersionTupleSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``VersionTupleSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: VersionTupleSyntax) throws (E) {
  }

  /// Visiting ``WhereClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: WhereClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``WhereClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: WhereClauseSyntax) throws (E) {
  }

  /// Visiting ``WhileStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: WhileStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``WhileStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: WhileStmtSyntax) throws (E) {
  }

  /// Visiting ``WildcardPatternSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: WildcardPatternSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``WildcardPatternSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: WildcardPatternSyntax) throws (E) {
  }

  /// Visiting ``YieldStmtSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: YieldStmtSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``YieldStmtSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: YieldStmtSyntax) throws (E) {
  }

  /// Visiting ``YieldedExpressionListSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: YieldedExpressionListSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``YieldedExpressionListSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: YieldedExpressionListSyntax) throws (E) {
  }

  /// Visiting ``YieldedExpressionSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: YieldedExpressionSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``YieldedExpressionSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: YieldedExpressionSyntax) throws (E) {
  }

  /// Visiting ``YieldedExpressionsClauseSyntax`` specifically.
  ///   - Parameter node: the node we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ node: YieldedExpressionsClauseSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting ``YieldedExpressionsClauseSyntax`` and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: YieldedExpressionsClauseSyntax) throws (E) {
  }

  /// Visiting ``TokenSyntax`` specifically.
  ///   - Parameter token: the token we are visiting.
  ///   - Returns: how should we continue visiting.
  open func visit(_ token: TokenSyntax) throws (E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting the node and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitPost(_ node: TokenSyntax) throws (E) {
  }

  @inline(never)
  private func visitTokenSyntaxImpl(_ node: Syntax) throws (E) {
    _ = try visit(TokenSyntax(unsafeCasting: node))
    // No children to visit.
    try visitPost(TokenSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitABIAttributeArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ABIAttributeArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ABIAttributeArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAccessorBlockFileSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AccessorBlockFileSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AccessorBlockFileSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAccessorBlockSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AccessorBlockSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AccessorBlockSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAccessorDeclListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AccessorDeclListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AccessorDeclListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAccessorDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AccessorDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AccessorDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAccessorEffectSpecifiersSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AccessorEffectSpecifiersSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AccessorEffectSpecifiersSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAccessorParametersSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AccessorParametersSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AccessorParametersSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitActorDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ActorDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ActorDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitArrayElementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ArrayElementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ArrayElementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitArrayElementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ArrayElementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ArrayElementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitArrayExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ArrayExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ArrayExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitArrayTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ArrayTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ArrayTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitArrowExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ArrowExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ArrowExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAsExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AsExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AsExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAssignmentExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AssignmentExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AssignmentExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAssociatedTypeDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AssociatedTypeDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AssociatedTypeDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAttributeClauseFileSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AttributeClauseFileSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AttributeClauseFileSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAttributeListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AttributeListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AttributeListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAttributeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AttributeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AttributeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAttributedTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AttributedTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AttributedTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAvailabilityArgumentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AvailabilityArgumentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AvailabilityArgumentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAvailabilityArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AvailabilityArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AvailabilityArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAvailabilityConditionSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AvailabilityConditionSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AvailabilityConditionSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAvailabilityLabeledArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AvailabilityLabeledArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AvailabilityLabeledArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAvailabilityMacroDefinitionFileSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AvailabilityMacroDefinitionFileSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AvailabilityMacroDefinitionFileSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitAwaitExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(AwaitExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(AwaitExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitBackDeployedAttributeArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(BackDeployedAttributeArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(BackDeployedAttributeArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitBinaryOperatorExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(BinaryOperatorExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(BinaryOperatorExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitBooleanLiteralExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(BooleanLiteralExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(BooleanLiteralExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitBorrowExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(BorrowExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(BorrowExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitBreakStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(BreakStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(BreakStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visit_CanImportExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(_CanImportExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(_CanImportExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visit_CanImportVersionInfoSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(_CanImportVersionInfoSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(_CanImportVersionInfoSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCatchClauseListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CatchClauseListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CatchClauseListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCatchClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CatchClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CatchClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCatchItemListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CatchItemListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CatchItemListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCatchItemSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CatchItemSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CatchItemSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClassDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClassDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClassDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClassRestrictionTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClassRestrictionTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClassRestrictionTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureCaptureClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureCaptureClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureCaptureClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureCaptureListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureCaptureListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureCaptureListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureCaptureSpecifierSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureCaptureSpecifierSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureCaptureSpecifierSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureCaptureSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureCaptureSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureCaptureSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureParameterClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureParameterClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureParameterClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureParameterListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureParameterListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureParameterListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureParameterSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureParameterSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureParameterSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureShorthandParameterListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureShorthandParameterListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureShorthandParameterListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureShorthandParameterSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureShorthandParameterSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureShorthandParameterSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitClosureSignatureSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ClosureSignatureSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ClosureSignatureSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCodeBlockFileSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CodeBlockFileSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CodeBlockFileSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCodeBlockItemListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CodeBlockItemListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CodeBlockItemListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCodeBlockItemSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CodeBlockItemSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CodeBlockItemSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCodeBlockSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CodeBlockSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CodeBlockSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCompositionTypeElementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CompositionTypeElementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CompositionTypeElementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCompositionTypeElementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CompositionTypeElementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CompositionTypeElementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCompositionTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CompositionTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CompositionTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitConditionElementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ConditionElementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ConditionElementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitConditionElementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ConditionElementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ConditionElementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitConformanceRequirementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ConformanceRequirementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ConformanceRequirementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitConsumeExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ConsumeExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ConsumeExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitContinueStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ContinueStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ContinueStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitCopyExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(CopyExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(CopyExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeclModifierDetailSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeclModifierDetailSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeclModifierDetailSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeclModifierListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeclModifierListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeclModifierListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeclModifierSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeclModifierSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeclModifierSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeclNameArgumentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeclNameArgumentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeclNameArgumentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeclNameArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeclNameArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeclNameArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeclNameArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeclNameArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeclNameArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeclReferenceExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeclReferenceExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeclReferenceExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeferStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeferStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeferStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeinitializerDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeinitializerDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeinitializerDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDeinitializerEffectSpecifiersSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DeinitializerEffectSpecifiersSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DeinitializerEffectSpecifiersSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDerivativeAttributeArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DerivativeAttributeArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DerivativeAttributeArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDesignatedTypeListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DesignatedTypeListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DesignatedTypeListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDesignatedTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DesignatedTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DesignatedTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDictionaryElementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DictionaryElementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DictionaryElementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDictionaryElementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DictionaryElementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DictionaryElementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDictionaryExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DictionaryExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DictionaryExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDictionaryTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DictionaryTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DictionaryTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDifferentiabilityArgumentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DifferentiabilityArgumentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DifferentiabilityArgumentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDifferentiabilityArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DifferentiabilityArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DifferentiabilityArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDifferentiabilityArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DifferentiabilityArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DifferentiabilityArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDifferentiabilityWithRespectToArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DifferentiabilityWithRespectToArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DifferentiabilityWithRespectToArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDifferentiableAttributeArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DifferentiableAttributeArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DifferentiableAttributeArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDiscardAssignmentExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DiscardAssignmentExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DiscardAssignmentExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDiscardStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DiscardStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DiscardStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDoExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DoExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DoExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDoStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DoStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DoStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDocumentationAttributeArgumentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DocumentationAttributeArgumentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DocumentationAttributeArgumentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDocumentationAttributeArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DocumentationAttributeArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DocumentationAttributeArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitDynamicReplacementAttributeArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(DynamicReplacementAttributeArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(DynamicReplacementAttributeArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEditorPlaceholderDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EditorPlaceholderDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EditorPlaceholderDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEditorPlaceholderExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EditorPlaceholderExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EditorPlaceholderExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEffectsAttributeArgumentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EffectsAttributeArgumentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EffectsAttributeArgumentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEnumCaseDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EnumCaseDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EnumCaseDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEnumCaseElementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EnumCaseElementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EnumCaseElementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEnumCaseElementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EnumCaseElementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EnumCaseElementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEnumCaseParameterClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EnumCaseParameterClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EnumCaseParameterClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEnumCaseParameterListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EnumCaseParameterListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EnumCaseParameterListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEnumCaseParameterSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EnumCaseParameterSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EnumCaseParameterSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitEnumDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(EnumDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(EnumDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitExprListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ExprListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ExprListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitExpressionPatternSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ExpressionPatternSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ExpressionPatternSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitExpressionSegmentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ExpressionSegmentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ExpressionSegmentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitExpressionStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ExpressionStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ExpressionStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitExtensionDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ExtensionDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ExtensionDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFallThroughStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FallThroughStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FallThroughStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFloatLiteralExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FloatLiteralExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FloatLiteralExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitForStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ForStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ForStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitForceUnwrapExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ForceUnwrapExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ForceUnwrapExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFunctionCallExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FunctionCallExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FunctionCallExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFunctionDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FunctionDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FunctionDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFunctionEffectSpecifiersSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FunctionEffectSpecifiersSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FunctionEffectSpecifiersSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFunctionParameterClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FunctionParameterClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FunctionParameterClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFunctionParameterListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FunctionParameterListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FunctionParameterListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFunctionParameterSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FunctionParameterSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FunctionParameterSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFunctionSignatureSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FunctionSignatureSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FunctionSignatureSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitFunctionTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(FunctionTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(FunctionTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericArgumentClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericArgumentClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericArgumentClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericArgumentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericArgumentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericArgumentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericParameterClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericParameterClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericParameterClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericParameterListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericParameterListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericParameterListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericParameterSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericParameterSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericParameterSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericRequirementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericRequirementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericRequirementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericRequirementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericRequirementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericRequirementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericSpecializationExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericSpecializationExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericSpecializationExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGenericWhereClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GenericWhereClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GenericWhereClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitGuardStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(GuardStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(GuardStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIdentifierPatternSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IdentifierPatternSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IdentifierPatternSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIdentifierTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IdentifierTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IdentifierTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIfConfigClauseListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IfConfigClauseListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IfConfigClauseListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIfConfigClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IfConfigClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IfConfigClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIfConfigDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IfConfigDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IfConfigDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIfExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IfExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IfExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitImplementsAttributeArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ImplementsAttributeArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ImplementsAttributeArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitImplicitlyUnwrappedOptionalTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ImplicitlyUnwrappedOptionalTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ImplicitlyUnwrappedOptionalTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitImportDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ImportDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ImportDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitImportPathComponentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ImportPathComponentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ImportPathComponentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitImportPathComponentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ImportPathComponentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ImportPathComponentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitInOutExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(InOutExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(InOutExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitInfixOperatorExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(InfixOperatorExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(InfixOperatorExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitInheritanceClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(InheritanceClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(InheritanceClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitInheritedTypeListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(InheritedTypeListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(InheritedTypeListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitInheritedTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(InheritedTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(InheritedTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitInitializerClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(InitializerClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(InitializerClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitInitializerDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(InitializerDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(InitializerDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitInlineArrayTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(InlineArrayTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(InlineArrayTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIntegerLiteralExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IntegerLiteralExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IntegerLiteralExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIsExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IsExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IsExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitIsTypePatternSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(IsTypePatternSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(IsTypePatternSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitKeyPathComponentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(KeyPathComponentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(KeyPathComponentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitKeyPathComponentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(KeyPathComponentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(KeyPathComponentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitKeyPathExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(KeyPathExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(KeyPathExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitKeyPathMethodComponentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(KeyPathMethodComponentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(KeyPathMethodComponentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitKeyPathOptionalComponentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(KeyPathOptionalComponentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(KeyPathOptionalComponentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitKeyPathPropertyComponentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(KeyPathPropertyComponentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(KeyPathPropertyComponentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitKeyPathSubscriptComponentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(KeyPathSubscriptComponentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(KeyPathSubscriptComponentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitLabeledExprListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(LabeledExprListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(LabeledExprListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitLabeledExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(LabeledExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(LabeledExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitLabeledSpecializeArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(LabeledSpecializeArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(LabeledSpecializeArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitLabeledStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(LabeledStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(LabeledStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitLayoutRequirementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(LayoutRequirementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(LayoutRequirementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitLifetimeSpecifierArgumentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(LifetimeSpecifierArgumentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(LifetimeSpecifierArgumentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitLifetimeSpecifierArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(LifetimeSpecifierArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(LifetimeSpecifierArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitLifetimeTypeSpecifierSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(LifetimeTypeSpecifierSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(LifetimeTypeSpecifierSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMacroDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MacroDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MacroDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMacroExpansionDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MacroExpansionDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MacroExpansionDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMacroExpansionExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MacroExpansionExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MacroExpansionExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMatchingPatternConditionSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MatchingPatternConditionSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MatchingPatternConditionSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMemberAccessExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MemberAccessExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MemberAccessExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMemberBlockItemListFileSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MemberBlockItemListFileSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MemberBlockItemListFileSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMemberBlockItemListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MemberBlockItemListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MemberBlockItemListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMemberBlockItemSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MemberBlockItemSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MemberBlockItemSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMemberBlockSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MemberBlockSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MemberBlockSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMemberTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MemberTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MemberTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMetatypeTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MetatypeTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MetatypeTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMissingDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MissingDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MissingDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMissingExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MissingExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MissingExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMissingPatternSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MissingPatternSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MissingPatternSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMissingStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MissingStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MissingStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMissingSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MissingSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MissingSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMissingTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MissingTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MissingTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMultipleTrailingClosureElementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MultipleTrailingClosureElementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MultipleTrailingClosureElementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitMultipleTrailingClosureElementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(MultipleTrailingClosureElementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(MultipleTrailingClosureElementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitNamedOpaqueReturnTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(NamedOpaqueReturnTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(NamedOpaqueReturnTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitNilLiteralExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(NilLiteralExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(NilLiteralExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitNonisolatedSpecifierArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(NonisolatedSpecifierArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(NonisolatedSpecifierArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitNonisolatedTypeSpecifierSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(NonisolatedTypeSpecifierSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(NonisolatedTypeSpecifierSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitObjCSelectorPieceListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ObjCSelectorPieceListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ObjCSelectorPieceListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitObjCSelectorPieceSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ObjCSelectorPieceSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ObjCSelectorPieceSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitOperatorDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(OperatorDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(OperatorDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitOperatorPrecedenceAndTypesSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(OperatorPrecedenceAndTypesSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(OperatorPrecedenceAndTypesSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitOptionalBindingConditionSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(OptionalBindingConditionSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(OptionalBindingConditionSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitOptionalChainingExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(OptionalChainingExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(OptionalChainingExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitOptionalTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(OptionalTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(OptionalTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitOriginallyDefinedInAttributeArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(OriginallyDefinedInAttributeArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(OriginallyDefinedInAttributeArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPackElementExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PackElementExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PackElementExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPackElementTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PackElementTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PackElementTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPackExpansionExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PackExpansionExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PackExpansionExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPackExpansionTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PackExpansionTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PackExpansionTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPatternBindingListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PatternBindingListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PatternBindingListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPatternBindingSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PatternBindingSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PatternBindingSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPatternExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PatternExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PatternExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPlatformVersionItemListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PlatformVersionItemListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PlatformVersionItemListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPlatformVersionItemSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PlatformVersionItemSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PlatformVersionItemSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPlatformVersionSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PlatformVersionSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PlatformVersionSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPostfixIfConfigExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PostfixIfConfigExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PostfixIfConfigExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPostfixOperatorExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PostfixOperatorExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PostfixOperatorExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPoundSourceLocationArgumentsSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PoundSourceLocationArgumentsSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PoundSourceLocationArgumentsSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPoundSourceLocationSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PoundSourceLocationSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PoundSourceLocationSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrecedenceGroupAssignmentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrecedenceGroupAssignmentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrecedenceGroupAssignmentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrecedenceGroupAssociativitySyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrecedenceGroupAssociativitySyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrecedenceGroupAssociativitySyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrecedenceGroupAttributeListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrecedenceGroupAttributeListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrecedenceGroupAttributeListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrecedenceGroupDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrecedenceGroupDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrecedenceGroupDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrecedenceGroupNameListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrecedenceGroupNameListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrecedenceGroupNameListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrecedenceGroupNameSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrecedenceGroupNameSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrecedenceGroupNameSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrecedenceGroupRelationSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrecedenceGroupRelationSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrecedenceGroupRelationSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrefixOperatorExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrefixOperatorExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrefixOperatorExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrimaryAssociatedTypeClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrimaryAssociatedTypeClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrimaryAssociatedTypeClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrimaryAssociatedTypeListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrimaryAssociatedTypeListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrimaryAssociatedTypeListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitPrimaryAssociatedTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(PrimaryAssociatedTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(PrimaryAssociatedTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitProtocolDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ProtocolDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ProtocolDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitRegexLiteralExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(RegexLiteralExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(RegexLiteralExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitRepeatStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(RepeatStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(RepeatStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitReturnClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ReturnClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ReturnClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitReturnStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ReturnStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ReturnStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSameTypeRequirementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SameTypeRequirementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SameTypeRequirementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSequenceExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SequenceExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SequenceExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSimpleStringLiteralExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SimpleStringLiteralExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SimpleStringLiteralExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSimpleStringLiteralSegmentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SimpleStringLiteralSegmentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SimpleStringLiteralSegmentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSimpleTypeSpecifierSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SimpleTypeSpecifierSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SimpleTypeSpecifierSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSomeOrAnyTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SomeOrAnyTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SomeOrAnyTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSourceFileSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SourceFileSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SourceFileSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSpecializeAttributeArgumentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SpecializeAttributeArgumentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SpecializeAttributeArgumentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSpecializeAvailabilityArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SpecializeAvailabilityArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SpecializeAvailabilityArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSpecializeTargetFunctionArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SpecializeTargetFunctionArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SpecializeTargetFunctionArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSpecializedAttributeArgumentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SpecializedAttributeArgumentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SpecializedAttributeArgumentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitStringLiteralExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(StringLiteralExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(StringLiteralExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitStringLiteralSegmentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(StringLiteralSegmentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(StringLiteralSegmentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitStringSegmentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(StringSegmentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(StringSegmentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitStructDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(StructDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(StructDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSubscriptCallExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SubscriptCallExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SubscriptCallExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSubscriptDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SubscriptDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SubscriptDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSuperExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SuperExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SuperExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSuppressedTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SuppressedTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SuppressedTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSwitchCaseItemListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SwitchCaseItemListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SwitchCaseItemListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSwitchCaseItemSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SwitchCaseItemSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SwitchCaseItemSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSwitchCaseLabelSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SwitchCaseLabelSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SwitchCaseLabelSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSwitchCaseListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SwitchCaseListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SwitchCaseListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSwitchCaseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SwitchCaseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SwitchCaseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSwitchDefaultLabelSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SwitchDefaultLabelSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SwitchDefaultLabelSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitSwitchExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(SwitchExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(SwitchExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTernaryExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TernaryExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TernaryExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitThenStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ThenStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ThenStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitThrowStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ThrowStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ThrowStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitThrowsClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ThrowsClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ThrowsClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTryExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TryExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TryExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTupleExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TupleExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TupleExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTuplePatternElementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TuplePatternElementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TuplePatternElementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTuplePatternElementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TuplePatternElementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TuplePatternElementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTuplePatternSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TuplePatternSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TuplePatternSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTupleTypeElementListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TupleTypeElementListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TupleTypeElementListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTupleTypeElementSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TupleTypeElementSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TupleTypeElementSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTupleTypeSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TupleTypeSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TupleTypeSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTypeAliasDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TypeAliasDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TypeAliasDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTypeAnnotationSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TypeAnnotationSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TypeAnnotationSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTypeEffectSpecifiersSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TypeEffectSpecifiersSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TypeEffectSpecifiersSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTypeExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TypeExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TypeExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTypeInitializerClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TypeInitializerClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TypeInitializerClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitTypeSpecifierListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(TypeSpecifierListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(TypeSpecifierListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitUnexpectedNodesSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(UnexpectedNodesSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(UnexpectedNodesSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitUnresolvedAsExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(UnresolvedAsExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(UnresolvedAsExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitUnresolvedIsExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(UnresolvedIsExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(UnresolvedIsExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitUnresolvedTernaryExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(UnresolvedTernaryExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(UnresolvedTernaryExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitUnsafeExprSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(UnsafeExprSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(UnsafeExprSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitUsingDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(UsingDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(UsingDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitValueBindingPatternSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(ValueBindingPatternSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(ValueBindingPatternSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitVariableDeclSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(VariableDeclSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(VariableDeclSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitVersionComponentListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(VersionComponentListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(VersionComponentListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitVersionComponentSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(VersionComponentSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(VersionComponentSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitVersionTupleSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(VersionTupleSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(VersionTupleSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitWhereClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(WhereClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(WhereClauseSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitWhileStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(WhileStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(WhileStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitWildcardPatternSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(WildcardPatternSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(WildcardPatternSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitYieldStmtSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(YieldStmtSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(YieldStmtSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitYieldedExpressionListSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(YieldedExpressionListSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(YieldedExpressionListSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitYieldedExpressionSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(YieldedExpressionSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(YieldedExpressionSyntax(unsafeCasting: node))
  }

  @inline(never)
  private func visitYieldedExpressionsClauseSyntaxImpl(_ node: Syntax) throws (E) {
    if try visit(YieldedExpressionsClauseSyntax(unsafeCasting: node)) == .visitChildren {
      try visitChildren(node)
    }
    try visitPost(YieldedExpressionsClauseSyntax(unsafeCasting: node))
  }

  // SwiftSyntax requires a lot of stack space in debug builds for syntax tree
  // visitation. In scenarios with reduced stack space (in particular dispatch
  // queues), this easily results in a stack overflow. To work around this issue,
  // use a less performant but also less stack-hungry version of SwiftSyntax's
  // SyntaxVisitor in debug builds.
  #if DEBUG
  /// Implementation detail of visit(_:). Do not call directly.
  ///
  /// Returns the function that shall be called to visit a specific syntax node.
  ///
  /// To determine the correct specific visitation function for a syntax node,
  /// we need to switch through a huge switch statement that covers all syntax
  /// types. In debug builds, the cases of this switch statement do not share
  /// stack space (rdar://55929175). Because of this, the switch statement
  /// requires about 15KB of stack space. In scenarios with reduced
  /// stack size (in particular dispatch queues), this often results in a stack
  /// overflow during syntax tree rewriting.
  ///
  /// To circumvent this problem, make calling the specific visitation function
  /// a two-step process: First determine the function to call in this function
  /// and return a reference to it, then call it. This way, the stack frame
  /// that determines the correct visitation function will be popped of the
  /// stack before the function is being called, making the switch's stack
  /// space transient instead of having it linger in the call stack.
  private func visitationFunc(for node: Syntax) -> (Syntax) throws (E) -> Void {
    switch node.raw.kind {
    case .token:
      return self.visitTokenSyntaxImpl(_:)
    case .abiAttributeArguments:
      return self.visitABIAttributeArgumentsSyntaxImpl(_:)
    case .accessorBlockFile:
      return self.visitAccessorBlockFileSyntaxImpl(_:)
    case .accessorBlock:
      return self.visitAccessorBlockSyntaxImpl(_:)
    case .accessorDeclList:
      return self.visitAccessorDeclListSyntaxImpl(_:)
    case .accessorDecl:
      return self.visitAccessorDeclSyntaxImpl(_:)
    case .accessorEffectSpecifiers:
      return self.visitAccessorEffectSpecifiersSyntaxImpl(_:)
    case .accessorParameters:
      return self.visitAccessorParametersSyntaxImpl(_:)
    case .actorDecl:
      return self.visitActorDeclSyntaxImpl(_:)
    case .arrayElementList:
      return self.visitArrayElementListSyntaxImpl(_:)
    case .arrayElement:
      return self.visitArrayElementSyntaxImpl(_:)
    case .arrayExpr:
      return self.visitArrayExprSyntaxImpl(_:)
    case .arrayType:
      return self.visitArrayTypeSyntaxImpl(_:)
    case .arrowExpr:
      return self.visitArrowExprSyntaxImpl(_:)
    case .asExpr:
      return self.visitAsExprSyntaxImpl(_:)
    case .assignmentExpr:
      return self.visitAssignmentExprSyntaxImpl(_:)
    case .associatedTypeDecl:
      return self.visitAssociatedTypeDeclSyntaxImpl(_:)
    case .attributeClauseFile:
      return self.visitAttributeClauseFileSyntaxImpl(_:)
    case .attributeList:
      return self.visitAttributeListSyntaxImpl(_:)
    case .attribute:
      return self.visitAttributeSyntaxImpl(_:)
    case .attributedType:
      return self.visitAttributedTypeSyntaxImpl(_:)
    case .availabilityArgumentList:
      return self.visitAvailabilityArgumentListSyntaxImpl(_:)
    case .availabilityArgument:
      return self.visitAvailabilityArgumentSyntaxImpl(_:)
    case .availabilityCondition:
      return self.visitAvailabilityConditionSyntaxImpl(_:)
    case .availabilityLabeledArgument:
      return self.visitAvailabilityLabeledArgumentSyntaxImpl(_:)
    case .availabilityMacroDefinitionFile:
      return self.visitAvailabilityMacroDefinitionFileSyntaxImpl(_:)
    case .awaitExpr:
      return self.visitAwaitExprSyntaxImpl(_:)
    case .backDeployedAttributeArguments:
      return self.visitBackDeployedAttributeArgumentsSyntaxImpl(_:)
    case .binaryOperatorExpr:
      return self.visitBinaryOperatorExprSyntaxImpl(_:)
    case .booleanLiteralExpr:
      return self.visitBooleanLiteralExprSyntaxImpl(_:)
    case .borrowExpr:
      return self.visitBorrowExprSyntaxImpl(_:)
    case .breakStmt:
      return self.visitBreakStmtSyntaxImpl(_:)
    case ._canImportExpr:
      return self.visit_CanImportExprSyntaxImpl(_:)
    case ._canImportVersionInfo:
      return self.visit_CanImportVersionInfoSyntaxImpl(_:)
    case .catchClauseList:
      return self.visitCatchClauseListSyntaxImpl(_:)
    case .catchClause:
      return self.visitCatchClauseSyntaxImpl(_:)
    case .catchItemList:
      return self.visitCatchItemListSyntaxImpl(_:)
    case .catchItem:
      return self.visitCatchItemSyntaxImpl(_:)
    case .classDecl:
      return self.visitClassDeclSyntaxImpl(_:)
    case .classRestrictionType:
      return self.visitClassRestrictionTypeSyntaxImpl(_:)
    case .closureCaptureClause:
      return self.visitClosureCaptureClauseSyntaxImpl(_:)
    case .closureCaptureList:
      return self.visitClosureCaptureListSyntaxImpl(_:)
    case .closureCaptureSpecifier:
      return self.visitClosureCaptureSpecifierSyntaxImpl(_:)
    case .closureCapture:
      return self.visitClosureCaptureSyntaxImpl(_:)
    case .closureExpr:
      return self.visitClosureExprSyntaxImpl(_:)
    case .closureParameterClause:
      return self.visitClosureParameterClauseSyntaxImpl(_:)
    case .closureParameterList:
      return self.visitClosureParameterListSyntaxImpl(_:)
    case .closureParameter:
      return self.visitClosureParameterSyntaxImpl(_:)
    case .closureShorthandParameterList:
      return self.visitClosureShorthandParameterListSyntaxImpl(_:)
    case .closureShorthandParameter:
      return self.visitClosureShorthandParameterSyntaxImpl(_:)
    case .closureSignature:
      return self.visitClosureSignatureSyntaxImpl(_:)
    case .codeBlockFile:
      return self.visitCodeBlockFileSyntaxImpl(_:)
    case .codeBlockItemList:
      return self.visitCodeBlockItemListSyntaxImpl(_:)
    case .codeBlockItem:
      return self.visitCodeBlockItemSyntaxImpl(_:)
    case .codeBlock:
      return self.visitCodeBlockSyntaxImpl(_:)
    case .compositionTypeElementList:
      return self.visitCompositionTypeElementListSyntaxImpl(_:)
    case .compositionTypeElement:
      return self.visitCompositionTypeElementSyntaxImpl(_:)
    case .compositionType:
      return self.visitCompositionTypeSyntaxImpl(_:)
    case .conditionElementList:
      return self.visitConditionElementListSyntaxImpl(_:)
    case .conditionElement:
      return self.visitConditionElementSyntaxImpl(_:)
    case .conformanceRequirement:
      return self.visitConformanceRequirementSyntaxImpl(_:)
    case .consumeExpr:
      return self.visitConsumeExprSyntaxImpl(_:)
    case .continueStmt:
      return self.visitContinueStmtSyntaxImpl(_:)
    case .copyExpr:
      return self.visitCopyExprSyntaxImpl(_:)
    case .declModifierDetail:
      return self.visitDeclModifierDetailSyntaxImpl(_:)
    case .declModifierList:
      return self.visitDeclModifierListSyntaxImpl(_:)
    case .declModifier:
      return self.visitDeclModifierSyntaxImpl(_:)
    case .declNameArgumentList:
      return self.visitDeclNameArgumentListSyntaxImpl(_:)
    case .declNameArgument:
      return self.visitDeclNameArgumentSyntaxImpl(_:)
    case .declNameArguments:
      return self.visitDeclNameArgumentsSyntaxImpl(_:)
    case .declReferenceExpr:
      return self.visitDeclReferenceExprSyntaxImpl(_:)
    case .deferStmt:
      return self.visitDeferStmtSyntaxImpl(_:)
    case .deinitializerDecl:
      return self.visitDeinitializerDeclSyntaxImpl(_:)
    case .deinitializerEffectSpecifiers:
      return self.visitDeinitializerEffectSpecifiersSyntaxImpl(_:)
    case .derivativeAttributeArguments:
      return self.visitDerivativeAttributeArgumentsSyntaxImpl(_:)
    case .designatedTypeList:
      return self.visitDesignatedTypeListSyntaxImpl(_:)
    case .designatedType:
      return self.visitDesignatedTypeSyntaxImpl(_:)
    case .dictionaryElementList:
      return self.visitDictionaryElementListSyntaxImpl(_:)
    case .dictionaryElement:
      return self.visitDictionaryElementSyntaxImpl(_:)
    case .dictionaryExpr:
      return self.visitDictionaryExprSyntaxImpl(_:)
    case .dictionaryType:
      return self.visitDictionaryTypeSyntaxImpl(_:)
    case .differentiabilityArgumentList:
      return self.visitDifferentiabilityArgumentListSyntaxImpl(_:)
    case .differentiabilityArgument:
      return self.visitDifferentiabilityArgumentSyntaxImpl(_:)
    case .differentiabilityArguments:
      return self.visitDifferentiabilityArgumentsSyntaxImpl(_:)
    case .differentiabilityWithRespectToArgument:
      return self.visitDifferentiabilityWithRespectToArgumentSyntaxImpl(_:)
    case .differentiableAttributeArguments:
      return self.visitDifferentiableAttributeArgumentsSyntaxImpl(_:)
    case .discardAssignmentExpr:
      return self.visitDiscardAssignmentExprSyntaxImpl(_:)
    case .discardStmt:
      return self.visitDiscardStmtSyntaxImpl(_:)
    case .doExpr:
      return self.visitDoExprSyntaxImpl(_:)
    case .doStmt:
      return self.visitDoStmtSyntaxImpl(_:)
    case .documentationAttributeArgumentList:
      return self.visitDocumentationAttributeArgumentListSyntaxImpl(_:)
    case .documentationAttributeArgument:
      return self.visitDocumentationAttributeArgumentSyntaxImpl(_:)
    case .dynamicReplacementAttributeArguments:
      return self.visitDynamicReplacementAttributeArgumentsSyntaxImpl(_:)
    case .editorPlaceholderDecl:
      return self.visitEditorPlaceholderDeclSyntaxImpl(_:)
    case .editorPlaceholderExpr:
      return self.visitEditorPlaceholderExprSyntaxImpl(_:)
    case .effectsAttributeArgumentList:
      return self.visitEffectsAttributeArgumentListSyntaxImpl(_:)
    case .enumCaseDecl:
      return self.visitEnumCaseDeclSyntaxImpl(_:)
    case .enumCaseElementList:
      return self.visitEnumCaseElementListSyntaxImpl(_:)
    case .enumCaseElement:
      return self.visitEnumCaseElementSyntaxImpl(_:)
    case .enumCaseParameterClause:
      return self.visitEnumCaseParameterClauseSyntaxImpl(_:)
    case .enumCaseParameterList:
      return self.visitEnumCaseParameterListSyntaxImpl(_:)
    case .enumCaseParameter:
      return self.visitEnumCaseParameterSyntaxImpl(_:)
    case .enumDecl:
      return self.visitEnumDeclSyntaxImpl(_:)
    case .exprList:
      return self.visitExprListSyntaxImpl(_:)
    case .expressionPattern:
      return self.visitExpressionPatternSyntaxImpl(_:)
    case .expressionSegment:
      return self.visitExpressionSegmentSyntaxImpl(_:)
    case .expressionStmt:
      return self.visitExpressionStmtSyntaxImpl(_:)
    case .extensionDecl:
      return self.visitExtensionDeclSyntaxImpl(_:)
    case .fallThroughStmt:
      return self.visitFallThroughStmtSyntaxImpl(_:)
    case .floatLiteralExpr:
      return self.visitFloatLiteralExprSyntaxImpl(_:)
    case .forStmt:
      return self.visitForStmtSyntaxImpl(_:)
    case .forceUnwrapExpr:
      return self.visitForceUnwrapExprSyntaxImpl(_:)
    case .functionCallExpr:
      return self.visitFunctionCallExprSyntaxImpl(_:)
    case .functionDecl:
      return self.visitFunctionDeclSyntaxImpl(_:)
    case .functionEffectSpecifiers:
      return self.visitFunctionEffectSpecifiersSyntaxImpl(_:)
    case .functionParameterClause:
      return self.visitFunctionParameterClauseSyntaxImpl(_:)
    case .functionParameterList:
      return self.visitFunctionParameterListSyntaxImpl(_:)
    case .functionParameter:
      return self.visitFunctionParameterSyntaxImpl(_:)
    case .functionSignature:
      return self.visitFunctionSignatureSyntaxImpl(_:)
    case .functionType:
      return self.visitFunctionTypeSyntaxImpl(_:)
    case .genericArgumentClause:
      return self.visitGenericArgumentClauseSyntaxImpl(_:)
    case .genericArgumentList:
      return self.visitGenericArgumentListSyntaxImpl(_:)
    case .genericArgument:
      return self.visitGenericArgumentSyntaxImpl(_:)
    case .genericParameterClause:
      return self.visitGenericParameterClauseSyntaxImpl(_:)
    case .genericParameterList:
      return self.visitGenericParameterListSyntaxImpl(_:)
    case .genericParameter:
      return self.visitGenericParameterSyntaxImpl(_:)
    case .genericRequirementList:
      return self.visitGenericRequirementListSyntaxImpl(_:)
    case .genericRequirement:
      return self.visitGenericRequirementSyntaxImpl(_:)
    case .genericSpecializationExpr:
      return self.visitGenericSpecializationExprSyntaxImpl(_:)
    case .genericWhereClause:
      return self.visitGenericWhereClauseSyntaxImpl(_:)
    case .guardStmt:
      return self.visitGuardStmtSyntaxImpl(_:)
    case .identifierPattern:
      return self.visitIdentifierPatternSyntaxImpl(_:)
    case .identifierType:
      return self.visitIdentifierTypeSyntaxImpl(_:)
    case .ifConfigClauseList:
      return self.visitIfConfigClauseListSyntaxImpl(_:)
    case .ifConfigClause:
      return self.visitIfConfigClauseSyntaxImpl(_:)
    case .ifConfigDecl:
      return self.visitIfConfigDeclSyntaxImpl(_:)
    case .ifExpr:
      return self.visitIfExprSyntaxImpl(_:)
    case .implementsAttributeArguments:
      return self.visitImplementsAttributeArgumentsSyntaxImpl(_:)
    case .implicitlyUnwrappedOptionalType:
      return self.visitImplicitlyUnwrappedOptionalTypeSyntaxImpl(_:)
    case .importDecl:
      return self.visitImportDeclSyntaxImpl(_:)
    case .importPathComponentList:
      return self.visitImportPathComponentListSyntaxImpl(_:)
    case .importPathComponent:
      return self.visitImportPathComponentSyntaxImpl(_:)
    case .inOutExpr:
      return self.visitInOutExprSyntaxImpl(_:)
    case .infixOperatorExpr:
      return self.visitInfixOperatorExprSyntaxImpl(_:)
    case .inheritanceClause:
      return self.visitInheritanceClauseSyntaxImpl(_:)
    case .inheritedTypeList:
      return self.visitInheritedTypeListSyntaxImpl(_:)
    case .inheritedType:
      return self.visitInheritedTypeSyntaxImpl(_:)
    case .initializerClause:
      return self.visitInitializerClauseSyntaxImpl(_:)
    case .initializerDecl:
      return self.visitInitializerDeclSyntaxImpl(_:)
    case .inlineArrayType:
      return self.visitInlineArrayTypeSyntaxImpl(_:)
    case .integerLiteralExpr:
      return self.visitIntegerLiteralExprSyntaxImpl(_:)
    case .isExpr:
      return self.visitIsExprSyntaxImpl(_:)
    case .isTypePattern:
      return self.visitIsTypePatternSyntaxImpl(_:)
    case .keyPathComponentList:
      return self.visitKeyPathComponentListSyntaxImpl(_:)
    case .keyPathComponent:
      return self.visitKeyPathComponentSyntaxImpl(_:)
    case .keyPathExpr:
      return self.visitKeyPathExprSyntaxImpl(_:)
    case .keyPathMethodComponent:
      return self.visitKeyPathMethodComponentSyntaxImpl(_:)
    case .keyPathOptionalComponent:
      return self.visitKeyPathOptionalComponentSyntaxImpl(_:)
    case .keyPathPropertyComponent:
      return self.visitKeyPathPropertyComponentSyntaxImpl(_:)
    case .keyPathSubscriptComponent:
      return self.visitKeyPathSubscriptComponentSyntaxImpl(_:)
    case .labeledExprList:
      return self.visitLabeledExprListSyntaxImpl(_:)
    case .labeledExpr:
      return self.visitLabeledExprSyntaxImpl(_:)
    case .labeledSpecializeArgument:
      return self.visitLabeledSpecializeArgumentSyntaxImpl(_:)
    case .labeledStmt:
      return self.visitLabeledStmtSyntaxImpl(_:)
    case .layoutRequirement:
      return self.visitLayoutRequirementSyntaxImpl(_:)
    case .lifetimeSpecifierArgumentList:
      return self.visitLifetimeSpecifierArgumentListSyntaxImpl(_:)
    case .lifetimeSpecifierArgument:
      return self.visitLifetimeSpecifierArgumentSyntaxImpl(_:)
    case .lifetimeTypeSpecifier:
      return self.visitLifetimeTypeSpecifierSyntaxImpl(_:)
    case .macroDecl:
      return self.visitMacroDeclSyntaxImpl(_:)
    case .macroExpansionDecl:
      return self.visitMacroExpansionDeclSyntaxImpl(_:)
    case .macroExpansionExpr:
      return self.visitMacroExpansionExprSyntaxImpl(_:)
    case .matchingPatternCondition:
      return self.visitMatchingPatternConditionSyntaxImpl(_:)
    case .memberAccessExpr:
      return self.visitMemberAccessExprSyntaxImpl(_:)
    case .memberBlockItemListFile:
      return self.visitMemberBlockItemListFileSyntaxImpl(_:)
    case .memberBlockItemList:
      return self.visitMemberBlockItemListSyntaxImpl(_:)
    case .memberBlockItem:
      return self.visitMemberBlockItemSyntaxImpl(_:)
    case .memberBlock:
      return self.visitMemberBlockSyntaxImpl(_:)
    case .memberType:
      return self.visitMemberTypeSyntaxImpl(_:)
    case .metatypeType:
      return self.visitMetatypeTypeSyntaxImpl(_:)
    case .missingDecl:
      return self.visitMissingDeclSyntaxImpl(_:)
    case .missingExpr:
      return self.visitMissingExprSyntaxImpl(_:)
    case .missingPattern:
      return self.visitMissingPatternSyntaxImpl(_:)
    case .missingStmt:
      return self.visitMissingStmtSyntaxImpl(_:)
    case .missing:
      return self.visitMissingSyntaxImpl(_:)
    case .missingType:
      return self.visitMissingTypeSyntaxImpl(_:)
    case .multipleTrailingClosureElementList:
      return self.visitMultipleTrailingClosureElementListSyntaxImpl(_:)
    case .multipleTrailingClosureElement:
      return self.visitMultipleTrailingClosureElementSyntaxImpl(_:)
    case .namedOpaqueReturnType:
      return self.visitNamedOpaqueReturnTypeSyntaxImpl(_:)
    case .nilLiteralExpr:
      return self.visitNilLiteralExprSyntaxImpl(_:)
    case .nonisolatedSpecifierArgument:
      return self.visitNonisolatedSpecifierArgumentSyntaxImpl(_:)
    case .nonisolatedTypeSpecifier:
      return self.visitNonisolatedTypeSpecifierSyntaxImpl(_:)
    case .objCSelectorPieceList:
      return self.visitObjCSelectorPieceListSyntaxImpl(_:)
    case .objCSelectorPiece:
      return self.visitObjCSelectorPieceSyntaxImpl(_:)
    case .operatorDecl:
      return self.visitOperatorDeclSyntaxImpl(_:)
    case .operatorPrecedenceAndTypes:
      return self.visitOperatorPrecedenceAndTypesSyntaxImpl(_:)
    case .optionalBindingCondition:
      return self.visitOptionalBindingConditionSyntaxImpl(_:)
    case .optionalChainingExpr:
      return self.visitOptionalChainingExprSyntaxImpl(_:)
    case .optionalType:
      return self.visitOptionalTypeSyntaxImpl(_:)
    case .originallyDefinedInAttributeArguments:
      return self.visitOriginallyDefinedInAttributeArgumentsSyntaxImpl(_:)
    case .packElementExpr:
      return self.visitPackElementExprSyntaxImpl(_:)
    case .packElementType:
      return self.visitPackElementTypeSyntaxImpl(_:)
    case .packExpansionExpr:
      return self.visitPackExpansionExprSyntaxImpl(_:)
    case .packExpansionType:
      return self.visitPackExpansionTypeSyntaxImpl(_:)
    case .patternBindingList:
      return self.visitPatternBindingListSyntaxImpl(_:)
    case .patternBinding:
      return self.visitPatternBindingSyntaxImpl(_:)
    case .patternExpr:
      return self.visitPatternExprSyntaxImpl(_:)
    case .platformVersionItemList:
      return self.visitPlatformVersionItemListSyntaxImpl(_:)
    case .platformVersionItem:
      return self.visitPlatformVersionItemSyntaxImpl(_:)
    case .platformVersion:
      return self.visitPlatformVersionSyntaxImpl(_:)
    case .postfixIfConfigExpr:
      return self.visitPostfixIfConfigExprSyntaxImpl(_:)
    case .postfixOperatorExpr:
      return self.visitPostfixOperatorExprSyntaxImpl(_:)
    case .poundSourceLocationArguments:
      return self.visitPoundSourceLocationArgumentsSyntaxImpl(_:)
    case .poundSourceLocation:
      return self.visitPoundSourceLocationSyntaxImpl(_:)
    case .precedenceGroupAssignment:
      return self.visitPrecedenceGroupAssignmentSyntaxImpl(_:)
    case .precedenceGroupAssociativity:
      return self.visitPrecedenceGroupAssociativitySyntaxImpl(_:)
    case .precedenceGroupAttributeList:
      return self.visitPrecedenceGroupAttributeListSyntaxImpl(_:)
    case .precedenceGroupDecl:
      return self.visitPrecedenceGroupDeclSyntaxImpl(_:)
    case .precedenceGroupNameList:
      return self.visitPrecedenceGroupNameListSyntaxImpl(_:)
    case .precedenceGroupName:
      return self.visitPrecedenceGroupNameSyntaxImpl(_:)
    case .precedenceGroupRelation:
      return self.visitPrecedenceGroupRelationSyntaxImpl(_:)
    case .prefixOperatorExpr:
      return self.visitPrefixOperatorExprSyntaxImpl(_:)
    case .primaryAssociatedTypeClause:
      return self.visitPrimaryAssociatedTypeClauseSyntaxImpl(_:)
    case .primaryAssociatedTypeList:
      return self.visitPrimaryAssociatedTypeListSyntaxImpl(_:)
    case .primaryAssociatedType:
      return self.visitPrimaryAssociatedTypeSyntaxImpl(_:)
    case .protocolDecl:
      return self.visitProtocolDeclSyntaxImpl(_:)
    case .regexLiteralExpr:
      return self.visitRegexLiteralExprSyntaxImpl(_:)
    case .repeatStmt:
      return self.visitRepeatStmtSyntaxImpl(_:)
    case .returnClause:
      return self.visitReturnClauseSyntaxImpl(_:)
    case .returnStmt:
      return self.visitReturnStmtSyntaxImpl(_:)
    case .sameTypeRequirement:
      return self.visitSameTypeRequirementSyntaxImpl(_:)
    case .sequenceExpr:
      return self.visitSequenceExprSyntaxImpl(_:)
    case .simpleStringLiteralExpr:
      return self.visitSimpleStringLiteralExprSyntaxImpl(_:)
    case .simpleStringLiteralSegmentList:
      return self.visitSimpleStringLiteralSegmentListSyntaxImpl(_:)
    case .simpleTypeSpecifier:
      return self.visitSimpleTypeSpecifierSyntaxImpl(_:)
    case .someOrAnyType:
      return self.visitSomeOrAnyTypeSyntaxImpl(_:)
    case .sourceFile:
      return self.visitSourceFileSyntaxImpl(_:)
    case .specializeAttributeArgumentList:
      return self.visitSpecializeAttributeArgumentListSyntaxImpl(_:)
    case .specializeAvailabilityArgument:
      return self.visitSpecializeAvailabilityArgumentSyntaxImpl(_:)
    case .specializeTargetFunctionArgument:
      return self.visitSpecializeTargetFunctionArgumentSyntaxImpl(_:)
    case .specializedAttributeArgument:
      return self.visitSpecializedAttributeArgumentSyntaxImpl(_:)
    case .stringLiteralExpr:
      return self.visitStringLiteralExprSyntaxImpl(_:)
    case .stringLiteralSegmentList:
      return self.visitStringLiteralSegmentListSyntaxImpl(_:)
    case .stringSegment:
      return self.visitStringSegmentSyntaxImpl(_:)
    case .structDecl:
      return self.visitStructDeclSyntaxImpl(_:)
    case .subscriptCallExpr:
      return self.visitSubscriptCallExprSyntaxImpl(_:)
    case .subscriptDecl:
      return self.visitSubscriptDeclSyntaxImpl(_:)
    case .superExpr:
      return self.visitSuperExprSyntaxImpl(_:)
    case .suppressedType:
      return self.visitSuppressedTypeSyntaxImpl(_:)
    case .switchCaseItemList:
      return self.visitSwitchCaseItemListSyntaxImpl(_:)
    case .switchCaseItem:
      return self.visitSwitchCaseItemSyntaxImpl(_:)
    case .switchCaseLabel:
      return self.visitSwitchCaseLabelSyntaxImpl(_:)
    case .switchCaseList:
      return self.visitSwitchCaseListSyntaxImpl(_:)
    case .switchCase:
      return self.visitSwitchCaseSyntaxImpl(_:)
    case .switchDefaultLabel:
      return self.visitSwitchDefaultLabelSyntaxImpl(_:)
    case .switchExpr:
      return self.visitSwitchExprSyntaxImpl(_:)
    case .ternaryExpr:
      return self.visitTernaryExprSyntaxImpl(_:)
    case .thenStmt:
      return self.visitThenStmtSyntaxImpl(_:)
    case .throwStmt:
      return self.visitThrowStmtSyntaxImpl(_:)
    case .throwsClause:
      return self.visitThrowsClauseSyntaxImpl(_:)
    case .tryExpr:
      return self.visitTryExprSyntaxImpl(_:)
    case .tupleExpr:
      return self.visitTupleExprSyntaxImpl(_:)
    case .tuplePatternElementList:
      return self.visitTuplePatternElementListSyntaxImpl(_:)
    case .tuplePatternElement:
      return self.visitTuplePatternElementSyntaxImpl(_:)
    case .tuplePattern:
      return self.visitTuplePatternSyntaxImpl(_:)
    case .tupleTypeElementList:
      return self.visitTupleTypeElementListSyntaxImpl(_:)
    case .tupleTypeElement:
      return self.visitTupleTypeElementSyntaxImpl(_:)
    case .tupleType:
      return self.visitTupleTypeSyntaxImpl(_:)
    case .typeAliasDecl:
      return self.visitTypeAliasDeclSyntaxImpl(_:)
    case .typeAnnotation:
      return self.visitTypeAnnotationSyntaxImpl(_:)
    case .typeEffectSpecifiers:
      return self.visitTypeEffectSpecifiersSyntaxImpl(_:)
    case .typeExpr:
      return self.visitTypeExprSyntaxImpl(_:)
    case .typeInitializerClause:
      return self.visitTypeInitializerClauseSyntaxImpl(_:)
    case .typeSpecifierList:
      return self.visitTypeSpecifierListSyntaxImpl(_:)
    case .unexpectedNodes:
      return self.visitUnexpectedNodesSyntaxImpl(_:)
    case .unresolvedAsExpr:
      return self.visitUnresolvedAsExprSyntaxImpl(_:)
    case .unresolvedIsExpr:
      return self.visitUnresolvedIsExprSyntaxImpl(_:)
    case .unresolvedTernaryExpr:
      return self.visitUnresolvedTernaryExprSyntaxImpl(_:)
    case .unsafeExpr:
      return self.visitUnsafeExprSyntaxImpl(_:)
    case .usingDecl:
      return self.visitUsingDeclSyntaxImpl(_:)
    case .valueBindingPattern:
      return self.visitValueBindingPatternSyntaxImpl(_:)
    case .variableDecl:
      return self.visitVariableDeclSyntaxImpl(_:)
    case .versionComponentList:
      return self.visitVersionComponentListSyntaxImpl(_:)
    case .versionComponent:
      return self.visitVersionComponentSyntaxImpl(_:)
    case .versionTuple:
      return self.visitVersionTupleSyntaxImpl(_:)
    case .whereClause:
      return self.visitWhereClauseSyntaxImpl(_:)
    case .whileStmt:
      return self.visitWhileStmtSyntaxImpl(_:)
    case .wildcardPattern:
      return self.visitWildcardPatternSyntaxImpl(_:)
    case .yieldStmt:
      return self.visitYieldStmtSyntaxImpl(_:)
    case .yieldedExpressionList:
      return self.visitYieldedExpressionListSyntaxImpl(_:)
    case .yieldedExpression:
      return self.visitYieldedExpressionSyntaxImpl(_:)
    case .yieldedExpressionsClause:
      return self.visitYieldedExpressionsClauseSyntaxImpl(_:)
    }
  }
  private func dispatchVisit(_ node: Syntax) throws (E) {
    return try visitationFunc(for: node)(node)
  }
  #else
  private func dispatchVisit(_ node: Syntax) throws (E) {
    switch node.raw.kind {
    case .token:
      try self.visitTokenSyntaxImpl(node)
    case .abiAttributeArguments:
      try self.visitABIAttributeArgumentsSyntaxImpl(node)
    case .accessorBlockFile:
      try self.visitAccessorBlockFileSyntaxImpl(node)
    case .accessorBlock:
      try self.visitAccessorBlockSyntaxImpl(node)
    case .accessorDeclList:
      try self.visitAccessorDeclListSyntaxImpl(node)
    case .accessorDecl:
      try self.visitAccessorDeclSyntaxImpl(node)
    case .accessorEffectSpecifiers:
      try self.visitAccessorEffectSpecifiersSyntaxImpl(node)
    case .accessorParameters:
      try self.visitAccessorParametersSyntaxImpl(node)
    case .actorDecl:
      try self.visitActorDeclSyntaxImpl(node)
    case .arrayElementList:
      try self.visitArrayElementListSyntaxImpl(node)
    case .arrayElement:
      try self.visitArrayElementSyntaxImpl(node)
    case .arrayExpr:
      try self.visitArrayExprSyntaxImpl(node)
    case .arrayType:
      try self.visitArrayTypeSyntaxImpl(node)
    case .arrowExpr:
      try self.visitArrowExprSyntaxImpl(node)
    case .asExpr:
      try self.visitAsExprSyntaxImpl(node)
    case .assignmentExpr:
      try self.visitAssignmentExprSyntaxImpl(node)
    case .associatedTypeDecl:
      try self.visitAssociatedTypeDeclSyntaxImpl(node)
    case .attributeClauseFile:
      try self.visitAttributeClauseFileSyntaxImpl(node)
    case .attributeList:
      try self.visitAttributeListSyntaxImpl(node)
    case .attribute:
      try self.visitAttributeSyntaxImpl(node)
    case .attributedType:
      try self.visitAttributedTypeSyntaxImpl(node)
    case .availabilityArgumentList:
      try self.visitAvailabilityArgumentListSyntaxImpl(node)
    case .availabilityArgument:
      try self.visitAvailabilityArgumentSyntaxImpl(node)
    case .availabilityCondition:
      try self.visitAvailabilityConditionSyntaxImpl(node)
    case .availabilityLabeledArgument:
      try self.visitAvailabilityLabeledArgumentSyntaxImpl(node)
    case .availabilityMacroDefinitionFile:
      try self.visitAvailabilityMacroDefinitionFileSyntaxImpl(node)
    case .awaitExpr:
      try self.visitAwaitExprSyntaxImpl(node)
    case .backDeployedAttributeArguments:
      try self.visitBackDeployedAttributeArgumentsSyntaxImpl(node)
    case .binaryOperatorExpr:
      try self.visitBinaryOperatorExprSyntaxImpl(node)
    case .booleanLiteralExpr:
      try self.visitBooleanLiteralExprSyntaxImpl(node)
    case .borrowExpr:
      try self.visitBorrowExprSyntaxImpl(node)
    case .breakStmt:
      try self.visitBreakStmtSyntaxImpl(node)
    case ._canImportExpr:
      try self.visit_CanImportExprSyntaxImpl(node)
    case ._canImportVersionInfo:
      try self.visit_CanImportVersionInfoSyntaxImpl(node)
    case .catchClauseList:
      try self.visitCatchClauseListSyntaxImpl(node)
    case .catchClause:
      try self.visitCatchClauseSyntaxImpl(node)
    case .catchItemList:
      try self.visitCatchItemListSyntaxImpl(node)
    case .catchItem:
      try self.visitCatchItemSyntaxImpl(node)
    case .classDecl:
      try self.visitClassDeclSyntaxImpl(node)
    case .classRestrictionType:
      try self.visitClassRestrictionTypeSyntaxImpl(node)
    case .closureCaptureClause:
      try self.visitClosureCaptureClauseSyntaxImpl(node)
    case .closureCaptureList:
      try self.visitClosureCaptureListSyntaxImpl(node)
    case .closureCaptureSpecifier:
      try self.visitClosureCaptureSpecifierSyntaxImpl(node)
    case .closureCapture:
      try self.visitClosureCaptureSyntaxImpl(node)
    case .closureExpr:
      try self.visitClosureExprSyntaxImpl(node)
    case .closureParameterClause:
      try self.visitClosureParameterClauseSyntaxImpl(node)
    case .closureParameterList:
      try self.visitClosureParameterListSyntaxImpl(node)
    case .closureParameter:
      try self.visitClosureParameterSyntaxImpl(node)
    case .closureShorthandParameterList:
      try self.visitClosureShorthandParameterListSyntaxImpl(node)
    case .closureShorthandParameter:
      try self.visitClosureShorthandParameterSyntaxImpl(node)
    case .closureSignature:
      try self.visitClosureSignatureSyntaxImpl(node)
    case .codeBlockFile:
      try self.visitCodeBlockFileSyntaxImpl(node)
    case .codeBlockItemList:
      try self.visitCodeBlockItemListSyntaxImpl(node)
    case .codeBlockItem:
      try self.visitCodeBlockItemSyntaxImpl(node)
    case .codeBlock:
      try self.visitCodeBlockSyntaxImpl(node)
    case .compositionTypeElementList:
      try self.visitCompositionTypeElementListSyntaxImpl(node)
    case .compositionTypeElement:
      try self.visitCompositionTypeElementSyntaxImpl(node)
    case .compositionType:
      try self.visitCompositionTypeSyntaxImpl(node)
    case .conditionElementList:
      try self.visitConditionElementListSyntaxImpl(node)
    case .conditionElement:
      try self.visitConditionElementSyntaxImpl(node)
    case .conformanceRequirement:
      try self.visitConformanceRequirementSyntaxImpl(node)
    case .consumeExpr:
      try self.visitConsumeExprSyntaxImpl(node)
    case .continueStmt:
      try self.visitContinueStmtSyntaxImpl(node)
    case .copyExpr:
      try self.visitCopyExprSyntaxImpl(node)
    case .declModifierDetail:
      try self.visitDeclModifierDetailSyntaxImpl(node)
    case .declModifierList:
      try self.visitDeclModifierListSyntaxImpl(node)
    case .declModifier:
      try self.visitDeclModifierSyntaxImpl(node)
    case .declNameArgumentList:
      try self.visitDeclNameArgumentListSyntaxImpl(node)
    case .declNameArgument:
      try self.visitDeclNameArgumentSyntaxImpl(node)
    case .declNameArguments:
      try self.visitDeclNameArgumentsSyntaxImpl(node)
    case .declReferenceExpr:
      try self.visitDeclReferenceExprSyntaxImpl(node)
    case .deferStmt:
      try self.visitDeferStmtSyntaxImpl(node)
    case .deinitializerDecl:
      try self.visitDeinitializerDeclSyntaxImpl(node)
    case .deinitializerEffectSpecifiers:
      try self.visitDeinitializerEffectSpecifiersSyntaxImpl(node)
    case .derivativeAttributeArguments:
      try self.visitDerivativeAttributeArgumentsSyntaxImpl(node)
    case .designatedTypeList:
      try self.visitDesignatedTypeListSyntaxImpl(node)
    case .designatedType:
      try self.visitDesignatedTypeSyntaxImpl(node)
    case .dictionaryElementList:
      try self.visitDictionaryElementListSyntaxImpl(node)
    case .dictionaryElement:
      try self.visitDictionaryElementSyntaxImpl(node)
    case .dictionaryExpr:
      try self.visitDictionaryExprSyntaxImpl(node)
    case .dictionaryType:
      try self.visitDictionaryTypeSyntaxImpl(node)
    case .differentiabilityArgumentList:
      try self.visitDifferentiabilityArgumentListSyntaxImpl(node)
    case .differentiabilityArgument:
      try self.visitDifferentiabilityArgumentSyntaxImpl(node)
    case .differentiabilityArguments:
      try self.visitDifferentiabilityArgumentsSyntaxImpl(node)
    case .differentiabilityWithRespectToArgument:
      try self.visitDifferentiabilityWithRespectToArgumentSyntaxImpl(node)
    case .differentiableAttributeArguments:
      try self.visitDifferentiableAttributeArgumentsSyntaxImpl(node)
    case .discardAssignmentExpr:
      try self.visitDiscardAssignmentExprSyntaxImpl(node)
    case .discardStmt:
      try self.visitDiscardStmtSyntaxImpl(node)
    case .doExpr:
      try self.visitDoExprSyntaxImpl(node)
    case .doStmt:
      try self.visitDoStmtSyntaxImpl(node)
    case .documentationAttributeArgumentList:
      try self.visitDocumentationAttributeArgumentListSyntaxImpl(node)
    case .documentationAttributeArgument:
      try self.visitDocumentationAttributeArgumentSyntaxImpl(node)
    case .dynamicReplacementAttributeArguments:
      try self.visitDynamicReplacementAttributeArgumentsSyntaxImpl(node)
    case .editorPlaceholderDecl:
      try self.visitEditorPlaceholderDeclSyntaxImpl(node)
    case .editorPlaceholderExpr:
      try self.visitEditorPlaceholderExprSyntaxImpl(node)
    case .effectsAttributeArgumentList:
      try self.visitEffectsAttributeArgumentListSyntaxImpl(node)
    case .enumCaseDecl:
      try self.visitEnumCaseDeclSyntaxImpl(node)
    case .enumCaseElementList:
      try self.visitEnumCaseElementListSyntaxImpl(node)
    case .enumCaseElement:
      try self.visitEnumCaseElementSyntaxImpl(node)
    case .enumCaseParameterClause:
      try self.visitEnumCaseParameterClauseSyntaxImpl(node)
    case .enumCaseParameterList:
      try self.visitEnumCaseParameterListSyntaxImpl(node)
    case .enumCaseParameter:
      try self.visitEnumCaseParameterSyntaxImpl(node)
    case .enumDecl:
      try self.visitEnumDeclSyntaxImpl(node)
    case .exprList:
      try self.visitExprListSyntaxImpl(node)
    case .expressionPattern:
      try self.visitExpressionPatternSyntaxImpl(node)
    case .expressionSegment:
      try self.visitExpressionSegmentSyntaxImpl(node)
    case .expressionStmt:
      try self.visitExpressionStmtSyntaxImpl(node)
    case .extensionDecl:
      try self.visitExtensionDeclSyntaxImpl(node)
    case .fallThroughStmt:
      try self.visitFallThroughStmtSyntaxImpl(node)
    case .floatLiteralExpr:
      try self.visitFloatLiteralExprSyntaxImpl(node)
    case .forStmt:
      try self.visitForStmtSyntaxImpl(node)
    case .forceUnwrapExpr:
      try self.visitForceUnwrapExprSyntaxImpl(node)
    case .functionCallExpr:
      try self.visitFunctionCallExprSyntaxImpl(node)
    case .functionDecl:
      try self.visitFunctionDeclSyntaxImpl(node)
    case .functionEffectSpecifiers:
      try self.visitFunctionEffectSpecifiersSyntaxImpl(node)
    case .functionParameterClause:
      try self.visitFunctionParameterClauseSyntaxImpl(node)
    case .functionParameterList:
      try self.visitFunctionParameterListSyntaxImpl(node)
    case .functionParameter:
      try self.visitFunctionParameterSyntaxImpl(node)
    case .functionSignature:
      try self.visitFunctionSignatureSyntaxImpl(node)
    case .functionType:
      try self.visitFunctionTypeSyntaxImpl(node)
    case .genericArgumentClause:
      try self.visitGenericArgumentClauseSyntaxImpl(node)
    case .genericArgumentList:
      try self.visitGenericArgumentListSyntaxImpl(node)
    case .genericArgument:
      try self.visitGenericArgumentSyntaxImpl(node)
    case .genericParameterClause:
      try self.visitGenericParameterClauseSyntaxImpl(node)
    case .genericParameterList:
      try self.visitGenericParameterListSyntaxImpl(node)
    case .genericParameter:
      try self.visitGenericParameterSyntaxImpl(node)
    case .genericRequirementList:
      try self.visitGenericRequirementListSyntaxImpl(node)
    case .genericRequirement:
      try self.visitGenericRequirementSyntaxImpl(node)
    case .genericSpecializationExpr:
      try self.visitGenericSpecializationExprSyntaxImpl(node)
    case .genericWhereClause:
      try self.visitGenericWhereClauseSyntaxImpl(node)
    case .guardStmt:
      try self.visitGuardStmtSyntaxImpl(node)
    case .identifierPattern:
      try self.visitIdentifierPatternSyntaxImpl(node)
    case .identifierType:
      try self.visitIdentifierTypeSyntaxImpl(node)
    case .ifConfigClauseList:
      try self.visitIfConfigClauseListSyntaxImpl(node)
    case .ifConfigClause:
      try self.visitIfConfigClauseSyntaxImpl(node)
    case .ifConfigDecl:
      try self.visitIfConfigDeclSyntaxImpl(node)
    case .ifExpr:
      try self.visitIfExprSyntaxImpl(node)
    case .implementsAttributeArguments:
      try self.visitImplementsAttributeArgumentsSyntaxImpl(node)
    case .implicitlyUnwrappedOptionalType:
      try self.visitImplicitlyUnwrappedOptionalTypeSyntaxImpl(node)
    case .importDecl:
      try self.visitImportDeclSyntaxImpl(node)
    case .importPathComponentList:
      try self.visitImportPathComponentListSyntaxImpl(node)
    case .importPathComponent:
      try self.visitImportPathComponentSyntaxImpl(node)
    case .inOutExpr:
      try self.visitInOutExprSyntaxImpl(node)
    case .infixOperatorExpr:
      try self.visitInfixOperatorExprSyntaxImpl(node)
    case .inheritanceClause:
      try self.visitInheritanceClauseSyntaxImpl(node)
    case .inheritedTypeList:
      try self.visitInheritedTypeListSyntaxImpl(node)
    case .inheritedType:
      try self.visitInheritedTypeSyntaxImpl(node)
    case .initializerClause:
      try self.visitInitializerClauseSyntaxImpl(node)
    case .initializerDecl:
      try self.visitInitializerDeclSyntaxImpl(node)
    case .inlineArrayType:
      try self.visitInlineArrayTypeSyntaxImpl(node)
    case .integerLiteralExpr:
      try self.visitIntegerLiteralExprSyntaxImpl(node)
    case .isExpr:
      try self.visitIsExprSyntaxImpl(node)
    case .isTypePattern:
      try self.visitIsTypePatternSyntaxImpl(node)
    case .keyPathComponentList:
      try self.visitKeyPathComponentListSyntaxImpl(node)
    case .keyPathComponent:
      try self.visitKeyPathComponentSyntaxImpl(node)
    case .keyPathExpr:
      try self.visitKeyPathExprSyntaxImpl(node)
    case .keyPathMethodComponent:
      try self.visitKeyPathMethodComponentSyntaxImpl(node)
    case .keyPathOptionalComponent:
      try self.visitKeyPathOptionalComponentSyntaxImpl(node)
    case .keyPathPropertyComponent:
      try self.visitKeyPathPropertyComponentSyntaxImpl(node)
    case .keyPathSubscriptComponent:
      try self.visitKeyPathSubscriptComponentSyntaxImpl(node)
    case .labeledExprList:
      try self.visitLabeledExprListSyntaxImpl(node)
    case .labeledExpr:
      try self.visitLabeledExprSyntaxImpl(node)
    case .labeledSpecializeArgument:
      try self.visitLabeledSpecializeArgumentSyntaxImpl(node)
    case .labeledStmt:
      try self.visitLabeledStmtSyntaxImpl(node)
    case .layoutRequirement:
      try self.visitLayoutRequirementSyntaxImpl(node)
    case .lifetimeSpecifierArgumentList:
      try self.visitLifetimeSpecifierArgumentListSyntaxImpl(node)
    case .lifetimeSpecifierArgument:
      try self.visitLifetimeSpecifierArgumentSyntaxImpl(node)
    case .lifetimeTypeSpecifier:
      try self.visitLifetimeTypeSpecifierSyntaxImpl(node)
    case .macroDecl:
      try self.visitMacroDeclSyntaxImpl(node)
    case .macroExpansionDecl:
      try self.visitMacroExpansionDeclSyntaxImpl(node)
    case .macroExpansionExpr:
      try self.visitMacroExpansionExprSyntaxImpl(node)
    case .matchingPatternCondition:
      try self.visitMatchingPatternConditionSyntaxImpl(node)
    case .memberAccessExpr:
      try self.visitMemberAccessExprSyntaxImpl(node)
    case .memberBlockItemListFile:
      try self.visitMemberBlockItemListFileSyntaxImpl(node)
    case .memberBlockItemList:
      try self.visitMemberBlockItemListSyntaxImpl(node)
    case .memberBlockItem:
      try self.visitMemberBlockItemSyntaxImpl(node)
    case .memberBlock:
      try self.visitMemberBlockSyntaxImpl(node)
    case .memberType:
      try self.visitMemberTypeSyntaxImpl(node)
    case .metatypeType:
      try self.visitMetatypeTypeSyntaxImpl(node)
    case .missingDecl:
      try self.visitMissingDeclSyntaxImpl(node)
    case .missingExpr:
      try self.visitMissingExprSyntaxImpl(node)
    case .missingPattern:
      try self.visitMissingPatternSyntaxImpl(node)
    case .missingStmt:
      try self.visitMissingStmtSyntaxImpl(node)
    case .missing:
      try self.visitMissingSyntaxImpl(node)
    case .missingType:
      try self.visitMissingTypeSyntaxImpl(node)
    case .multipleTrailingClosureElementList:
      try self.visitMultipleTrailingClosureElementListSyntaxImpl(node)
    case .multipleTrailingClosureElement:
      try self.visitMultipleTrailingClosureElementSyntaxImpl(node)
    case .namedOpaqueReturnType:
      try self.visitNamedOpaqueReturnTypeSyntaxImpl(node)
    case .nilLiteralExpr:
      try self.visitNilLiteralExprSyntaxImpl(node)
    case .nonisolatedSpecifierArgument:
      try self.visitNonisolatedSpecifierArgumentSyntaxImpl(node)
    case .nonisolatedTypeSpecifier:
      try self.visitNonisolatedTypeSpecifierSyntaxImpl(node)
    case .objCSelectorPieceList:
      try self.visitObjCSelectorPieceListSyntaxImpl(node)
    case .objCSelectorPiece:
      try self.visitObjCSelectorPieceSyntaxImpl(node)
    case .operatorDecl:
      try self.visitOperatorDeclSyntaxImpl(node)
    case .operatorPrecedenceAndTypes:
      try self.visitOperatorPrecedenceAndTypesSyntaxImpl(node)
    case .optionalBindingCondition:
      try self.visitOptionalBindingConditionSyntaxImpl(node)
    case .optionalChainingExpr:
      try self.visitOptionalChainingExprSyntaxImpl(node)
    case .optionalType:
      try self.visitOptionalTypeSyntaxImpl(node)
    case .originallyDefinedInAttributeArguments:
      try self.visitOriginallyDefinedInAttributeArgumentsSyntaxImpl(node)
    case .packElementExpr:
      try self.visitPackElementExprSyntaxImpl(node)
    case .packElementType:
      try self.visitPackElementTypeSyntaxImpl(node)
    case .packExpansionExpr:
      try self.visitPackExpansionExprSyntaxImpl(node)
    case .packExpansionType:
      try self.visitPackExpansionTypeSyntaxImpl(node)
    case .patternBindingList:
      try self.visitPatternBindingListSyntaxImpl(node)
    case .patternBinding:
      try self.visitPatternBindingSyntaxImpl(node)
    case .patternExpr:
      try self.visitPatternExprSyntaxImpl(node)
    case .platformVersionItemList:
      try self.visitPlatformVersionItemListSyntaxImpl(node)
    case .platformVersionItem:
      try self.visitPlatformVersionItemSyntaxImpl(node)
    case .platformVersion:
      try self.visitPlatformVersionSyntaxImpl(node)
    case .postfixIfConfigExpr:
      try self.visitPostfixIfConfigExprSyntaxImpl(node)
    case .postfixOperatorExpr:
      try self.visitPostfixOperatorExprSyntaxImpl(node)
    case .poundSourceLocationArguments:
      try self.visitPoundSourceLocationArgumentsSyntaxImpl(node)
    case .poundSourceLocation:
      try self.visitPoundSourceLocationSyntaxImpl(node)
    case .precedenceGroupAssignment:
      try self.visitPrecedenceGroupAssignmentSyntaxImpl(node)
    case .precedenceGroupAssociativity:
      try self.visitPrecedenceGroupAssociativitySyntaxImpl(node)
    case .precedenceGroupAttributeList:
      try self.visitPrecedenceGroupAttributeListSyntaxImpl(node)
    case .precedenceGroupDecl:
      try self.visitPrecedenceGroupDeclSyntaxImpl(node)
    case .precedenceGroupNameList:
      try self.visitPrecedenceGroupNameListSyntaxImpl(node)
    case .precedenceGroupName:
      try self.visitPrecedenceGroupNameSyntaxImpl(node)
    case .precedenceGroupRelation:
      try self.visitPrecedenceGroupRelationSyntaxImpl(node)
    case .prefixOperatorExpr:
      try self.visitPrefixOperatorExprSyntaxImpl(node)
    case .primaryAssociatedTypeClause:
      try self.visitPrimaryAssociatedTypeClauseSyntaxImpl(node)
    case .primaryAssociatedTypeList:
      try self.visitPrimaryAssociatedTypeListSyntaxImpl(node)
    case .primaryAssociatedType:
      try self.visitPrimaryAssociatedTypeSyntaxImpl(node)
    case .protocolDecl:
      try self.visitProtocolDeclSyntaxImpl(node)
    case .regexLiteralExpr:
      try self.visitRegexLiteralExprSyntaxImpl(node)
    case .repeatStmt:
      try self.visitRepeatStmtSyntaxImpl(node)
    case .returnClause:
      try self.visitReturnClauseSyntaxImpl(node)
    case .returnStmt:
      try self.visitReturnStmtSyntaxImpl(node)
    case .sameTypeRequirement:
      try self.visitSameTypeRequirementSyntaxImpl(node)
    case .sequenceExpr:
      try self.visitSequenceExprSyntaxImpl(node)
    case .simpleStringLiteralExpr:
      try self.visitSimpleStringLiteralExprSyntaxImpl(node)
    case .simpleStringLiteralSegmentList:
      try self.visitSimpleStringLiteralSegmentListSyntaxImpl(node)
    case .simpleTypeSpecifier:
      try self.visitSimpleTypeSpecifierSyntaxImpl(node)
    case .someOrAnyType:
      try self.visitSomeOrAnyTypeSyntaxImpl(node)
    case .sourceFile:
      try self.visitSourceFileSyntaxImpl(node)
    case .specializeAttributeArgumentList:
      try self.visitSpecializeAttributeArgumentListSyntaxImpl(node)
    case .specializeAvailabilityArgument:
      try self.visitSpecializeAvailabilityArgumentSyntaxImpl(node)
    case .specializeTargetFunctionArgument:
      try self.visitSpecializeTargetFunctionArgumentSyntaxImpl(node)
    case .specializedAttributeArgument:
      try self.visitSpecializedAttributeArgumentSyntaxImpl(node)
    case .stringLiteralExpr:
      try self.visitStringLiteralExprSyntaxImpl(node)
    case .stringLiteralSegmentList:
      try self.visitStringLiteralSegmentListSyntaxImpl(node)
    case .stringSegment:
      try self.visitStringSegmentSyntaxImpl(node)
    case .structDecl:
      try self.visitStructDeclSyntaxImpl(node)
    case .subscriptCallExpr:
      try self.visitSubscriptCallExprSyntaxImpl(node)
    case .subscriptDecl:
      try self.visitSubscriptDeclSyntaxImpl(node)
    case .superExpr:
      try self.visitSuperExprSyntaxImpl(node)
    case .suppressedType:
      try self.visitSuppressedTypeSyntaxImpl(node)
    case .switchCaseItemList:
      try self.visitSwitchCaseItemListSyntaxImpl(node)
    case .switchCaseItem:
      try self.visitSwitchCaseItemSyntaxImpl(node)
    case .switchCaseLabel:
      try self.visitSwitchCaseLabelSyntaxImpl(node)
    case .switchCaseList:
      try self.visitSwitchCaseListSyntaxImpl(node)
    case .switchCase:
      try self.visitSwitchCaseSyntaxImpl(node)
    case .switchDefaultLabel:
      try self.visitSwitchDefaultLabelSyntaxImpl(node)
    case .switchExpr:
      try self.visitSwitchExprSyntaxImpl(node)
    case .ternaryExpr:
      try self.visitTernaryExprSyntaxImpl(node)
    case .thenStmt:
      try self.visitThenStmtSyntaxImpl(node)
    case .throwStmt:
      try self.visitThrowStmtSyntaxImpl(node)
    case .throwsClause:
      try self.visitThrowsClauseSyntaxImpl(node)
    case .tryExpr:
      try self.visitTryExprSyntaxImpl(node)
    case .tupleExpr:
      try self.visitTupleExprSyntaxImpl(node)
    case .tuplePatternElementList:
      try self.visitTuplePatternElementListSyntaxImpl(node)
    case .tuplePatternElement:
      try self.visitTuplePatternElementSyntaxImpl(node)
    case .tuplePattern:
      try self.visitTuplePatternSyntaxImpl(node)
    case .tupleTypeElementList:
      try self.visitTupleTypeElementListSyntaxImpl(node)
    case .tupleTypeElement:
      try self.visitTupleTypeElementSyntaxImpl(node)
    case .tupleType:
      try self.visitTupleTypeSyntaxImpl(node)
    case .typeAliasDecl:
      try self.visitTypeAliasDeclSyntaxImpl(node)
    case .typeAnnotation:
      try self.visitTypeAnnotationSyntaxImpl(node)
    case .typeEffectSpecifiers:
      try self.visitTypeEffectSpecifiersSyntaxImpl(node)
    case .typeExpr:
      try self.visitTypeExprSyntaxImpl(node)
    case .typeInitializerClause:
      try self.visitTypeInitializerClauseSyntaxImpl(node)
    case .typeSpecifierList:
      try self.visitTypeSpecifierListSyntaxImpl(node)
    case .unexpectedNodes:
      try self.visitUnexpectedNodesSyntaxImpl(node)
    case .unresolvedAsExpr:
      try self.visitUnresolvedAsExprSyntaxImpl(node)
    case .unresolvedIsExpr:
      try self.visitUnresolvedIsExprSyntaxImpl(node)
    case .unresolvedTernaryExpr:
      try self.visitUnresolvedTernaryExprSyntaxImpl(node)
    case .unsafeExpr:
      try self.visitUnsafeExprSyntaxImpl(node)
    case .usingDecl:
      try self.visitUsingDeclSyntaxImpl(node)
    case .valueBindingPattern:
      try self.visitValueBindingPatternSyntaxImpl(node)
    case .variableDecl:
      try self.visitVariableDeclSyntaxImpl(node)
    case .versionComponentList:
      try self.visitVersionComponentListSyntaxImpl(node)
    case .versionComponent:
      try self.visitVersionComponentSyntaxImpl(node)
    case .versionTuple:
      try self.visitVersionTupleSyntaxImpl(node)
    case .whereClause:
      try self.visitWhereClauseSyntaxImpl(node)
    case .whileStmt:
      try self.visitWhileStmtSyntaxImpl(node)
    case .wildcardPattern:
      try self.visitWildcardPatternSyntaxImpl(node)
    case .yieldStmt:
      try self.visitYieldStmtSyntaxImpl(node)
    case .yieldedExpressionList:
      try self.visitYieldedExpressionListSyntaxImpl(node)
    case .yieldedExpression:
      try self.visitYieldedExpressionSyntaxImpl(node)
    case .yieldedExpressionsClause:
      try self.visitYieldedExpressionsClauseSyntaxImpl(node)
    }
  }
  #endif

  private func visitChildren(_ node: Syntax) throws (E) {
    for case let childDataRef? in node.layoutBuffer where viewMode.shouldTraverse(node: childDataRef.pointee.raw) {
      try dispatchVisit(Syntax(arena: node.arena, dataRef: childDataRef))
    }
  }
}
