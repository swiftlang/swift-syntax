//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//
// Automatically generated by generate-swift-syntax
// Do not edit directly!
// swift-format-ignore-file

/// An instance of `ThrowingSyntaxAnyVisitor` that nevers throws.
public typealias SyntaxAnyVisitor = ThrowingSyntaxAnyVisitor<Never>

/// A `ThrowingSyntaxVisitor` that can visit the nodes as generic ``Syntax`` values.
///
/// This subclass of `ThrowingSyntaxVisitor` is slower than the type-specific visitation
/// of `ThrowingSyntaxVisitor`. Use `ThrowingSyntaxAnyVisitor` if the `visitAny(_)` function
/// would be useful to have, otherwise inherit from `ThrowingSyntaxVisitor`.
///
/// This works by overriding the type-specific visit function that delegate to
/// `visitAny(_)`. A subclass that provides a custom type-specific visit
/// function, should also call `visitAny(_)` in its implementation, if calling
/// `visitAny` is needed:
///
/// ```swift
/// struct MyVisitor: SyntaxAnyVisitor {
///   func visitAny(_ node: Syntax) -> SyntaxVisitorContinueKind {
///     <code>
///   }
///
///   func visit(_ token: TokenSyntax) -> SyntaxVisitorContinueKind {
///     <code>
///     // Call this to pass tokens to `visitAny(_)` as well if needed
///     visitAny(token)
///   }
/// }
/// ```
open class ThrowingSyntaxAnyVisitor<E: Error>: ThrowingSyntaxVisitor<E> {
  open func visitAny(_ node: Syntax) throws(E) -> SyntaxVisitorContinueKind {
    return .visitChildren
  }

  /// The function called after visiting the node and its descendants.
  ///   - node: the node we just finished visiting.
  open func visitAnyPost(_ node: Syntax) throws(E) {
  }

  // MARK: Override type specific visit methods

  override open func visit(_ token: TokenSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(token._syntaxNode)
  }

  override open func visitPost(_ node: TokenSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ABIAttributeArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ABIAttributeArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visit(_ node: AccessorBlockFileSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visitPost(_ node: AccessorBlockFileSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AccessorBlockSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AccessorBlockSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AccessorDeclListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AccessorDeclListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AccessorDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AccessorDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AccessorEffectSpecifiersSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AccessorEffectSpecifiersSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AccessorParametersSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AccessorParametersSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ActorDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ActorDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ArrayElementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ArrayElementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ArrayElementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ArrayElementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ArrayExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ArrayExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ArrayTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ArrayTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ArrowExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ArrowExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AsExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AsExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AssignmentExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AssignmentExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AssociatedTypeDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AssociatedTypeDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visit(_ node: AttributeClauseFileSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visitPost(_ node: AttributeClauseFileSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AttributeListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AttributeListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AttributeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AttributeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AttributedTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AttributedTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AvailabilityArgumentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AvailabilityArgumentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AvailabilityArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AvailabilityArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AvailabilityConditionSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AvailabilityConditionSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AvailabilityLabeledArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AvailabilityLabeledArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visit(_ node: AvailabilityMacroDefinitionFileSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visitPost(_ node: AvailabilityMacroDefinitionFileSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: AwaitExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: AwaitExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: BackDeployedAttributeArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: BackDeployedAttributeArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: BinaryOperatorExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: BinaryOperatorExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: BooleanLiteralExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: BooleanLiteralExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: BorrowExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: BorrowExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: BreakStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: BreakStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: _CanImportExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: _CanImportExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: _CanImportVersionInfoSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: _CanImportVersionInfoSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CatchClauseListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CatchClauseListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CatchClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CatchClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CatchItemListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CatchItemListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CatchItemSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CatchItemSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClassDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClassDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClassRestrictionTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClassRestrictionTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureCaptureClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureCaptureClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureCaptureListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureCaptureListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureCaptureSpecifierSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureCaptureSpecifierSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureCaptureSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureCaptureSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureParameterClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureParameterClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureParameterListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureParameterListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureParameterSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureParameterSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureShorthandParameterListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureShorthandParameterListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureShorthandParameterSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureShorthandParameterSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ClosureSignatureSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ClosureSignatureSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visit(_ node: CodeBlockFileSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visitPost(_ node: CodeBlockFileSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CodeBlockItemListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CodeBlockItemListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CodeBlockItemSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CodeBlockItemSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CodeBlockSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CodeBlockSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CompositionTypeElementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CompositionTypeElementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CompositionTypeElementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CompositionTypeElementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CompositionTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CompositionTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ConditionElementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ConditionElementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ConditionElementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ConditionElementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ConformanceRequirementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ConformanceRequirementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ConsumeExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ConsumeExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ContinueStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ContinueStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: CopyExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: CopyExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeclModifierDetailSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeclModifierDetailSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeclModifierListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeclModifierListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeclModifierSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeclModifierSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeclNameArgumentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeclNameArgumentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeclNameArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeclNameArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeclNameArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeclNameArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeclReferenceExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeclReferenceExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeferStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeferStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeinitializerDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeinitializerDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DeinitializerEffectSpecifiersSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DeinitializerEffectSpecifiersSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DerivativeAttributeArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DerivativeAttributeArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DesignatedTypeListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DesignatedTypeListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DesignatedTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DesignatedTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DictionaryElementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DictionaryElementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DictionaryElementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DictionaryElementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DictionaryExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DictionaryExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DictionaryTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DictionaryTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DifferentiabilityArgumentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DifferentiabilityArgumentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DifferentiabilityArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DifferentiabilityArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DifferentiabilityArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DifferentiabilityArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DifferentiabilityWithRespectToArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DifferentiabilityWithRespectToArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DifferentiableAttributeArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DifferentiableAttributeArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DiscardAssignmentExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DiscardAssignmentExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DiscardStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DiscardStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visit(_ node: DoExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visitPost(_ node: DoExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DoStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DoStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DocumentationAttributeArgumentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DocumentationAttributeArgumentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DocumentationAttributeArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DocumentationAttributeArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: DynamicReplacementAttributeArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: DynamicReplacementAttributeArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EditorPlaceholderDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EditorPlaceholderDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EditorPlaceholderExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EditorPlaceholderExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EffectsAttributeArgumentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EffectsAttributeArgumentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EnumCaseDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EnumCaseDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EnumCaseElementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EnumCaseElementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EnumCaseElementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EnumCaseElementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EnumCaseParameterClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EnumCaseParameterClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EnumCaseParameterListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EnumCaseParameterListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EnumCaseParameterSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EnumCaseParameterSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: EnumDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: EnumDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ExprListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ExprListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ExpressionPatternSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ExpressionPatternSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ExpressionSegmentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ExpressionSegmentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ExpressionStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ExpressionStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ExtensionDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ExtensionDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FallThroughStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FallThroughStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FloatLiteralExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FloatLiteralExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ForStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ForStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ForceUnwrapExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ForceUnwrapExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FunctionCallExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FunctionCallExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FunctionDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FunctionDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FunctionEffectSpecifiersSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FunctionEffectSpecifiersSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FunctionParameterClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FunctionParameterClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FunctionParameterListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FunctionParameterListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FunctionParameterSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FunctionParameterSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FunctionSignatureSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FunctionSignatureSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: FunctionTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: FunctionTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericArgumentClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericArgumentClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericArgumentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericArgumentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericParameterClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericParameterClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericParameterListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericParameterListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericParameterSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericParameterSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericRequirementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericRequirementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericRequirementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericRequirementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericSpecializationExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericSpecializationExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GenericWhereClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GenericWhereClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: GuardStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: GuardStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IdentifierPatternSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IdentifierPatternSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IdentifierTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IdentifierTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IfConfigClauseListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IfConfigClauseListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IfConfigClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IfConfigClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IfConfigDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IfConfigDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IfExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IfExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ImplementsAttributeArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ImplementsAttributeArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ImplicitlyUnwrappedOptionalTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ImplicitlyUnwrappedOptionalTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ImportDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ImportDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ImportPathComponentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ImportPathComponentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ImportPathComponentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ImportPathComponentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: InOutExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: InOutExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: InfixOperatorExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: InfixOperatorExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: InheritanceClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: InheritanceClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: InheritedTypeListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: InheritedTypeListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: InheritedTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: InheritedTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: InitializerClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: InitializerClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: InitializerDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: InitializerDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visit(_ node: InlineArrayTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visitPost(_ node: InlineArrayTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IntegerLiteralExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IntegerLiteralExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IsExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IsExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: IsTypePatternSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: IsTypePatternSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: KeyPathComponentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: KeyPathComponentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: KeyPathComponentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: KeyPathComponentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: KeyPathExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: KeyPathExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visit(_ node: KeyPathMethodComponentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visitPost(_ node: KeyPathMethodComponentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: KeyPathOptionalComponentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: KeyPathOptionalComponentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: KeyPathPropertyComponentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: KeyPathPropertyComponentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: KeyPathSubscriptComponentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: KeyPathSubscriptComponentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: LabeledExprListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: LabeledExprListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: LabeledExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: LabeledExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: LabeledSpecializeArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: LabeledSpecializeArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: LabeledStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: LabeledStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: LayoutRequirementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: LayoutRequirementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visit(_ node: LifetimeSpecifierArgumentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visitPost(_ node: LifetimeSpecifierArgumentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visit(_ node: LifetimeSpecifierArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visitPost(_ node: LifetimeSpecifierArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visit(_ node: LifetimeTypeSpecifierSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visitPost(_ node: LifetimeTypeSpecifierSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MacroDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MacroDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MacroExpansionDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MacroExpansionDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MacroExpansionExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MacroExpansionExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MatchingPatternConditionSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MatchingPatternConditionSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MemberAccessExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MemberAccessExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visit(_ node: MemberBlockItemListFileSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(Compiler)
  override open func visitPost(_ node: MemberBlockItemListFileSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MemberBlockItemListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MemberBlockItemListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MemberBlockItemSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MemberBlockItemSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MemberBlockSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MemberBlockSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MemberTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MemberTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MetatypeTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MetatypeTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MissingDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MissingDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MissingExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MissingExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MissingPatternSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MissingPatternSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MissingStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MissingStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MissingSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MissingSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MissingTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MissingTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MultipleTrailingClosureElementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MultipleTrailingClosureElementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: MultipleTrailingClosureElementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: MultipleTrailingClosureElementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: NamedOpaqueReturnTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: NamedOpaqueReturnTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: NilLiteralExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: NilLiteralExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: NonisolatedSpecifierArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: NonisolatedSpecifierArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: NonisolatedTypeSpecifierSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: NonisolatedTypeSpecifierSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ObjCSelectorPieceListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ObjCSelectorPieceListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ObjCSelectorPieceSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ObjCSelectorPieceSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: OperatorDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: OperatorDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: OperatorPrecedenceAndTypesSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: OperatorPrecedenceAndTypesSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: OptionalBindingConditionSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: OptionalBindingConditionSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: OptionalChainingExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: OptionalChainingExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: OptionalTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: OptionalTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: OriginallyDefinedInAttributeArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: OriginallyDefinedInAttributeArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PackElementExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PackElementExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PackElementTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PackElementTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PackExpansionExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PackExpansionExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PackExpansionTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PackExpansionTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PatternBindingListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PatternBindingListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PatternBindingSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PatternBindingSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PatternExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PatternExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PlatformVersionItemListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PlatformVersionItemListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PlatformVersionItemSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PlatformVersionItemSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PlatformVersionSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PlatformVersionSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PostfixIfConfigExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PostfixIfConfigExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PostfixOperatorExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PostfixOperatorExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PoundSourceLocationArgumentsSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PoundSourceLocationArgumentsSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PoundSourceLocationSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PoundSourceLocationSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrecedenceGroupAssignmentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrecedenceGroupAssignmentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrecedenceGroupAssociativitySyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrecedenceGroupAssociativitySyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrecedenceGroupAttributeListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrecedenceGroupAttributeListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrecedenceGroupDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrecedenceGroupDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrecedenceGroupNameListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrecedenceGroupNameListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrecedenceGroupNameSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrecedenceGroupNameSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrecedenceGroupRelationSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrecedenceGroupRelationSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrefixOperatorExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrefixOperatorExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrimaryAssociatedTypeClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrimaryAssociatedTypeClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrimaryAssociatedTypeListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrimaryAssociatedTypeListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: PrimaryAssociatedTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: PrimaryAssociatedTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ProtocolDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ProtocolDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: RegexLiteralExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: RegexLiteralExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: RepeatStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: RepeatStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ReturnClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ReturnClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ReturnStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ReturnStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SameTypeRequirementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SameTypeRequirementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SequenceExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SequenceExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SimpleStringLiteralExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SimpleStringLiteralExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SimpleStringLiteralSegmentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SimpleStringLiteralSegmentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SimpleTypeSpecifierSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SimpleTypeSpecifierSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SomeOrAnyTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SomeOrAnyTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SourceFileSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SourceFileSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SpecializeAttributeArgumentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SpecializeAttributeArgumentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SpecializeAvailabilityArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SpecializeAvailabilityArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SpecializeTargetFunctionArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SpecializeTargetFunctionArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SpecializedAttributeArgumentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SpecializedAttributeArgumentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: StringLiteralExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: StringLiteralExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: StringLiteralSegmentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: StringLiteralSegmentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: StringSegmentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: StringSegmentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: StructDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: StructDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SubscriptCallExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SubscriptCallExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SubscriptDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SubscriptDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SuperExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SuperExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SuppressedTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SuppressedTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SwitchCaseItemListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SwitchCaseItemListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SwitchCaseItemSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SwitchCaseItemSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SwitchCaseLabelSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SwitchCaseLabelSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SwitchCaseListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SwitchCaseListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SwitchCaseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SwitchCaseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SwitchDefaultLabelSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SwitchDefaultLabelSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: SwitchExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: SwitchExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TernaryExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TernaryExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visit(_ node: ThenStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visitPost(_ node: ThenStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ThrowStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ThrowStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ThrowsClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: ThrowsClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TryExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TryExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TupleExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TupleExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TuplePatternElementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TuplePatternElementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TuplePatternElementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TuplePatternElementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TuplePatternSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TuplePatternSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TupleTypeElementListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TupleTypeElementListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TupleTypeElementSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TupleTypeElementSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TupleTypeSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TupleTypeSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TypeAliasDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TypeAliasDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TypeAnnotationSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TypeAnnotationSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TypeEffectSpecifiersSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TypeEffectSpecifiersSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TypeExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TypeExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TypeInitializerClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TypeInitializerClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: TypeSpecifierListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: TypeSpecifierListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: UnexpectedNodesSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: UnexpectedNodesSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: UnresolvedAsExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: UnresolvedAsExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: UnresolvedIsExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: UnresolvedIsExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: UnresolvedTernaryExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: UnresolvedTernaryExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: UnsafeExprSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: UnsafeExprSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

<<<<<<< HEAD
  @_spi(ExperimentalLanguageFeatures)
  override open func visit(_ node: UsingDeclSyntax) -> SyntaxVisitorContinueKind {
    return visitAny(node._syntaxNode)
  }

  @_spi(ExperimentalLanguageFeatures)
  override open func visitPost(_ node: UsingDeclSyntax) {
    visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: ValueBindingPatternSyntax) -> SyntaxVisitorContinueKind {
    return visitAny(node._syntaxNode)
=======
  override open func visit(_ node: ValueBindingPatternSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
>>>>>>> 268a142d (Modify SyntaxVisitor to supprt throwing during travresal.)
  }

  override open func visitPost(_ node: ValueBindingPatternSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: VariableDeclSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: VariableDeclSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: VersionComponentListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: VersionComponentListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: VersionComponentSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: VersionComponentSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: VersionTupleSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: VersionTupleSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: WhereClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: WhereClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: WhileStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: WhileStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: WildcardPatternSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: WildcardPatternSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: YieldStmtSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: YieldStmtSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: YieldedExpressionListSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: YieldedExpressionListSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: YieldedExpressionSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: YieldedExpressionSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }

  override open func visit(_ node: YieldedExpressionsClauseSyntax) throws(E) -> SyntaxVisitorContinueKind {
    return try visitAny(node._syntaxNode)
  }

  override open func visitPost(_ node: YieldedExpressionsClauseSyntax) throws(E) {
    try visitAnyPost(node._syntaxNode)
  }
}
