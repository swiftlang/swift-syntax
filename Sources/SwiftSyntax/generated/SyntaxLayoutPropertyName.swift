//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension SyntaxLayoutProperty {
  /// Property name if this is a valid property.
  /// 'nil' if the `syntaxKind` is not a layout syntax, or the index is out of range.
  @_spi(RawSyntax)
  public var name: String? {
    switch (self.syntaxKind, self.index.value) {
    case (.abiAttributeArguments, 0):
      return "unexpectedBeforeProvider"
    case (.abiAttributeArguments, 1):
      return "provider"
    case (.abiAttributeArguments, 2):
      return "unexpectedAfterProvider"
    case (.accessorBlock, 0):
      return "unexpectedBeforeLeftBrace"
    case (.accessorBlock, 1):
      return "leftBrace"
    case (.accessorBlock, 2):
      return "unexpectedBetweenLeftBraceAndAccessors"
    case (.accessorBlock, 3):
      return "accessors"
    case (.accessorBlock, 4):
      return "unexpectedBetweenAccessorsAndRightBrace"
    case (.accessorBlock, 5):
      return "rightBrace"
    case (.accessorBlock, 6):
      return "unexpectedAfterRightBrace"
    case (.accessorDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.accessorDecl, 1):
      return "attributes"
    case (.accessorDecl, 2):
      return "unexpectedBetweenAttributesAndModifier"
    case (.accessorDecl, 3):
      return "modifier"
    case (.accessorDecl, 4):
      return "unexpectedBetweenModifierAndAccessorSpecifier"
    case (.accessorDecl, 5):
      return "accessorSpecifier"
    case (.accessorDecl, 6):
      return "unexpectedBetweenAccessorSpecifierAndParameters"
    case (.accessorDecl, 7):
      return "parameters"
    case (.accessorDecl, 8):
      return "unexpectedBetweenParametersAndEffectSpecifiers"
    case (.accessorDecl, 9):
      return "effectSpecifiers"
    case (.accessorDecl, 10):
      return "unexpectedBetweenEffectSpecifiersAndBody"
    case (.accessorDecl, 11):
      return "body"
    case (.accessorDecl, 12):
      return "unexpectedAfterBody"
    case (.accessorEffectSpecifiers, 0):
      return "unexpectedBeforeAsyncSpecifier"
    case (.accessorEffectSpecifiers, 1):
      return "asyncSpecifier"
    case (.accessorEffectSpecifiers, 2):
      return "unexpectedBetweenAsyncSpecifierAndThrowsClause"
    case (.accessorEffectSpecifiers, 3):
      return "throwsClause"
    case (.accessorEffectSpecifiers, 4):
      return "unexpectedAfterThrowsClause"
    case (.accessorParameters, 0):
      return "unexpectedBeforeLeftParen"
    case (.accessorParameters, 1):
      return "leftParen"
    case (.accessorParameters, 2):
      return "unexpectedBetweenLeftParenAndName"
    case (.accessorParameters, 3):
      return "name"
    case (.accessorParameters, 4):
      return "unexpectedBetweenNameAndRightParen"
    case (.accessorParameters, 5):
      return "rightParen"
    case (.accessorParameters, 6):
      return "unexpectedAfterRightParen"
    case (.actorDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.actorDecl, 1):
      return "attributes"
    case (.actorDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.actorDecl, 3):
      return "modifiers"
    case (.actorDecl, 4):
      return "unexpectedBetweenModifiersAndActorKeyword"
    case (.actorDecl, 5):
      return "actorKeyword"
    case (.actorDecl, 6):
      return "unexpectedBetweenActorKeywordAndName"
    case (.actorDecl, 7):
      return "name"
    case (.actorDecl, 8):
      return "unexpectedBetweenNameAndGenericParameterClause"
    case (.actorDecl, 9):
      return "genericParameterClause"
    case (.actorDecl, 10):
      return "unexpectedBetweenGenericParameterClauseAndInheritanceClause"
    case (.actorDecl, 11):
      return "inheritanceClause"
    case (.actorDecl, 12):
      return "unexpectedBetweenInheritanceClauseAndGenericWhereClause"
    case (.actorDecl, 13):
      return "genericWhereClause"
    case (.actorDecl, 14):
      return "unexpectedBetweenGenericWhereClauseAndMemberBlock"
    case (.actorDecl, 15):
      return "memberBlock"
    case (.actorDecl, 16):
      return "unexpectedAfterMemberBlock"
    case (.arrayElement, 0):
      return "unexpectedBeforeExpression"
    case (.arrayElement, 1):
      return "expression"
    case (.arrayElement, 2):
      return "unexpectedBetweenExpressionAndTrailingComma"
    case (.arrayElement, 3):
      return "trailingComma"
    case (.arrayElement, 4):
      return "unexpectedAfterTrailingComma"
    case (.arrayExpr, 0):
      return "unexpectedBeforeLeftSquare"
    case (.arrayExpr, 1):
      return "leftSquare"
    case (.arrayExpr, 2):
      return "unexpectedBetweenLeftSquareAndElements"
    case (.arrayExpr, 3):
      return "elements"
    case (.arrayExpr, 4):
      return "unexpectedBetweenElementsAndRightSquare"
    case (.arrayExpr, 5):
      return "rightSquare"
    case (.arrayExpr, 6):
      return "unexpectedAfterRightSquare"
    case (.arrayType, 0):
      return "unexpectedBeforeLeftSquare"
    case (.arrayType, 1):
      return "leftSquare"
    case (.arrayType, 2):
      return "unexpectedBetweenLeftSquareAndElement"
    case (.arrayType, 3):
      return "element"
    case (.arrayType, 4):
      return "unexpectedBetweenElementAndRightSquare"
    case (.arrayType, 5):
      return "rightSquare"
    case (.arrayType, 6):
      return "unexpectedAfterRightSquare"
    case (.arrowExpr, 0):
      return "unexpectedBeforeEffectSpecifiers"
    case (.arrowExpr, 1):
      return "effectSpecifiers"
    case (.arrowExpr, 2):
      return "unexpectedBetweenEffectSpecifiersAndArrow"
    case (.arrowExpr, 3):
      return "arrow"
    case (.arrowExpr, 4):
      return "unexpectedAfterArrow"
    case (.asExpr, 0):
      return "unexpectedBeforeExpression"
    case (.asExpr, 1):
      return "expression"
    case (.asExpr, 2):
      return "unexpectedBetweenExpressionAndAsKeyword"
    case (.asExpr, 3):
      return "asKeyword"
    case (.asExpr, 4):
      return "unexpectedBetweenAsKeywordAndQuestionOrExclamationMark"
    case (.asExpr, 5):
      return "questionOrExclamationMark"
    case (.asExpr, 6):
      return "unexpectedBetweenQuestionOrExclamationMarkAndType"
    case (.asExpr, 7):
      return "type"
    case (.asExpr, 8):
      return "unexpectedAfterType"
    case (.assignmentExpr, 0):
      return "unexpectedBeforeEqual"
    case (.assignmentExpr, 1):
      return "equal"
    case (.assignmentExpr, 2):
      return "unexpectedAfterEqual"
    case (.associatedTypeDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.associatedTypeDecl, 1):
      return "attributes"
    case (.associatedTypeDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.associatedTypeDecl, 3):
      return "modifiers"
    case (.associatedTypeDecl, 4):
      return "unexpectedBetweenModifiersAndAssociatedtypeKeyword"
    case (.associatedTypeDecl, 5):
      return "associatedtypeKeyword"
    case (.associatedTypeDecl, 6):
      return "unexpectedBetweenAssociatedtypeKeywordAndName"
    case (.associatedTypeDecl, 7):
      return "name"
    case (.associatedTypeDecl, 8):
      return "unexpectedBetweenNameAndInheritanceClause"
    case (.associatedTypeDecl, 9):
      return "inheritanceClause"
    case (.associatedTypeDecl, 10):
      return "unexpectedBetweenInheritanceClauseAndInitializer"
    case (.associatedTypeDecl, 11):
      return "initializer"
    case (.associatedTypeDecl, 12):
      return "unexpectedBetweenInitializerAndGenericWhereClause"
    case (.associatedTypeDecl, 13):
      return "genericWhereClause"
    case (.associatedTypeDecl, 14):
      return "unexpectedAfterGenericWhereClause"
    case (.attribute, 0):
      return "unexpectedBeforeAtSign"
    case (.attribute, 1):
      return "atSign"
    case (.attribute, 2):
      return "unexpectedBetweenAtSignAndAttributeName"
    case (.attribute, 3):
      return "attributeName"
    case (.attribute, 4):
      return "unexpectedBetweenAttributeNameAndLeftParen"
    case (.attribute, 5):
      return "leftParen"
    case (.attribute, 6):
      return "unexpectedBetweenLeftParenAndArguments"
    case (.attribute, 7):
      return "arguments"
    case (.attribute, 8):
      return "unexpectedBetweenArgumentsAndRightParen"
    case (.attribute, 9):
      return "rightParen"
    case (.attribute, 10):
      return "unexpectedAfterRightParen"
    case (.attributedType, 0):
      return "unexpectedBeforeSpecifiers"
    case (.attributedType, 1):
      return "specifiers"
    case (.attributedType, 2):
      return "unexpectedBetweenSpecifiersAndAttributes"
    case (.attributedType, 3):
      return "attributes"
    case (.attributedType, 4):
      return "unexpectedBetweenAttributesAndBaseType"
    case (.attributedType, 5):
      return "baseType"
    case (.attributedType, 6):
      return "unexpectedAfterBaseType"
    case (.availabilityArgument, 0):
      return "unexpectedBeforeArgument"
    case (.availabilityArgument, 1):
      return "argument"
    case (.availabilityArgument, 2):
      return "unexpectedBetweenArgumentAndTrailingComma"
    case (.availabilityArgument, 3):
      return "trailingComma"
    case (.availabilityArgument, 4):
      return "unexpectedAfterTrailingComma"
    case (.availabilityCondition, 0):
      return "unexpectedBeforeAvailabilityKeyword"
    case (.availabilityCondition, 1):
      return "availabilityKeyword"
    case (.availabilityCondition, 2):
      return "unexpectedBetweenAvailabilityKeywordAndLeftParen"
    case (.availabilityCondition, 3):
      return "leftParen"
    case (.availabilityCondition, 4):
      return "unexpectedBetweenLeftParenAndAvailabilityArguments"
    case (.availabilityCondition, 5):
      return "availabilityArguments"
    case (.availabilityCondition, 6):
      return "unexpectedBetweenAvailabilityArgumentsAndRightParen"
    case (.availabilityCondition, 7):
      return "rightParen"
    case (.availabilityCondition, 8):
      return "unexpectedAfterRightParen"
    case (.availabilityLabeledArgument, 0):
      return "unexpectedBeforeLabel"
    case (.availabilityLabeledArgument, 1):
      return "label"
    case (.availabilityLabeledArgument, 2):
      return "unexpectedBetweenLabelAndColon"
    case (.availabilityLabeledArgument, 3):
      return "colon"
    case (.availabilityLabeledArgument, 4):
      return "unexpectedBetweenColonAndValue"
    case (.availabilityLabeledArgument, 5):
      return "value"
    case (.availabilityLabeledArgument, 6):
      return "unexpectedAfterValue"
    case (.awaitExpr, 0):
      return "unexpectedBeforeAwaitKeyword"
    case (.awaitExpr, 1):
      return "awaitKeyword"
    case (.awaitExpr, 2):
      return "unexpectedBetweenAwaitKeywordAndExpression"
    case (.awaitExpr, 3):
      return "expression"
    case (.awaitExpr, 4):
      return "unexpectedAfterExpression"
    case (.backDeployedAttributeArguments, 0):
      return "unexpectedBeforeBeforeLabel"
    case (.backDeployedAttributeArguments, 1):
      return "beforeLabel"
    case (.backDeployedAttributeArguments, 2):
      return "unexpectedBetweenBeforeLabelAndColon"
    case (.backDeployedAttributeArguments, 3):
      return "colon"
    case (.backDeployedAttributeArguments, 4):
      return "unexpectedBetweenColonAndPlatforms"
    case (.backDeployedAttributeArguments, 5):
      return "platforms"
    case (.backDeployedAttributeArguments, 6):
      return "unexpectedAfterPlatforms"
    case (.binaryOperatorExpr, 0):
      return "unexpectedBeforeOperator"
    case (.binaryOperatorExpr, 1):
      return "operator"
    case (.binaryOperatorExpr, 2):
      return "unexpectedAfterOperator"
    case (.booleanLiteralExpr, 0):
      return "unexpectedBeforeLiteral"
    case (.booleanLiteralExpr, 1):
      return "literal"
    case (.booleanLiteralExpr, 2):
      return "unexpectedAfterLiteral"
    case (.borrowExpr, 0):
      return "unexpectedBeforeBorrowKeyword"
    case (.borrowExpr, 1):
      return "borrowKeyword"
    case (.borrowExpr, 2):
      return "unexpectedBetweenBorrowKeywordAndExpression"
    case (.borrowExpr, 3):
      return "expression"
    case (.borrowExpr, 4):
      return "unexpectedAfterExpression"
    case (.breakStmt, 0):
      return "unexpectedBeforeBreakKeyword"
    case (.breakStmt, 1):
      return "breakKeyword"
    case (.breakStmt, 2):
      return "unexpectedBetweenBreakKeywordAndLabel"
    case (.breakStmt, 3):
      return "label"
    case (.breakStmt, 4):
      return "unexpectedAfterLabel"
    case (._canImportExpr, 0):
      return "unexpectedBeforeCanImportKeyword"
    case (._canImportExpr, 1):
      return "canImportKeyword"
    case (._canImportExpr, 2):
      return "unexpectedBetweenCanImportKeywordAndLeftParen"
    case (._canImportExpr, 3):
      return "leftParen"
    case (._canImportExpr, 4):
      return "unexpectedBetweenLeftParenAndImportPath"
    case (._canImportExpr, 5):
      return "importPath"
    case (._canImportExpr, 6):
      return "unexpectedBetweenImportPathAndVersionInfo"
    case (._canImportExpr, 7):
      return "versionInfo"
    case (._canImportExpr, 8):
      return "unexpectedBetweenVersionInfoAndRightParen"
    case (._canImportExpr, 9):
      return "rightParen"
    case (._canImportExpr, 10):
      return "unexpectedAfterRightParen"
    case (._canImportVersionInfo, 0):
      return "unexpectedBeforeComma"
    case (._canImportVersionInfo, 1):
      return "comma"
    case (._canImportVersionInfo, 2):
      return "unexpectedBetweenCommaAndLabel"
    case (._canImportVersionInfo, 3):
      return "label"
    case (._canImportVersionInfo, 4):
      return "unexpectedBetweenLabelAndColon"
    case (._canImportVersionInfo, 5):
      return "colon"
    case (._canImportVersionInfo, 6):
      return "unexpectedBetweenColonAndVersion"
    case (._canImportVersionInfo, 7):
      return "version"
    case (._canImportVersionInfo, 8):
      return "unexpectedAfterVersion"
    case (.catchClause, 0):
      return "unexpectedBeforeCatchKeyword"
    case (.catchClause, 1):
      return "catchKeyword"
    case (.catchClause, 2):
      return "unexpectedBetweenCatchKeywordAndCatchItems"
    case (.catchClause, 3):
      return "catchItems"
    case (.catchClause, 4):
      return "unexpectedBetweenCatchItemsAndBody"
    case (.catchClause, 5):
      return "body"
    case (.catchClause, 6):
      return "unexpectedAfterBody"
    case (.catchItem, 0):
      return "unexpectedBeforePattern"
    case (.catchItem, 1):
      return "pattern"
    case (.catchItem, 2):
      return "unexpectedBetweenPatternAndWhereClause"
    case (.catchItem, 3):
      return "whereClause"
    case (.catchItem, 4):
      return "unexpectedBetweenWhereClauseAndTrailingComma"
    case (.catchItem, 5):
      return "trailingComma"
    case (.catchItem, 6):
      return "unexpectedAfterTrailingComma"
    case (.classDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.classDecl, 1):
      return "attributes"
    case (.classDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.classDecl, 3):
      return "modifiers"
    case (.classDecl, 4):
      return "unexpectedBetweenModifiersAndClassKeyword"
    case (.classDecl, 5):
      return "classKeyword"
    case (.classDecl, 6):
      return "unexpectedBetweenClassKeywordAndName"
    case (.classDecl, 7):
      return "name"
    case (.classDecl, 8):
      return "unexpectedBetweenNameAndGenericParameterClause"
    case (.classDecl, 9):
      return "genericParameterClause"
    case (.classDecl, 10):
      return "unexpectedBetweenGenericParameterClauseAndInheritanceClause"
    case (.classDecl, 11):
      return "inheritanceClause"
    case (.classDecl, 12):
      return "unexpectedBetweenInheritanceClauseAndGenericWhereClause"
    case (.classDecl, 13):
      return "genericWhereClause"
    case (.classDecl, 14):
      return "unexpectedBetweenGenericWhereClauseAndMemberBlock"
    case (.classDecl, 15):
      return "memberBlock"
    case (.classDecl, 16):
      return "unexpectedAfterMemberBlock"
    case (.classRestrictionType, 0):
      return "unexpectedBeforeClassKeyword"
    case (.classRestrictionType, 1):
      return "classKeyword"
    case (.classRestrictionType, 2):
      return "unexpectedAfterClassKeyword"
    case (.closureCaptureClause, 0):
      return "unexpectedBeforeLeftSquare"
    case (.closureCaptureClause, 1):
      return "leftSquare"
    case (.closureCaptureClause, 2):
      return "unexpectedBetweenLeftSquareAndItems"
    case (.closureCaptureClause, 3):
      return "items"
    case (.closureCaptureClause, 4):
      return "unexpectedBetweenItemsAndRightSquare"
    case (.closureCaptureClause, 5):
      return "rightSquare"
    case (.closureCaptureClause, 6):
      return "unexpectedAfterRightSquare"
    case (.closureCaptureSpecifier, 0):
      return "unexpectedBeforeSpecifier"
    case (.closureCaptureSpecifier, 1):
      return "specifier"
    case (.closureCaptureSpecifier, 2):
      return "unexpectedBetweenSpecifierAndLeftParen"
    case (.closureCaptureSpecifier, 3):
      return "leftParen"
    case (.closureCaptureSpecifier, 4):
      return "unexpectedBetweenLeftParenAndDetail"
    case (.closureCaptureSpecifier, 5):
      return "detail"
    case (.closureCaptureSpecifier, 6):
      return "unexpectedBetweenDetailAndRightParen"
    case (.closureCaptureSpecifier, 7):
      return "rightParen"
    case (.closureCaptureSpecifier, 8):
      return "unexpectedAfterRightParen"
    case (.closureCapture, 0):
      return "unexpectedBeforeSpecifier"
    case (.closureCapture, 1):
      return "specifier"
    case (.closureCapture, 2):
      return "unexpectedBetweenSpecifierAndName"
    case (.closureCapture, 3):
      return "name"
    case (.closureCapture, 4):
      return "unexpectedBetweenNameAndInitializer"
    case (.closureCapture, 5):
      return "initializer"
    case (.closureCapture, 6):
      return "unexpectedBetweenInitializerAndTrailingComma"
    case (.closureCapture, 7):
      return "trailingComma"
    case (.closureCapture, 8):
      return "unexpectedAfterTrailingComma"
    case (.closureExpr, 0):
      return "unexpectedBeforeLeftBrace"
    case (.closureExpr, 1):
      return "leftBrace"
    case (.closureExpr, 2):
      return "unexpectedBetweenLeftBraceAndSignature"
    case (.closureExpr, 3):
      return "signature"
    case (.closureExpr, 4):
      return "unexpectedBetweenSignatureAndStatements"
    case (.closureExpr, 5):
      return "statements"
    case (.closureExpr, 6):
      return "unexpectedBetweenStatementsAndRightBrace"
    case (.closureExpr, 7):
      return "rightBrace"
    case (.closureExpr, 8):
      return "unexpectedAfterRightBrace"
    case (.closureParameterClause, 0):
      return "unexpectedBeforeLeftParen"
    case (.closureParameterClause, 1):
      return "leftParen"
    case (.closureParameterClause, 2):
      return "unexpectedBetweenLeftParenAndParameters"
    case (.closureParameterClause, 3):
      return "parameters"
    case (.closureParameterClause, 4):
      return "unexpectedBetweenParametersAndRightParen"
    case (.closureParameterClause, 5):
      return "rightParen"
    case (.closureParameterClause, 6):
      return "unexpectedAfterRightParen"
    case (.closureParameter, 0):
      return "unexpectedBeforeAttributes"
    case (.closureParameter, 1):
      return "attributes"
    case (.closureParameter, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.closureParameter, 3):
      return "modifiers"
    case (.closureParameter, 4):
      return "unexpectedBetweenModifiersAndFirstName"
    case (.closureParameter, 5):
      return "firstName"
    case (.closureParameter, 6):
      return "unexpectedBetweenFirstNameAndSecondName"
    case (.closureParameter, 7):
      return "secondName"
    case (.closureParameter, 8):
      return "unexpectedBetweenSecondNameAndColon"
    case (.closureParameter, 9):
      return "colon"
    case (.closureParameter, 10):
      return "unexpectedBetweenColonAndType"
    case (.closureParameter, 11):
      return "type"
    case (.closureParameter, 12):
      return "unexpectedBetweenTypeAndEllipsis"
    case (.closureParameter, 13):
      return "ellipsis"
    case (.closureParameter, 14):
      return "unexpectedBetweenEllipsisAndTrailingComma"
    case (.closureParameter, 15):
      return "trailingComma"
    case (.closureParameter, 16):
      return "unexpectedAfterTrailingComma"
    case (.closureShorthandParameter, 0):
      return "unexpectedBeforeName"
    case (.closureShorthandParameter, 1):
      return "name"
    case (.closureShorthandParameter, 2):
      return "unexpectedBetweenNameAndTrailingComma"
    case (.closureShorthandParameter, 3):
      return "trailingComma"
    case (.closureShorthandParameter, 4):
      return "unexpectedAfterTrailingComma"
    case (.closureSignature, 0):
      return "unexpectedBeforeAttributes"
    case (.closureSignature, 1):
      return "attributes"
    case (.closureSignature, 2):
      return "unexpectedBetweenAttributesAndCapture"
    case (.closureSignature, 3):
      return "capture"
    case (.closureSignature, 4):
      return "unexpectedBetweenCaptureAndParameterClause"
    case (.closureSignature, 5):
      return "parameterClause"
    case (.closureSignature, 6):
      return "unexpectedBetweenParameterClauseAndEffectSpecifiers"
    case (.closureSignature, 7):
      return "effectSpecifiers"
    case (.closureSignature, 8):
      return "unexpectedBetweenEffectSpecifiersAndReturnClause"
    case (.closureSignature, 9):
      return "returnClause"
    case (.closureSignature, 10):
      return "unexpectedBetweenReturnClauseAndInKeyword"
    case (.closureSignature, 11):
      return "inKeyword"
    case (.closureSignature, 12):
      return "unexpectedAfterInKeyword"
    case (.codeBlockItem, 0):
      return "unexpectedBeforeItem"
    case (.codeBlockItem, 1):
      return "item"
    case (.codeBlockItem, 2):
      return "unexpectedBetweenItemAndSemicolon"
    case (.codeBlockItem, 3):
      return "semicolon"
    case (.codeBlockItem, 4):
      return "unexpectedAfterSemicolon"
    case (.codeBlock, 0):
      return "unexpectedBeforeLeftBrace"
    case (.codeBlock, 1):
      return "leftBrace"
    case (.codeBlock, 2):
      return "unexpectedBetweenLeftBraceAndStatements"
    case (.codeBlock, 3):
      return "statements"
    case (.codeBlock, 4):
      return "unexpectedBetweenStatementsAndRightBrace"
    case (.codeBlock, 5):
      return "rightBrace"
    case (.codeBlock, 6):
      return "unexpectedAfterRightBrace"
    case (.compositionTypeElement, 0):
      return "unexpectedBeforeType"
    case (.compositionTypeElement, 1):
      return "type"
    case (.compositionTypeElement, 2):
      return "unexpectedBetweenTypeAndAmpersand"
    case (.compositionTypeElement, 3):
      return "ampersand"
    case (.compositionTypeElement, 4):
      return "unexpectedAfterAmpersand"
    case (.compositionType, 0):
      return "unexpectedBeforeElements"
    case (.compositionType, 1):
      return "elements"
    case (.compositionType, 2):
      return "unexpectedAfterElements"
    case (.conditionElement, 0):
      return "unexpectedBeforeCondition"
    case (.conditionElement, 1):
      return "condition"
    case (.conditionElement, 2):
      return "unexpectedBetweenConditionAndTrailingComma"
    case (.conditionElement, 3):
      return "trailingComma"
    case (.conditionElement, 4):
      return "unexpectedAfterTrailingComma"
    case (.conformanceRequirement, 0):
      return "unexpectedBeforeLeftType"
    case (.conformanceRequirement, 1):
      return "leftType"
    case (.conformanceRequirement, 2):
      return "unexpectedBetweenLeftTypeAndColon"
    case (.conformanceRequirement, 3):
      return "colon"
    case (.conformanceRequirement, 4):
      return "unexpectedBetweenColonAndRightType"
    case (.conformanceRequirement, 5):
      return "rightType"
    case (.conformanceRequirement, 6):
      return "unexpectedAfterRightType"
    case (.consumeExpr, 0):
      return "unexpectedBeforeConsumeKeyword"
    case (.consumeExpr, 1):
      return "consumeKeyword"
    case (.consumeExpr, 2):
      return "unexpectedBetweenConsumeKeywordAndExpression"
    case (.consumeExpr, 3):
      return "expression"
    case (.consumeExpr, 4):
      return "unexpectedAfterExpression"
    case (.continueStmt, 0):
      return "unexpectedBeforeContinueKeyword"
    case (.continueStmt, 1):
      return "continueKeyword"
    case (.continueStmt, 2):
      return "unexpectedBetweenContinueKeywordAndLabel"
    case (.continueStmt, 3):
      return "label"
    case (.continueStmt, 4):
      return "unexpectedAfterLabel"
    case (.conventionAttributeArguments, 0):
      return "unexpectedBeforeConventionLabel"
    case (.conventionAttributeArguments, 1):
      return "conventionLabel"
    case (.conventionAttributeArguments, 2):
      return "unexpectedBetweenConventionLabelAndComma"
    case (.conventionAttributeArguments, 3):
      return "comma"
    case (.conventionAttributeArguments, 4):
      return "unexpectedBetweenCommaAndCTypeLabel"
    case (.conventionAttributeArguments, 5):
      return "cTypeLabel"
    case (.conventionAttributeArguments, 6):
      return "unexpectedBetweenCTypeLabelAndColon"
    case (.conventionAttributeArguments, 7):
      return "colon"
    case (.conventionAttributeArguments, 8):
      return "unexpectedBetweenColonAndCTypeString"
    case (.conventionAttributeArguments, 9):
      return "cTypeString"
    case (.conventionAttributeArguments, 10):
      return "unexpectedAfterCTypeString"
    case (.conventionWitnessMethodAttributeArguments, 0):
      return "unexpectedBeforeWitnessMethodLabel"
    case (.conventionWitnessMethodAttributeArguments, 1):
      return "witnessMethodLabel"
    case (.conventionWitnessMethodAttributeArguments, 2):
      return "unexpectedBetweenWitnessMethodLabelAndColon"
    case (.conventionWitnessMethodAttributeArguments, 3):
      return "colon"
    case (.conventionWitnessMethodAttributeArguments, 4):
      return "unexpectedBetweenColonAndProtocolName"
    case (.conventionWitnessMethodAttributeArguments, 5):
      return "protocolName"
    case (.conventionWitnessMethodAttributeArguments, 6):
      return "unexpectedAfterProtocolName"
    case (.copyExpr, 0):
      return "unexpectedBeforeCopyKeyword"
    case (.copyExpr, 1):
      return "copyKeyword"
    case (.copyExpr, 2):
      return "unexpectedBetweenCopyKeywordAndExpression"
    case (.copyExpr, 3):
      return "expression"
    case (.copyExpr, 4):
      return "unexpectedAfterExpression"
    case (.declModifierDetail, 0):
      return "unexpectedBeforeLeftParen"
    case (.declModifierDetail, 1):
      return "leftParen"
    case (.declModifierDetail, 2):
      return "unexpectedBetweenLeftParenAndDetail"
    case (.declModifierDetail, 3):
      return "detail"
    case (.declModifierDetail, 4):
      return "unexpectedBetweenDetailAndRightParen"
    case (.declModifierDetail, 5):
      return "rightParen"
    case (.declModifierDetail, 6):
      return "unexpectedAfterRightParen"
    case (.declModifier, 0):
      return "unexpectedBeforeName"
    case (.declModifier, 1):
      return "name"
    case (.declModifier, 2):
      return "unexpectedBetweenNameAndDetail"
    case (.declModifier, 3):
      return "detail"
    case (.declModifier, 4):
      return "unexpectedAfterDetail"
    case (.declNameArgument, 0):
      return "unexpectedBeforeName"
    case (.declNameArgument, 1):
      return "name"
    case (.declNameArgument, 2):
      return "unexpectedBetweenNameAndColon"
    case (.declNameArgument, 3):
      return "colon"
    case (.declNameArgument, 4):
      return "unexpectedAfterColon"
    case (.declNameArguments, 0):
      return "unexpectedBeforeLeftParen"
    case (.declNameArguments, 1):
      return "leftParen"
    case (.declNameArguments, 2):
      return "unexpectedBetweenLeftParenAndArguments"
    case (.declNameArguments, 3):
      return "arguments"
    case (.declNameArguments, 4):
      return "unexpectedBetweenArgumentsAndRightParen"
    case (.declNameArguments, 5):
      return "rightParen"
    case (.declNameArguments, 6):
      return "unexpectedAfterRightParen"
    case (.declReferenceExpr, 0):
      return "unexpectedBeforeBaseName"
    case (.declReferenceExpr, 1):
      return "baseName"
    case (.declReferenceExpr, 2):
      return "unexpectedBetweenBaseNameAndArgumentNames"
    case (.declReferenceExpr, 3):
      return "argumentNames"
    case (.declReferenceExpr, 4):
      return "unexpectedAfterArgumentNames"
    case (.deferStmt, 0):
      return "unexpectedBeforeDeferKeyword"
    case (.deferStmt, 1):
      return "deferKeyword"
    case (.deferStmt, 2):
      return "unexpectedBetweenDeferKeywordAndBody"
    case (.deferStmt, 3):
      return "body"
    case (.deferStmt, 4):
      return "unexpectedAfterBody"
    case (.deinitializerDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.deinitializerDecl, 1):
      return "attributes"
    case (.deinitializerDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.deinitializerDecl, 3):
      return "modifiers"
    case (.deinitializerDecl, 4):
      return "unexpectedBetweenModifiersAndDeinitKeyword"
    case (.deinitializerDecl, 5):
      return "deinitKeyword"
    case (.deinitializerDecl, 6):
      return "unexpectedBetweenDeinitKeywordAndEffectSpecifiers"
    case (.deinitializerDecl, 7):
      return "effectSpecifiers"
    case (.deinitializerDecl, 8):
      return "unexpectedBetweenEffectSpecifiersAndBody"
    case (.deinitializerDecl, 9):
      return "body"
    case (.deinitializerDecl, 10):
      return "unexpectedAfterBody"
    case (.deinitializerEffectSpecifiers, 0):
      return "unexpectedBeforeAsyncSpecifier"
    case (.deinitializerEffectSpecifiers, 1):
      return "asyncSpecifier"
    case (.deinitializerEffectSpecifiers, 2):
      return "unexpectedAfterAsyncSpecifier"
    case (.derivativeAttributeArguments, 0):
      return "unexpectedBeforeOfLabel"
    case (.derivativeAttributeArguments, 1):
      return "ofLabel"
    case (.derivativeAttributeArguments, 2):
      return "unexpectedBetweenOfLabelAndColon"
    case (.derivativeAttributeArguments, 3):
      return "colon"
    case (.derivativeAttributeArguments, 4):
      return "unexpectedBetweenColonAndOriginalDeclName"
    case (.derivativeAttributeArguments, 5):
      return "originalDeclName"
    case (.derivativeAttributeArguments, 6):
      return "unexpectedBetweenOriginalDeclNameAndPeriod"
    case (.derivativeAttributeArguments, 7):
      return "period"
    case (.derivativeAttributeArguments, 8):
      return "unexpectedBetweenPeriodAndAccessorSpecifier"
    case (.derivativeAttributeArguments, 9):
      return "accessorSpecifier"
    case (.derivativeAttributeArguments, 10):
      return "unexpectedBetweenAccessorSpecifierAndComma"
    case (.derivativeAttributeArguments, 11):
      return "comma"
    case (.derivativeAttributeArguments, 12):
      return "unexpectedBetweenCommaAndArguments"
    case (.derivativeAttributeArguments, 13):
      return "arguments"
    case (.derivativeAttributeArguments, 14):
      return "unexpectedAfterArguments"
    case (.designatedType, 0):
      return "unexpectedBeforeLeadingComma"
    case (.designatedType, 1):
      return "leadingComma"
    case (.designatedType, 2):
      return "unexpectedBetweenLeadingCommaAndName"
    case (.designatedType, 3):
      return "name"
    case (.designatedType, 4):
      return "unexpectedAfterName"
    case (.dictionaryElement, 0):
      return "unexpectedBeforeKey"
    case (.dictionaryElement, 1):
      return "key"
    case (.dictionaryElement, 2):
      return "unexpectedBetweenKeyAndColon"
    case (.dictionaryElement, 3):
      return "colon"
    case (.dictionaryElement, 4):
      return "unexpectedBetweenColonAndValue"
    case (.dictionaryElement, 5):
      return "value"
    case (.dictionaryElement, 6):
      return "unexpectedBetweenValueAndTrailingComma"
    case (.dictionaryElement, 7):
      return "trailingComma"
    case (.dictionaryElement, 8):
      return "unexpectedAfterTrailingComma"
    case (.dictionaryExpr, 0):
      return "unexpectedBeforeLeftSquare"
    case (.dictionaryExpr, 1):
      return "leftSquare"
    case (.dictionaryExpr, 2):
      return "unexpectedBetweenLeftSquareAndContent"
    case (.dictionaryExpr, 3):
      return "content"
    case (.dictionaryExpr, 4):
      return "unexpectedBetweenContentAndRightSquare"
    case (.dictionaryExpr, 5):
      return "rightSquare"
    case (.dictionaryExpr, 6):
      return "unexpectedAfterRightSquare"
    case (.dictionaryType, 0):
      return "unexpectedBeforeLeftSquare"
    case (.dictionaryType, 1):
      return "leftSquare"
    case (.dictionaryType, 2):
      return "unexpectedBetweenLeftSquareAndKey"
    case (.dictionaryType, 3):
      return "key"
    case (.dictionaryType, 4):
      return "unexpectedBetweenKeyAndColon"
    case (.dictionaryType, 5):
      return "colon"
    case (.dictionaryType, 6):
      return "unexpectedBetweenColonAndValue"
    case (.dictionaryType, 7):
      return "value"
    case (.dictionaryType, 8):
      return "unexpectedBetweenValueAndRightSquare"
    case (.dictionaryType, 9):
      return "rightSquare"
    case (.dictionaryType, 10):
      return "unexpectedAfterRightSquare"
    case (.differentiabilityArgument, 0):
      return "unexpectedBeforeArgument"
    case (.differentiabilityArgument, 1):
      return "argument"
    case (.differentiabilityArgument, 2):
      return "unexpectedBetweenArgumentAndTrailingComma"
    case (.differentiabilityArgument, 3):
      return "trailingComma"
    case (.differentiabilityArgument, 4):
      return "unexpectedAfterTrailingComma"
    case (.differentiabilityArguments, 0):
      return "unexpectedBeforeLeftParen"
    case (.differentiabilityArguments, 1):
      return "leftParen"
    case (.differentiabilityArguments, 2):
      return "unexpectedBetweenLeftParenAndArguments"
    case (.differentiabilityArguments, 3):
      return "arguments"
    case (.differentiabilityArguments, 4):
      return "unexpectedBetweenArgumentsAndRightParen"
    case (.differentiabilityArguments, 5):
      return "rightParen"
    case (.differentiabilityArguments, 6):
      return "unexpectedAfterRightParen"
    case (.differentiabilityWithRespectToArgument, 0):
      return "unexpectedBeforeWrtLabel"
    case (.differentiabilityWithRespectToArgument, 1):
      return "wrtLabel"
    case (.differentiabilityWithRespectToArgument, 2):
      return "unexpectedBetweenWrtLabelAndColon"
    case (.differentiabilityWithRespectToArgument, 3):
      return "colon"
    case (.differentiabilityWithRespectToArgument, 4):
      return "unexpectedBetweenColonAndArguments"
    case (.differentiabilityWithRespectToArgument, 5):
      return "arguments"
    case (.differentiabilityWithRespectToArgument, 6):
      return "unexpectedAfterArguments"
    case (.differentiableAttributeArguments, 0):
      return "unexpectedBeforeKindSpecifier"
    case (.differentiableAttributeArguments, 1):
      return "kindSpecifier"
    case (.differentiableAttributeArguments, 2):
      return "unexpectedBetweenKindSpecifierAndKindSpecifierComma"
    case (.differentiableAttributeArguments, 3):
      return "kindSpecifierComma"
    case (.differentiableAttributeArguments, 4):
      return "unexpectedBetweenKindSpecifierCommaAndArguments"
    case (.differentiableAttributeArguments, 5):
      return "arguments"
    case (.differentiableAttributeArguments, 6):
      return "unexpectedBetweenArgumentsAndArgumentsComma"
    case (.differentiableAttributeArguments, 7):
      return "argumentsComma"
    case (.differentiableAttributeArguments, 8):
      return "unexpectedBetweenArgumentsCommaAndGenericWhereClause"
    case (.differentiableAttributeArguments, 9):
      return "genericWhereClause"
    case (.differentiableAttributeArguments, 10):
      return "unexpectedAfterGenericWhereClause"
    case (.discardAssignmentExpr, 0):
      return "unexpectedBeforeWildcard"
    case (.discardAssignmentExpr, 1):
      return "wildcard"
    case (.discardAssignmentExpr, 2):
      return "unexpectedAfterWildcard"
    case (.discardStmt, 0):
      return "unexpectedBeforeDiscardKeyword"
    case (.discardStmt, 1):
      return "discardKeyword"
    case (.discardStmt, 2):
      return "unexpectedBetweenDiscardKeywordAndExpression"
    case (.discardStmt, 3):
      return "expression"
    case (.discardStmt, 4):
      return "unexpectedAfterExpression"
    case (.doExpr, 0):
      return "unexpectedBeforeDoKeyword"
    case (.doExpr, 1):
      return "doKeyword"
    case (.doExpr, 2):
      return "unexpectedBetweenDoKeywordAndBody"
    case (.doExpr, 3):
      return "body"
    case (.doExpr, 4):
      return "unexpectedBetweenBodyAndCatchClauses"
    case (.doExpr, 5):
      return "catchClauses"
    case (.doExpr, 6):
      return "unexpectedAfterCatchClauses"
    case (.doStmt, 0):
      return "unexpectedBeforeDoKeyword"
    case (.doStmt, 1):
      return "doKeyword"
    case (.doStmt, 2):
      return "unexpectedBetweenDoKeywordAndThrowsClause"
    case (.doStmt, 3):
      return "throwsClause"
    case (.doStmt, 4):
      return "unexpectedBetweenThrowsClauseAndBody"
    case (.doStmt, 5):
      return "body"
    case (.doStmt, 6):
      return "unexpectedBetweenBodyAndCatchClauses"
    case (.doStmt, 7):
      return "catchClauses"
    case (.doStmt, 8):
      return "unexpectedAfterCatchClauses"
    case (.documentationAttributeArgument, 0):
      return "unexpectedBeforeLabel"
    case (.documentationAttributeArgument, 1):
      return "label"
    case (.documentationAttributeArgument, 2):
      return "unexpectedBetweenLabelAndColon"
    case (.documentationAttributeArgument, 3):
      return "colon"
    case (.documentationAttributeArgument, 4):
      return "unexpectedBetweenColonAndValue"
    case (.documentationAttributeArgument, 5):
      return "value"
    case (.documentationAttributeArgument, 6):
      return "unexpectedBetweenValueAndTrailingComma"
    case (.documentationAttributeArgument, 7):
      return "trailingComma"
    case (.documentationAttributeArgument, 8):
      return "unexpectedAfterTrailingComma"
    case (.dynamicReplacementAttributeArguments, 0):
      return "unexpectedBeforeForLabel"
    case (.dynamicReplacementAttributeArguments, 1):
      return "forLabel"
    case (.dynamicReplacementAttributeArguments, 2):
      return "unexpectedBetweenForLabelAndColon"
    case (.dynamicReplacementAttributeArguments, 3):
      return "colon"
    case (.dynamicReplacementAttributeArguments, 4):
      return "unexpectedBetweenColonAndDeclName"
    case (.dynamicReplacementAttributeArguments, 5):
      return "declName"
    case (.dynamicReplacementAttributeArguments, 6):
      return "unexpectedAfterDeclName"
    case (.editorPlaceholderDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.editorPlaceholderDecl, 1):
      return "attributes"
    case (.editorPlaceholderDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.editorPlaceholderDecl, 3):
      return "modifiers"
    case (.editorPlaceholderDecl, 4):
      return "unexpectedBetweenModifiersAndPlaceholder"
    case (.editorPlaceholderDecl, 5):
      return "placeholder"
    case (.editorPlaceholderDecl, 6):
      return "unexpectedAfterPlaceholder"
    case (.editorPlaceholderExpr, 0):
      return "unexpectedBeforePlaceholder"
    case (.editorPlaceholderExpr, 1):
      return "placeholder"
    case (.editorPlaceholderExpr, 2):
      return "unexpectedAfterPlaceholder"
    case (.enumCaseDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.enumCaseDecl, 1):
      return "attributes"
    case (.enumCaseDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.enumCaseDecl, 3):
      return "modifiers"
    case (.enumCaseDecl, 4):
      return "unexpectedBetweenModifiersAndCaseKeyword"
    case (.enumCaseDecl, 5):
      return "caseKeyword"
    case (.enumCaseDecl, 6):
      return "unexpectedBetweenCaseKeywordAndElements"
    case (.enumCaseDecl, 7):
      return "elements"
    case (.enumCaseDecl, 8):
      return "unexpectedAfterElements"
    case (.enumCaseElement, 0):
      return "unexpectedBeforeName"
    case (.enumCaseElement, 1):
      return "name"
    case (.enumCaseElement, 2):
      return "unexpectedBetweenNameAndParameterClause"
    case (.enumCaseElement, 3):
      return "parameterClause"
    case (.enumCaseElement, 4):
      return "unexpectedBetweenParameterClauseAndRawValue"
    case (.enumCaseElement, 5):
      return "rawValue"
    case (.enumCaseElement, 6):
      return "unexpectedBetweenRawValueAndTrailingComma"
    case (.enumCaseElement, 7):
      return "trailingComma"
    case (.enumCaseElement, 8):
      return "unexpectedAfterTrailingComma"
    case (.enumCaseParameterClause, 0):
      return "unexpectedBeforeLeftParen"
    case (.enumCaseParameterClause, 1):
      return "leftParen"
    case (.enumCaseParameterClause, 2):
      return "unexpectedBetweenLeftParenAndParameters"
    case (.enumCaseParameterClause, 3):
      return "parameters"
    case (.enumCaseParameterClause, 4):
      return "unexpectedBetweenParametersAndRightParen"
    case (.enumCaseParameterClause, 5):
      return "rightParen"
    case (.enumCaseParameterClause, 6):
      return "unexpectedAfterRightParen"
    case (.enumCaseParameter, 0):
      return "unexpectedBeforeModifiers"
    case (.enumCaseParameter, 1):
      return "modifiers"
    case (.enumCaseParameter, 2):
      return "unexpectedBetweenModifiersAndFirstName"
    case (.enumCaseParameter, 3):
      return "firstName"
    case (.enumCaseParameter, 4):
      return "unexpectedBetweenFirstNameAndSecondName"
    case (.enumCaseParameter, 5):
      return "secondName"
    case (.enumCaseParameter, 6):
      return "unexpectedBetweenSecondNameAndColon"
    case (.enumCaseParameter, 7):
      return "colon"
    case (.enumCaseParameter, 8):
      return "unexpectedBetweenColonAndType"
    case (.enumCaseParameter, 9):
      return "type"
    case (.enumCaseParameter, 10):
      return "unexpectedBetweenTypeAndDefaultValue"
    case (.enumCaseParameter, 11):
      return "defaultValue"
    case (.enumCaseParameter, 12):
      return "unexpectedBetweenDefaultValueAndTrailingComma"
    case (.enumCaseParameter, 13):
      return "trailingComma"
    case (.enumCaseParameter, 14):
      return "unexpectedAfterTrailingComma"
    case (.enumDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.enumDecl, 1):
      return "attributes"
    case (.enumDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.enumDecl, 3):
      return "modifiers"
    case (.enumDecl, 4):
      return "unexpectedBetweenModifiersAndEnumKeyword"
    case (.enumDecl, 5):
      return "enumKeyword"
    case (.enumDecl, 6):
      return "unexpectedBetweenEnumKeywordAndName"
    case (.enumDecl, 7):
      return "name"
    case (.enumDecl, 8):
      return "unexpectedBetweenNameAndGenericParameterClause"
    case (.enumDecl, 9):
      return "genericParameterClause"
    case (.enumDecl, 10):
      return "unexpectedBetweenGenericParameterClauseAndInheritanceClause"
    case (.enumDecl, 11):
      return "inheritanceClause"
    case (.enumDecl, 12):
      return "unexpectedBetweenInheritanceClauseAndGenericWhereClause"
    case (.enumDecl, 13):
      return "genericWhereClause"
    case (.enumDecl, 14):
      return "unexpectedBetweenGenericWhereClauseAndMemberBlock"
    case (.enumDecl, 15):
      return "memberBlock"
    case (.enumDecl, 16):
      return "unexpectedAfterMemberBlock"
    case (.exposeAttributeArguments, 0):
      return "unexpectedBeforeLanguage"
    case (.exposeAttributeArguments, 1):
      return "language"
    case (.exposeAttributeArguments, 2):
      return "unexpectedBetweenLanguageAndComma"
    case (.exposeAttributeArguments, 3):
      return "comma"
    case (.exposeAttributeArguments, 4):
      return "unexpectedBetweenCommaAndCxxName"
    case (.exposeAttributeArguments, 5):
      return "cxxName"
    case (.exposeAttributeArguments, 6):
      return "unexpectedAfterCxxName"
    case (.expressionPattern, 0):
      return "unexpectedBeforeExpression"
    case (.expressionPattern, 1):
      return "expression"
    case (.expressionPattern, 2):
      return "unexpectedAfterExpression"
    case (.expressionSegment, 0):
      return "unexpectedBeforeBackslash"
    case (.expressionSegment, 1):
      return "backslash"
    case (.expressionSegment, 2):
      return "unexpectedBetweenBackslashAndPounds"
    case (.expressionSegment, 3):
      return "pounds"
    case (.expressionSegment, 4):
      return "unexpectedBetweenPoundsAndLeftParen"
    case (.expressionSegment, 5):
      return "leftParen"
    case (.expressionSegment, 6):
      return "unexpectedBetweenLeftParenAndExpressions"
    case (.expressionSegment, 7):
      return "expressions"
    case (.expressionSegment, 8):
      return "unexpectedBetweenExpressionsAndRightParen"
    case (.expressionSegment, 9):
      return "rightParen"
    case (.expressionSegment, 10):
      return "unexpectedAfterRightParen"
    case (.expressionStmt, 0):
      return "unexpectedBeforeExpression"
    case (.expressionStmt, 1):
      return "expression"
    case (.expressionStmt, 2):
      return "unexpectedAfterExpression"
    case (.extensionDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.extensionDecl, 1):
      return "attributes"
    case (.extensionDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.extensionDecl, 3):
      return "modifiers"
    case (.extensionDecl, 4):
      return "unexpectedBetweenModifiersAndExtensionKeyword"
    case (.extensionDecl, 5):
      return "extensionKeyword"
    case (.extensionDecl, 6):
      return "unexpectedBetweenExtensionKeywordAndExtendedType"
    case (.extensionDecl, 7):
      return "extendedType"
    case (.extensionDecl, 8):
      return "unexpectedBetweenExtendedTypeAndInheritanceClause"
    case (.extensionDecl, 9):
      return "inheritanceClause"
    case (.extensionDecl, 10):
      return "unexpectedBetweenInheritanceClauseAndGenericWhereClause"
    case (.extensionDecl, 11):
      return "genericWhereClause"
    case (.extensionDecl, 12):
      return "unexpectedBetweenGenericWhereClauseAndMemberBlock"
    case (.extensionDecl, 13):
      return "memberBlock"
    case (.extensionDecl, 14):
      return "unexpectedAfterMemberBlock"
    case (.fallThroughStmt, 0):
      return "unexpectedBeforeFallthroughKeyword"
    case (.fallThroughStmt, 1):
      return "fallthroughKeyword"
    case (.fallThroughStmt, 2):
      return "unexpectedAfterFallthroughKeyword"
    case (.floatLiteralExpr, 0):
      return "unexpectedBeforeLiteral"
    case (.floatLiteralExpr, 1):
      return "literal"
    case (.floatLiteralExpr, 2):
      return "unexpectedAfterLiteral"
    case (.forStmt, 0):
      return "unexpectedBeforeForKeyword"
    case (.forStmt, 1):
      return "forKeyword"
    case (.forStmt, 2):
      return "unexpectedBetweenForKeywordAndTryKeyword"
    case (.forStmt, 3):
      return "tryKeyword"
    case (.forStmt, 4):
      return "unexpectedBetweenTryKeywordAndAwaitKeyword"
    case (.forStmt, 5):
      return "awaitKeyword"
    case (.forStmt, 6):
      return "unexpectedBetweenAwaitKeywordAndCaseKeyword"
    case (.forStmt, 7):
      return "caseKeyword"
    case (.forStmt, 8):
      return "unexpectedBetweenCaseKeywordAndPattern"
    case (.forStmt, 9):
      return "pattern"
    case (.forStmt, 10):
      return "unexpectedBetweenPatternAndTypeAnnotation"
    case (.forStmt, 11):
      return "typeAnnotation"
    case (.forStmt, 12):
      return "unexpectedBetweenTypeAnnotationAndInKeyword"
    case (.forStmt, 13):
      return "inKeyword"
    case (.forStmt, 14):
      return "unexpectedBetweenInKeywordAndSequence"
    case (.forStmt, 15):
      return "sequence"
    case (.forStmt, 16):
      return "unexpectedBetweenSequenceAndWhereClause"
    case (.forStmt, 17):
      return "whereClause"
    case (.forStmt, 18):
      return "unexpectedBetweenWhereClauseAndBody"
    case (.forStmt, 19):
      return "body"
    case (.forStmt, 20):
      return "unexpectedAfterBody"
    case (.forceUnwrapExpr, 0):
      return "unexpectedBeforeExpression"
    case (.forceUnwrapExpr, 1):
      return "expression"
    case (.forceUnwrapExpr, 2):
      return "unexpectedBetweenExpressionAndExclamationMark"
    case (.forceUnwrapExpr, 3):
      return "exclamationMark"
    case (.forceUnwrapExpr, 4):
      return "unexpectedAfterExclamationMark"
    case (.functionCallExpr, 0):
      return "unexpectedBeforeCalledExpression"
    case (.functionCallExpr, 1):
      return "calledExpression"
    case (.functionCallExpr, 2):
      return "unexpectedBetweenCalledExpressionAndLeftParen"
    case (.functionCallExpr, 3):
      return "leftParen"
    case (.functionCallExpr, 4):
      return "unexpectedBetweenLeftParenAndArguments"
    case (.functionCallExpr, 5):
      return "arguments"
    case (.functionCallExpr, 6):
      return "unexpectedBetweenArgumentsAndRightParen"
    case (.functionCallExpr, 7):
      return "rightParen"
    case (.functionCallExpr, 8):
      return "unexpectedBetweenRightParenAndTrailingClosure"
    case (.functionCallExpr, 9):
      return "trailingClosure"
    case (.functionCallExpr, 10):
      return "unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures"
    case (.functionCallExpr, 11):
      return "additionalTrailingClosures"
    case (.functionCallExpr, 12):
      return "unexpectedAfterAdditionalTrailingClosures"
    case (.functionDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.functionDecl, 1):
      return "attributes"
    case (.functionDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.functionDecl, 3):
      return "modifiers"
    case (.functionDecl, 4):
      return "unexpectedBetweenModifiersAndFuncKeyword"
    case (.functionDecl, 5):
      return "funcKeyword"
    case (.functionDecl, 6):
      return "unexpectedBetweenFuncKeywordAndName"
    case (.functionDecl, 7):
      return "name"
    case (.functionDecl, 8):
      return "unexpectedBetweenNameAndGenericParameterClause"
    case (.functionDecl, 9):
      return "genericParameterClause"
    case (.functionDecl, 10):
      return "unexpectedBetweenGenericParameterClauseAndSignature"
    case (.functionDecl, 11):
      return "signature"
    case (.functionDecl, 12):
      return "unexpectedBetweenSignatureAndGenericWhereClause"
    case (.functionDecl, 13):
      return "genericWhereClause"
    case (.functionDecl, 14):
      return "unexpectedBetweenGenericWhereClauseAndBody"
    case (.functionDecl, 15):
      return "body"
    case (.functionDecl, 16):
      return "unexpectedAfterBody"
    case (.functionEffectSpecifiers, 0):
      return "unexpectedBeforeAsyncSpecifier"
    case (.functionEffectSpecifiers, 1):
      return "asyncSpecifier"
    case (.functionEffectSpecifiers, 2):
      return "unexpectedBetweenAsyncSpecifierAndThrowsClause"
    case (.functionEffectSpecifiers, 3):
      return "throwsClause"
    case (.functionEffectSpecifiers, 4):
      return "unexpectedAfterThrowsClause"
    case (.functionParameterClause, 0):
      return "unexpectedBeforeLeftParen"
    case (.functionParameterClause, 1):
      return "leftParen"
    case (.functionParameterClause, 2):
      return "unexpectedBetweenLeftParenAndParameters"
    case (.functionParameterClause, 3):
      return "parameters"
    case (.functionParameterClause, 4):
      return "unexpectedBetweenParametersAndRightParen"
    case (.functionParameterClause, 5):
      return "rightParen"
    case (.functionParameterClause, 6):
      return "unexpectedAfterRightParen"
    case (.functionParameter, 0):
      return "unexpectedBeforeAttributes"
    case (.functionParameter, 1):
      return "attributes"
    case (.functionParameter, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.functionParameter, 3):
      return "modifiers"
    case (.functionParameter, 4):
      return "unexpectedBetweenModifiersAndFirstName"
    case (.functionParameter, 5):
      return "firstName"
    case (.functionParameter, 6):
      return "unexpectedBetweenFirstNameAndSecondName"
    case (.functionParameter, 7):
      return "secondName"
    case (.functionParameter, 8):
      return "unexpectedBetweenSecondNameAndColon"
    case (.functionParameter, 9):
      return "colon"
    case (.functionParameter, 10):
      return "unexpectedBetweenColonAndType"
    case (.functionParameter, 11):
      return "type"
    case (.functionParameter, 12):
      return "unexpectedBetweenTypeAndEllipsis"
    case (.functionParameter, 13):
      return "ellipsis"
    case (.functionParameter, 14):
      return "unexpectedBetweenEllipsisAndDefaultValue"
    case (.functionParameter, 15):
      return "defaultValue"
    case (.functionParameter, 16):
      return "unexpectedBetweenDefaultValueAndTrailingComma"
    case (.functionParameter, 17):
      return "trailingComma"
    case (.functionParameter, 18):
      return "unexpectedAfterTrailingComma"
    case (.functionSignature, 0):
      return "unexpectedBeforeParameterClause"
    case (.functionSignature, 1):
      return "parameterClause"
    case (.functionSignature, 2):
      return "unexpectedBetweenParameterClauseAndEffectSpecifiers"
    case (.functionSignature, 3):
      return "effectSpecifiers"
    case (.functionSignature, 4):
      return "unexpectedBetweenEffectSpecifiersAndReturnClause"
    case (.functionSignature, 5):
      return "returnClause"
    case (.functionSignature, 6):
      return "unexpectedAfterReturnClause"
    case (.functionType, 0):
      return "unexpectedBeforeLeftParen"
    case (.functionType, 1):
      return "leftParen"
    case (.functionType, 2):
      return "unexpectedBetweenLeftParenAndParameters"
    case (.functionType, 3):
      return "parameters"
    case (.functionType, 4):
      return "unexpectedBetweenParametersAndRightParen"
    case (.functionType, 5):
      return "rightParen"
    case (.functionType, 6):
      return "unexpectedBetweenRightParenAndEffectSpecifiers"
    case (.functionType, 7):
      return "effectSpecifiers"
    case (.functionType, 8):
      return "unexpectedBetweenEffectSpecifiersAndReturnClause"
    case (.functionType, 9):
      return "returnClause"
    case (.functionType, 10):
      return "unexpectedAfterReturnClause"
    case (.genericArgumentClause, 0):
      return "unexpectedBeforeLeftAngle"
    case (.genericArgumentClause, 1):
      return "leftAngle"
    case (.genericArgumentClause, 2):
      return "unexpectedBetweenLeftAngleAndArguments"
    case (.genericArgumentClause, 3):
      return "arguments"
    case (.genericArgumentClause, 4):
      return "unexpectedBetweenArgumentsAndRightAngle"
    case (.genericArgumentClause, 5):
      return "rightAngle"
    case (.genericArgumentClause, 6):
      return "unexpectedAfterRightAngle"
    case (.genericArgument, 0):
      return "unexpectedBeforeArgument"
    case (.genericArgument, 1):
      return "argument"
    case (.genericArgument, 2):
      return "unexpectedBetweenArgumentAndTrailingComma"
    case (.genericArgument, 3):
      return "trailingComma"
    case (.genericArgument, 4):
      return "unexpectedAfterTrailingComma"
    case (.genericParameterClause, 0):
      return "unexpectedBeforeLeftAngle"
    case (.genericParameterClause, 1):
      return "leftAngle"
    case (.genericParameterClause, 2):
      return "unexpectedBetweenLeftAngleAndParameters"
    case (.genericParameterClause, 3):
      return "parameters"
    case (.genericParameterClause, 4):
      return "unexpectedBetweenParametersAndGenericWhereClause"
    case (.genericParameterClause, 5):
      return "genericWhereClause"
    case (.genericParameterClause, 6):
      return "unexpectedBetweenGenericWhereClauseAndRightAngle"
    case (.genericParameterClause, 7):
      return "rightAngle"
    case (.genericParameterClause, 8):
      return "unexpectedAfterRightAngle"
    case (.genericParameter, 0):
      return "unexpectedBeforeAttributes"
    case (.genericParameter, 1):
      return "attributes"
    case (.genericParameter, 2):
      return "unexpectedBetweenAttributesAndSpecifier"
    case (.genericParameter, 3):
      return "specifier"
    case (.genericParameter, 4):
      return "unexpectedBetweenSpecifierAndName"
    case (.genericParameter, 5):
      return "name"
    case (.genericParameter, 6):
      return "unexpectedBetweenNameAndColon"
    case (.genericParameter, 7):
      return "colon"
    case (.genericParameter, 8):
      return "unexpectedBetweenColonAndInheritedType"
    case (.genericParameter, 9):
      return "inheritedType"
    case (.genericParameter, 10):
      return "unexpectedBetweenInheritedTypeAndTrailingComma"
    case (.genericParameter, 11):
      return "trailingComma"
    case (.genericParameter, 12):
      return "unexpectedAfterTrailingComma"
    case (.genericRequirement, 0):
      return "unexpectedBeforeRequirement"
    case (.genericRequirement, 1):
      return "requirement"
    case (.genericRequirement, 2):
      return "unexpectedBetweenRequirementAndTrailingComma"
    case (.genericRequirement, 3):
      return "trailingComma"
    case (.genericRequirement, 4):
      return "unexpectedAfterTrailingComma"
    case (.genericSpecializationExpr, 0):
      return "unexpectedBeforeExpression"
    case (.genericSpecializationExpr, 1):
      return "expression"
    case (.genericSpecializationExpr, 2):
      return "unexpectedBetweenExpressionAndGenericArgumentClause"
    case (.genericSpecializationExpr, 3):
      return "genericArgumentClause"
    case (.genericSpecializationExpr, 4):
      return "unexpectedAfterGenericArgumentClause"
    case (.genericWhereClause, 0):
      return "unexpectedBeforeWhereKeyword"
    case (.genericWhereClause, 1):
      return "whereKeyword"
    case (.genericWhereClause, 2):
      return "unexpectedBetweenWhereKeywordAndRequirements"
    case (.genericWhereClause, 3):
      return "requirements"
    case (.genericWhereClause, 4):
      return "unexpectedAfterRequirements"
    case (.guardStmt, 0):
      return "unexpectedBeforeGuardKeyword"
    case (.guardStmt, 1):
      return "guardKeyword"
    case (.guardStmt, 2):
      return "unexpectedBetweenGuardKeywordAndConditions"
    case (.guardStmt, 3):
      return "conditions"
    case (.guardStmt, 4):
      return "unexpectedBetweenConditionsAndElseKeyword"
    case (.guardStmt, 5):
      return "elseKeyword"
    case (.guardStmt, 6):
      return "unexpectedBetweenElseKeywordAndBody"
    case (.guardStmt, 7):
      return "body"
    case (.guardStmt, 8):
      return "unexpectedAfterBody"
    case (.identifierPattern, 0):
      return "unexpectedBeforeIdentifier"
    case (.identifierPattern, 1):
      return "identifier"
    case (.identifierPattern, 2):
      return "unexpectedAfterIdentifier"
    case (.identifierType, 0):
      return "unexpectedBeforeName"
    case (.identifierType, 1):
      return "name"
    case (.identifierType, 2):
      return "unexpectedBetweenNameAndGenericArgumentClause"
    case (.identifierType, 3):
      return "genericArgumentClause"
    case (.identifierType, 4):
      return "unexpectedAfterGenericArgumentClause"
    case (.ifConfigClause, 0):
      return "unexpectedBeforePoundKeyword"
    case (.ifConfigClause, 1):
      return "poundKeyword"
    case (.ifConfigClause, 2):
      return "unexpectedBetweenPoundKeywordAndCondition"
    case (.ifConfigClause, 3):
      return "condition"
    case (.ifConfigClause, 4):
      return "unexpectedBetweenConditionAndElements"
    case (.ifConfigClause, 5):
      return "elements"
    case (.ifConfigClause, 6):
      return "unexpectedAfterElements"
    case (.ifConfigDecl, 0):
      return "unexpectedBeforeClauses"
    case (.ifConfigDecl, 1):
      return "clauses"
    case (.ifConfigDecl, 2):
      return "unexpectedBetweenClausesAndPoundEndif"
    case (.ifConfigDecl, 3):
      return "poundEndif"
    case (.ifConfigDecl, 4):
      return "unexpectedAfterPoundEndif"
    case (.ifExpr, 0):
      return "unexpectedBeforeIfKeyword"
    case (.ifExpr, 1):
      return "ifKeyword"
    case (.ifExpr, 2):
      return "unexpectedBetweenIfKeywordAndConditions"
    case (.ifExpr, 3):
      return "conditions"
    case (.ifExpr, 4):
      return "unexpectedBetweenConditionsAndBody"
    case (.ifExpr, 5):
      return "body"
    case (.ifExpr, 6):
      return "unexpectedBetweenBodyAndElseKeyword"
    case (.ifExpr, 7):
      return "elseKeyword"
    case (.ifExpr, 8):
      return "unexpectedBetweenElseKeywordAndElseBody"
    case (.ifExpr, 9):
      return "elseBody"
    case (.ifExpr, 10):
      return "unexpectedAfterElseBody"
    case (.implementsAttributeArguments, 0):
      return "unexpectedBeforeType"
    case (.implementsAttributeArguments, 1):
      return "type"
    case (.implementsAttributeArguments, 2):
      return "unexpectedBetweenTypeAndComma"
    case (.implementsAttributeArguments, 3):
      return "comma"
    case (.implementsAttributeArguments, 4):
      return "unexpectedBetweenCommaAndDeclName"
    case (.implementsAttributeArguments, 5):
      return "declName"
    case (.implementsAttributeArguments, 6):
      return "unexpectedAfterDeclName"
    case (.implicitlyUnwrappedOptionalType, 0):
      return "unexpectedBeforeWrappedType"
    case (.implicitlyUnwrappedOptionalType, 1):
      return "wrappedType"
    case (.implicitlyUnwrappedOptionalType, 2):
      return "unexpectedBetweenWrappedTypeAndExclamationMark"
    case (.implicitlyUnwrappedOptionalType, 3):
      return "exclamationMark"
    case (.implicitlyUnwrappedOptionalType, 4):
      return "unexpectedAfterExclamationMark"
    case (.importDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.importDecl, 1):
      return "attributes"
    case (.importDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.importDecl, 3):
      return "modifiers"
    case (.importDecl, 4):
      return "unexpectedBetweenModifiersAndImportKeyword"
    case (.importDecl, 5):
      return "importKeyword"
    case (.importDecl, 6):
      return "unexpectedBetweenImportKeywordAndImportKindSpecifier"
    case (.importDecl, 7):
      return "importKindSpecifier"
    case (.importDecl, 8):
      return "unexpectedBetweenImportKindSpecifierAndPath"
    case (.importDecl, 9):
      return "path"
    case (.importDecl, 10):
      return "unexpectedAfterPath"
    case (.importPathComponent, 0):
      return "unexpectedBeforeName"
    case (.importPathComponent, 1):
      return "name"
    case (.importPathComponent, 2):
      return "unexpectedBetweenNameAndTrailingPeriod"
    case (.importPathComponent, 3):
      return "trailingPeriod"
    case (.importPathComponent, 4):
      return "unexpectedAfterTrailingPeriod"
    case (.inOutExpr, 0):
      return "unexpectedBeforeAmpersand"
    case (.inOutExpr, 1):
      return "ampersand"
    case (.inOutExpr, 2):
      return "unexpectedBetweenAmpersandAndExpression"
    case (.inOutExpr, 3):
      return "expression"
    case (.inOutExpr, 4):
      return "unexpectedAfterExpression"
    case (.infixOperatorExpr, 0):
      return "unexpectedBeforeLeftOperand"
    case (.infixOperatorExpr, 1):
      return "leftOperand"
    case (.infixOperatorExpr, 2):
      return "unexpectedBetweenLeftOperandAndOperator"
    case (.infixOperatorExpr, 3):
      return "operator"
    case (.infixOperatorExpr, 4):
      return "unexpectedBetweenOperatorAndRightOperand"
    case (.infixOperatorExpr, 5):
      return "rightOperand"
    case (.infixOperatorExpr, 6):
      return "unexpectedAfterRightOperand"
    case (.inheritanceClause, 0):
      return "unexpectedBeforeColon"
    case (.inheritanceClause, 1):
      return "colon"
    case (.inheritanceClause, 2):
      return "unexpectedBetweenColonAndInheritedTypes"
    case (.inheritanceClause, 3):
      return "inheritedTypes"
    case (.inheritanceClause, 4):
      return "unexpectedAfterInheritedTypes"
    case (.inheritedType, 0):
      return "unexpectedBeforeType"
    case (.inheritedType, 1):
      return "type"
    case (.inheritedType, 2):
      return "unexpectedBetweenTypeAndTrailingComma"
    case (.inheritedType, 3):
      return "trailingComma"
    case (.inheritedType, 4):
      return "unexpectedAfterTrailingComma"
    case (.initializerClause, 0):
      return "unexpectedBeforeEqual"
    case (.initializerClause, 1):
      return "equal"
    case (.initializerClause, 2):
      return "unexpectedBetweenEqualAndValue"
    case (.initializerClause, 3):
      return "value"
    case (.initializerClause, 4):
      return "unexpectedAfterValue"
    case (.initializerDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.initializerDecl, 1):
      return "attributes"
    case (.initializerDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.initializerDecl, 3):
      return "modifiers"
    case (.initializerDecl, 4):
      return "unexpectedBetweenModifiersAndInitKeyword"
    case (.initializerDecl, 5):
      return "initKeyword"
    case (.initializerDecl, 6):
      return "unexpectedBetweenInitKeywordAndOptionalMark"
    case (.initializerDecl, 7):
      return "optionalMark"
    case (.initializerDecl, 8):
      return "unexpectedBetweenOptionalMarkAndGenericParameterClause"
    case (.initializerDecl, 9):
      return "genericParameterClause"
    case (.initializerDecl, 10):
      return "unexpectedBetweenGenericParameterClauseAndSignature"
    case (.initializerDecl, 11):
      return "signature"
    case (.initializerDecl, 12):
      return "unexpectedBetweenSignatureAndGenericWhereClause"
    case (.initializerDecl, 13):
      return "genericWhereClause"
    case (.initializerDecl, 14):
      return "unexpectedBetweenGenericWhereClauseAndBody"
    case (.initializerDecl, 15):
      return "body"
    case (.initializerDecl, 16):
      return "unexpectedAfterBody"
    case (.integerLiteralExpr, 0):
      return "unexpectedBeforeLiteral"
    case (.integerLiteralExpr, 1):
      return "literal"
    case (.integerLiteralExpr, 2):
      return "unexpectedAfterLiteral"
    case (.isExpr, 0):
      return "unexpectedBeforeExpression"
    case (.isExpr, 1):
      return "expression"
    case (.isExpr, 2):
      return "unexpectedBetweenExpressionAndIsKeyword"
    case (.isExpr, 3):
      return "isKeyword"
    case (.isExpr, 4):
      return "unexpectedBetweenIsKeywordAndType"
    case (.isExpr, 5):
      return "type"
    case (.isExpr, 6):
      return "unexpectedAfterType"
    case (.isTypePattern, 0):
      return "unexpectedBeforeIsKeyword"
    case (.isTypePattern, 1):
      return "isKeyword"
    case (.isTypePattern, 2):
      return "unexpectedBetweenIsKeywordAndType"
    case (.isTypePattern, 3):
      return "type"
    case (.isTypePattern, 4):
      return "unexpectedAfterType"
    case (.keyPathComponent, 0):
      return "unexpectedBeforePeriod"
    case (.keyPathComponent, 1):
      return "period"
    case (.keyPathComponent, 2):
      return "unexpectedBetweenPeriodAndComponent"
    case (.keyPathComponent, 3):
      return "component"
    case (.keyPathComponent, 4):
      return "unexpectedAfterComponent"
    case (.keyPathExpr, 0):
      return "unexpectedBeforeBackslash"
    case (.keyPathExpr, 1):
      return "backslash"
    case (.keyPathExpr, 2):
      return "unexpectedBetweenBackslashAndRoot"
    case (.keyPathExpr, 3):
      return "root"
    case (.keyPathExpr, 4):
      return "unexpectedBetweenRootAndComponents"
    case (.keyPathExpr, 5):
      return "components"
    case (.keyPathExpr, 6):
      return "unexpectedAfterComponents"
    case (.keyPathOptionalComponent, 0):
      return "unexpectedBeforeQuestionOrExclamationMark"
    case (.keyPathOptionalComponent, 1):
      return "questionOrExclamationMark"
    case (.keyPathOptionalComponent, 2):
      return "unexpectedAfterQuestionOrExclamationMark"
    case (.keyPathPropertyComponent, 0):
      return "unexpectedBeforeDeclName"
    case (.keyPathPropertyComponent, 1):
      return "declName"
    case (.keyPathPropertyComponent, 2):
      return "unexpectedBetweenDeclNameAndGenericArgumentClause"
    case (.keyPathPropertyComponent, 3):
      return "genericArgumentClause"
    case (.keyPathPropertyComponent, 4):
      return "unexpectedAfterGenericArgumentClause"
    case (.keyPathSubscriptComponent, 0):
      return "unexpectedBeforeLeftSquare"
    case (.keyPathSubscriptComponent, 1):
      return "leftSquare"
    case (.keyPathSubscriptComponent, 2):
      return "unexpectedBetweenLeftSquareAndArguments"
    case (.keyPathSubscriptComponent, 3):
      return "arguments"
    case (.keyPathSubscriptComponent, 4):
      return "unexpectedBetweenArgumentsAndRightSquare"
    case (.keyPathSubscriptComponent, 5):
      return "rightSquare"
    case (.keyPathSubscriptComponent, 6):
      return "unexpectedAfterRightSquare"
    case (.labeledExpr, 0):
      return "unexpectedBeforeLabel"
    case (.labeledExpr, 1):
      return "label"
    case (.labeledExpr, 2):
      return "unexpectedBetweenLabelAndColon"
    case (.labeledExpr, 3):
      return "colon"
    case (.labeledExpr, 4):
      return "unexpectedBetweenColonAndExpression"
    case (.labeledExpr, 5):
      return "expression"
    case (.labeledExpr, 6):
      return "unexpectedBetweenExpressionAndTrailingComma"
    case (.labeledExpr, 7):
      return "trailingComma"
    case (.labeledExpr, 8):
      return "unexpectedAfterTrailingComma"
    case (.labeledSpecializeArgument, 0):
      return "unexpectedBeforeLabel"
    case (.labeledSpecializeArgument, 1):
      return "label"
    case (.labeledSpecializeArgument, 2):
      return "unexpectedBetweenLabelAndColon"
    case (.labeledSpecializeArgument, 3):
      return "colon"
    case (.labeledSpecializeArgument, 4):
      return "unexpectedBetweenColonAndValue"
    case (.labeledSpecializeArgument, 5):
      return "value"
    case (.labeledSpecializeArgument, 6):
      return "unexpectedBetweenValueAndTrailingComma"
    case (.labeledSpecializeArgument, 7):
      return "trailingComma"
    case (.labeledSpecializeArgument, 8):
      return "unexpectedAfterTrailingComma"
    case (.labeledStmt, 0):
      return "unexpectedBeforeLabel"
    case (.labeledStmt, 1):
      return "label"
    case (.labeledStmt, 2):
      return "unexpectedBetweenLabelAndColon"
    case (.labeledStmt, 3):
      return "colon"
    case (.labeledStmt, 4):
      return "unexpectedBetweenColonAndStatement"
    case (.labeledStmt, 5):
      return "statement"
    case (.labeledStmt, 6):
      return "unexpectedAfterStatement"
    case (.layoutRequirement, 0):
      return "unexpectedBeforeType"
    case (.layoutRequirement, 1):
      return "type"
    case (.layoutRequirement, 2):
      return "unexpectedBetweenTypeAndColon"
    case (.layoutRequirement, 3):
      return "colon"
    case (.layoutRequirement, 4):
      return "unexpectedBetweenColonAndLayoutSpecifier"
    case (.layoutRequirement, 5):
      return "layoutSpecifier"
    case (.layoutRequirement, 6):
      return "unexpectedBetweenLayoutSpecifierAndLeftParen"
    case (.layoutRequirement, 7):
      return "leftParen"
    case (.layoutRequirement, 8):
      return "unexpectedBetweenLeftParenAndSize"
    case (.layoutRequirement, 9):
      return "size"
    case (.layoutRequirement, 10):
      return "unexpectedBetweenSizeAndComma"
    case (.layoutRequirement, 11):
      return "comma"
    case (.layoutRequirement, 12):
      return "unexpectedBetweenCommaAndAlignment"
    case (.layoutRequirement, 13):
      return "alignment"
    case (.layoutRequirement, 14):
      return "unexpectedBetweenAlignmentAndRightParen"
    case (.layoutRequirement, 15):
      return "rightParen"
    case (.layoutRequirement, 16):
      return "unexpectedAfterRightParen"
    case (.lifetimeSpecifierArgument, 0):
      return "unexpectedBeforeParameter"
    case (.lifetimeSpecifierArgument, 1):
      return "parameter"
    case (.lifetimeSpecifierArgument, 2):
      return "unexpectedBetweenParameterAndTrailingComma"
    case (.lifetimeSpecifierArgument, 3):
      return "trailingComma"
    case (.lifetimeSpecifierArgument, 4):
      return "unexpectedAfterTrailingComma"
    case (.lifetimeTypeSpecifier, 0):
      return "unexpectedBeforeDependsOnKeyword"
    case (.lifetimeTypeSpecifier, 1):
      return "dependsOnKeyword"
    case (.lifetimeTypeSpecifier, 2):
      return "unexpectedBetweenDependsOnKeywordAndLeftParen"
    case (.lifetimeTypeSpecifier, 3):
      return "leftParen"
    case (.lifetimeTypeSpecifier, 4):
      return "unexpectedBetweenLeftParenAndScopedKeyword"
    case (.lifetimeTypeSpecifier, 5):
      return "scopedKeyword"
    case (.lifetimeTypeSpecifier, 6):
      return "unexpectedBetweenScopedKeywordAndArguments"
    case (.lifetimeTypeSpecifier, 7):
      return "arguments"
    case (.lifetimeTypeSpecifier, 8):
      return "unexpectedBetweenArgumentsAndRightParen"
    case (.lifetimeTypeSpecifier, 9):
      return "rightParen"
    case (.lifetimeTypeSpecifier, 10):
      return "unexpectedAfterRightParen"
    case (.macroDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.macroDecl, 1):
      return "attributes"
    case (.macroDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.macroDecl, 3):
      return "modifiers"
    case (.macroDecl, 4):
      return "unexpectedBetweenModifiersAndMacroKeyword"
    case (.macroDecl, 5):
      return "macroKeyword"
    case (.macroDecl, 6):
      return "unexpectedBetweenMacroKeywordAndName"
    case (.macroDecl, 7):
      return "name"
    case (.macroDecl, 8):
      return "unexpectedBetweenNameAndGenericParameterClause"
    case (.macroDecl, 9):
      return "genericParameterClause"
    case (.macroDecl, 10):
      return "unexpectedBetweenGenericParameterClauseAndSignature"
    case (.macroDecl, 11):
      return "signature"
    case (.macroDecl, 12):
      return "unexpectedBetweenSignatureAndDefinition"
    case (.macroDecl, 13):
      return "definition"
    case (.macroDecl, 14):
      return "unexpectedBetweenDefinitionAndGenericWhereClause"
    case (.macroDecl, 15):
      return "genericWhereClause"
    case (.macroDecl, 16):
      return "unexpectedAfterGenericWhereClause"
    case (.macroExpansionDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.macroExpansionDecl, 1):
      return "attributes"
    case (.macroExpansionDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.macroExpansionDecl, 3):
      return "modifiers"
    case (.macroExpansionDecl, 4):
      return "unexpectedBetweenModifiersAndPound"
    case (.macroExpansionDecl, 5):
      return "pound"
    case (.macroExpansionDecl, 6):
      return "unexpectedBetweenPoundAndMacroName"
    case (.macroExpansionDecl, 7):
      return "macroName"
    case (.macroExpansionDecl, 8):
      return "unexpectedBetweenMacroNameAndGenericArgumentClause"
    case (.macroExpansionDecl, 9):
      return "genericArgumentClause"
    case (.macroExpansionDecl, 10):
      return "unexpectedBetweenGenericArgumentClauseAndLeftParen"
    case (.macroExpansionDecl, 11):
      return "leftParen"
    case (.macroExpansionDecl, 12):
      return "unexpectedBetweenLeftParenAndArguments"
    case (.macroExpansionDecl, 13):
      return "arguments"
    case (.macroExpansionDecl, 14):
      return "unexpectedBetweenArgumentsAndRightParen"
    case (.macroExpansionDecl, 15):
      return "rightParen"
    case (.macroExpansionDecl, 16):
      return "unexpectedBetweenRightParenAndTrailingClosure"
    case (.macroExpansionDecl, 17):
      return "trailingClosure"
    case (.macroExpansionDecl, 18):
      return "unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures"
    case (.macroExpansionDecl, 19):
      return "additionalTrailingClosures"
    case (.macroExpansionDecl, 20):
      return "unexpectedAfterAdditionalTrailingClosures"
    case (.macroExpansionExpr, 0):
      return "unexpectedBeforePound"
    case (.macroExpansionExpr, 1):
      return "pound"
    case (.macroExpansionExpr, 2):
      return "unexpectedBetweenPoundAndMacroName"
    case (.macroExpansionExpr, 3):
      return "macroName"
    case (.macroExpansionExpr, 4):
      return "unexpectedBetweenMacroNameAndGenericArgumentClause"
    case (.macroExpansionExpr, 5):
      return "genericArgumentClause"
    case (.macroExpansionExpr, 6):
      return "unexpectedBetweenGenericArgumentClauseAndLeftParen"
    case (.macroExpansionExpr, 7):
      return "leftParen"
    case (.macroExpansionExpr, 8):
      return "unexpectedBetweenLeftParenAndArguments"
    case (.macroExpansionExpr, 9):
      return "arguments"
    case (.macroExpansionExpr, 10):
      return "unexpectedBetweenArgumentsAndRightParen"
    case (.macroExpansionExpr, 11):
      return "rightParen"
    case (.macroExpansionExpr, 12):
      return "unexpectedBetweenRightParenAndTrailingClosure"
    case (.macroExpansionExpr, 13):
      return "trailingClosure"
    case (.macroExpansionExpr, 14):
      return "unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures"
    case (.macroExpansionExpr, 15):
      return "additionalTrailingClosures"
    case (.macroExpansionExpr, 16):
      return "unexpectedAfterAdditionalTrailingClosures"
    case (.matchingPatternCondition, 0):
      return "unexpectedBeforeCaseKeyword"
    case (.matchingPatternCondition, 1):
      return "caseKeyword"
    case (.matchingPatternCondition, 2):
      return "unexpectedBetweenCaseKeywordAndPattern"
    case (.matchingPatternCondition, 3):
      return "pattern"
    case (.matchingPatternCondition, 4):
      return "unexpectedBetweenPatternAndTypeAnnotation"
    case (.matchingPatternCondition, 5):
      return "typeAnnotation"
    case (.matchingPatternCondition, 6):
      return "unexpectedBetweenTypeAnnotationAndInitializer"
    case (.matchingPatternCondition, 7):
      return "initializer"
    case (.matchingPatternCondition, 8):
      return "unexpectedAfterInitializer"
    case (.memberAccessExpr, 0):
      return "unexpectedBeforeBase"
    case (.memberAccessExpr, 1):
      return "base"
    case (.memberAccessExpr, 2):
      return "unexpectedBetweenBaseAndPeriod"
    case (.memberAccessExpr, 3):
      return "period"
    case (.memberAccessExpr, 4):
      return "unexpectedBetweenPeriodAndDeclName"
    case (.memberAccessExpr, 5):
      return "declName"
    case (.memberAccessExpr, 6):
      return "unexpectedAfterDeclName"
    case (.memberBlockItem, 0):
      return "unexpectedBeforeDecl"
    case (.memberBlockItem, 1):
      return "decl"
    case (.memberBlockItem, 2):
      return "unexpectedBetweenDeclAndSemicolon"
    case (.memberBlockItem, 3):
      return "semicolon"
    case (.memberBlockItem, 4):
      return "unexpectedAfterSemicolon"
    case (.memberBlock, 0):
      return "unexpectedBeforeLeftBrace"
    case (.memberBlock, 1):
      return "leftBrace"
    case (.memberBlock, 2):
      return "unexpectedBetweenLeftBraceAndMembers"
    case (.memberBlock, 3):
      return "members"
    case (.memberBlock, 4):
      return "unexpectedBetweenMembersAndRightBrace"
    case (.memberBlock, 5):
      return "rightBrace"
    case (.memberBlock, 6):
      return "unexpectedAfterRightBrace"
    case (.memberType, 0):
      return "unexpectedBeforeBaseType"
    case (.memberType, 1):
      return "baseType"
    case (.memberType, 2):
      return "unexpectedBetweenBaseTypeAndPeriod"
    case (.memberType, 3):
      return "period"
    case (.memberType, 4):
      return "unexpectedBetweenPeriodAndName"
    case (.memberType, 5):
      return "name"
    case (.memberType, 6):
      return "unexpectedBetweenNameAndGenericArgumentClause"
    case (.memberType, 7):
      return "genericArgumentClause"
    case (.memberType, 8):
      return "unexpectedAfterGenericArgumentClause"
    case (.metatypeType, 0):
      return "unexpectedBeforeBaseType"
    case (.metatypeType, 1):
      return "baseType"
    case (.metatypeType, 2):
      return "unexpectedBetweenBaseTypeAndPeriod"
    case (.metatypeType, 3):
      return "period"
    case (.metatypeType, 4):
      return "unexpectedBetweenPeriodAndMetatypeSpecifier"
    case (.metatypeType, 5):
      return "metatypeSpecifier"
    case (.metatypeType, 6):
      return "unexpectedAfterMetatypeSpecifier"
    case (.missingDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.missingDecl, 1):
      return "attributes"
    case (.missingDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.missingDecl, 3):
      return "modifiers"
    case (.missingDecl, 4):
      return "unexpectedBetweenModifiersAndPlaceholder"
    case (.missingDecl, 5):
      return "placeholder"
    case (.missingDecl, 6):
      return "unexpectedAfterPlaceholder"
    case (.missingExpr, 0):
      return "unexpectedBeforePlaceholder"
    case (.missingExpr, 1):
      return "placeholder"
    case (.missingExpr, 2):
      return "unexpectedAfterPlaceholder"
    case (.missingPattern, 0):
      return "unexpectedBeforePlaceholder"
    case (.missingPattern, 1):
      return "placeholder"
    case (.missingPattern, 2):
      return "unexpectedAfterPlaceholder"
    case (.missingStmt, 0):
      return "unexpectedBeforePlaceholder"
    case (.missingStmt, 1):
      return "placeholder"
    case (.missingStmt, 2):
      return "unexpectedAfterPlaceholder"
    case (.missing, 0):
      return "unexpectedBeforePlaceholder"
    case (.missing, 1):
      return "placeholder"
    case (.missing, 2):
      return "unexpectedAfterPlaceholder"
    case (.missingType, 0):
      return "unexpectedBeforePlaceholder"
    case (.missingType, 1):
      return "placeholder"
    case (.missingType, 2):
      return "unexpectedAfterPlaceholder"
    case (.multipleTrailingClosureElement, 0):
      return "unexpectedBeforeLabel"
    case (.multipleTrailingClosureElement, 1):
      return "label"
    case (.multipleTrailingClosureElement, 2):
      return "unexpectedBetweenLabelAndColon"
    case (.multipleTrailingClosureElement, 3):
      return "colon"
    case (.multipleTrailingClosureElement, 4):
      return "unexpectedBetweenColonAndClosure"
    case (.multipleTrailingClosureElement, 5):
      return "closure"
    case (.multipleTrailingClosureElement, 6):
      return "unexpectedAfterClosure"
    case (.namedOpaqueReturnType, 0):
      return "unexpectedBeforeGenericParameterClause"
    case (.namedOpaqueReturnType, 1):
      return "genericParameterClause"
    case (.namedOpaqueReturnType, 2):
      return "unexpectedBetweenGenericParameterClauseAndType"
    case (.namedOpaqueReturnType, 3):
      return "type"
    case (.namedOpaqueReturnType, 4):
      return "unexpectedAfterType"
    case (.nilLiteralExpr, 0):
      return "unexpectedBeforeNilKeyword"
    case (.nilLiteralExpr, 1):
      return "nilKeyword"
    case (.nilLiteralExpr, 2):
      return "unexpectedAfterNilKeyword"
    case (.objCSelectorPiece, 0):
      return "unexpectedBeforeName"
    case (.objCSelectorPiece, 1):
      return "name"
    case (.objCSelectorPiece, 2):
      return "unexpectedBetweenNameAndColon"
    case (.objCSelectorPiece, 3):
      return "colon"
    case (.objCSelectorPiece, 4):
      return "unexpectedAfterColon"
    case (.opaqueReturnTypeOfAttributeArguments, 0):
      return "unexpectedBeforeMangledName"
    case (.opaqueReturnTypeOfAttributeArguments, 1):
      return "mangledName"
    case (.opaqueReturnTypeOfAttributeArguments, 2):
      return "unexpectedBetweenMangledNameAndComma"
    case (.opaqueReturnTypeOfAttributeArguments, 3):
      return "comma"
    case (.opaqueReturnTypeOfAttributeArguments, 4):
      return "unexpectedBetweenCommaAndOrdinal"
    case (.opaqueReturnTypeOfAttributeArguments, 5):
      return "ordinal"
    case (.opaqueReturnTypeOfAttributeArguments, 6):
      return "unexpectedAfterOrdinal"
    case (.operatorDecl, 0):
      return "unexpectedBeforeFixitySpecifier"
    case (.operatorDecl, 1):
      return "fixitySpecifier"
    case (.operatorDecl, 2):
      return "unexpectedBetweenFixitySpecifierAndOperatorKeyword"
    case (.operatorDecl, 3):
      return "operatorKeyword"
    case (.operatorDecl, 4):
      return "unexpectedBetweenOperatorKeywordAndName"
    case (.operatorDecl, 5):
      return "name"
    case (.operatorDecl, 6):
      return "unexpectedBetweenNameAndOperatorPrecedenceAndTypes"
    case (.operatorDecl, 7):
      return "operatorPrecedenceAndTypes"
    case (.operatorDecl, 8):
      return "unexpectedAfterOperatorPrecedenceAndTypes"
    case (.operatorPrecedenceAndTypes, 0):
      return "unexpectedBeforeColon"
    case (.operatorPrecedenceAndTypes, 1):
      return "colon"
    case (.operatorPrecedenceAndTypes, 2):
      return "unexpectedBetweenColonAndPrecedenceGroup"
    case (.operatorPrecedenceAndTypes, 3):
      return "precedenceGroup"
    case (.operatorPrecedenceAndTypes, 4):
      return "unexpectedBetweenPrecedenceGroupAndDesignatedTypes"
    case (.operatorPrecedenceAndTypes, 5):
      return "designatedTypes"
    case (.operatorPrecedenceAndTypes, 6):
      return "unexpectedAfterDesignatedTypes"
    case (.optionalBindingCondition, 0):
      return "unexpectedBeforeBindingSpecifier"
    case (.optionalBindingCondition, 1):
      return "bindingSpecifier"
    case (.optionalBindingCondition, 2):
      return "unexpectedBetweenBindingSpecifierAndPattern"
    case (.optionalBindingCondition, 3):
      return "pattern"
    case (.optionalBindingCondition, 4):
      return "unexpectedBetweenPatternAndTypeAnnotation"
    case (.optionalBindingCondition, 5):
      return "typeAnnotation"
    case (.optionalBindingCondition, 6):
      return "unexpectedBetweenTypeAnnotationAndInitializer"
    case (.optionalBindingCondition, 7):
      return "initializer"
    case (.optionalBindingCondition, 8):
      return "unexpectedAfterInitializer"
    case (.optionalChainingExpr, 0):
      return "unexpectedBeforeExpression"
    case (.optionalChainingExpr, 1):
      return "expression"
    case (.optionalChainingExpr, 2):
      return "unexpectedBetweenExpressionAndQuestionMark"
    case (.optionalChainingExpr, 3):
      return "questionMark"
    case (.optionalChainingExpr, 4):
      return "unexpectedAfterQuestionMark"
    case (.optionalType, 0):
      return "unexpectedBeforeWrappedType"
    case (.optionalType, 1):
      return "wrappedType"
    case (.optionalType, 2):
      return "unexpectedBetweenWrappedTypeAndQuestionMark"
    case (.optionalType, 3):
      return "questionMark"
    case (.optionalType, 4):
      return "unexpectedAfterQuestionMark"
    case (.originallyDefinedInAttributeArguments, 0):
      return "unexpectedBeforeModuleLabel"
    case (.originallyDefinedInAttributeArguments, 1):
      return "moduleLabel"
    case (.originallyDefinedInAttributeArguments, 2):
      return "unexpectedBetweenModuleLabelAndColon"
    case (.originallyDefinedInAttributeArguments, 3):
      return "colon"
    case (.originallyDefinedInAttributeArguments, 4):
      return "unexpectedBetweenColonAndModuleName"
    case (.originallyDefinedInAttributeArguments, 5):
      return "moduleName"
    case (.originallyDefinedInAttributeArguments, 6):
      return "unexpectedBetweenModuleNameAndComma"
    case (.originallyDefinedInAttributeArguments, 7):
      return "comma"
    case (.originallyDefinedInAttributeArguments, 8):
      return "unexpectedBetweenCommaAndPlatforms"
    case (.originallyDefinedInAttributeArguments, 9):
      return "platforms"
    case (.originallyDefinedInAttributeArguments, 10):
      return "unexpectedAfterPlatforms"
    case (.packElementExpr, 0):
      return "unexpectedBeforeEachKeyword"
    case (.packElementExpr, 1):
      return "eachKeyword"
    case (.packElementExpr, 2):
      return "unexpectedBetweenEachKeywordAndPack"
    case (.packElementExpr, 3):
      return "pack"
    case (.packElementExpr, 4):
      return "unexpectedAfterPack"
    case (.packElementType, 0):
      return "unexpectedBeforeEachKeyword"
    case (.packElementType, 1):
      return "eachKeyword"
    case (.packElementType, 2):
      return "unexpectedBetweenEachKeywordAndPack"
    case (.packElementType, 3):
      return "pack"
    case (.packElementType, 4):
      return "unexpectedAfterPack"
    case (.packExpansionExpr, 0):
      return "unexpectedBeforeRepeatKeyword"
    case (.packExpansionExpr, 1):
      return "repeatKeyword"
    case (.packExpansionExpr, 2):
      return "unexpectedBetweenRepeatKeywordAndRepetitionPattern"
    case (.packExpansionExpr, 3):
      return "repetitionPattern"
    case (.packExpansionExpr, 4):
      return "unexpectedAfterRepetitionPattern"
    case (.packExpansionType, 0):
      return "unexpectedBeforeRepeatKeyword"
    case (.packExpansionType, 1):
      return "repeatKeyword"
    case (.packExpansionType, 2):
      return "unexpectedBetweenRepeatKeywordAndRepetitionPattern"
    case (.packExpansionType, 3):
      return "repetitionPattern"
    case (.packExpansionType, 4):
      return "unexpectedAfterRepetitionPattern"
    case (.patternBinding, 0):
      return "unexpectedBeforePattern"
    case (.patternBinding, 1):
      return "pattern"
    case (.patternBinding, 2):
      return "unexpectedBetweenPatternAndTypeAnnotation"
    case (.patternBinding, 3):
      return "typeAnnotation"
    case (.patternBinding, 4):
      return "unexpectedBetweenTypeAnnotationAndInitializer"
    case (.patternBinding, 5):
      return "initializer"
    case (.patternBinding, 6):
      return "unexpectedBetweenInitializerAndAccessorBlock"
    case (.patternBinding, 7):
      return "accessorBlock"
    case (.patternBinding, 8):
      return "unexpectedBetweenAccessorBlockAndTrailingComma"
    case (.patternBinding, 9):
      return "trailingComma"
    case (.patternBinding, 10):
      return "unexpectedAfterTrailingComma"
    case (.patternExpr, 0):
      return "unexpectedBeforePattern"
    case (.patternExpr, 1):
      return "pattern"
    case (.patternExpr, 2):
      return "unexpectedAfterPattern"
    case (.platformVersionItem, 0):
      return "unexpectedBeforePlatformVersion"
    case (.platformVersionItem, 1):
      return "platformVersion"
    case (.platformVersionItem, 2):
      return "unexpectedBetweenPlatformVersionAndTrailingComma"
    case (.platformVersionItem, 3):
      return "trailingComma"
    case (.platformVersionItem, 4):
      return "unexpectedAfterTrailingComma"
    case (.platformVersion, 0):
      return "unexpectedBeforePlatform"
    case (.platformVersion, 1):
      return "platform"
    case (.platformVersion, 2):
      return "unexpectedBetweenPlatformAndVersion"
    case (.platformVersion, 3):
      return "version"
    case (.platformVersion, 4):
      return "unexpectedAfterVersion"
    case (.postfixIfConfigExpr, 0):
      return "unexpectedBeforeBase"
    case (.postfixIfConfigExpr, 1):
      return "base"
    case (.postfixIfConfigExpr, 2):
      return "unexpectedBetweenBaseAndConfig"
    case (.postfixIfConfigExpr, 3):
      return "config"
    case (.postfixIfConfigExpr, 4):
      return "unexpectedAfterConfig"
    case (.postfixOperatorExpr, 0):
      return "unexpectedBeforeExpression"
    case (.postfixOperatorExpr, 1):
      return "expression"
    case (.postfixOperatorExpr, 2):
      return "unexpectedBetweenExpressionAndOperator"
    case (.postfixOperatorExpr, 3):
      return "operator"
    case (.postfixOperatorExpr, 4):
      return "unexpectedAfterOperator"
    case (.poundSourceLocationArguments, 0):
      return "unexpectedBeforeFileLabel"
    case (.poundSourceLocationArguments, 1):
      return "fileLabel"
    case (.poundSourceLocationArguments, 2):
      return "unexpectedBetweenFileLabelAndFileColon"
    case (.poundSourceLocationArguments, 3):
      return "fileColon"
    case (.poundSourceLocationArguments, 4):
      return "unexpectedBetweenFileColonAndFileName"
    case (.poundSourceLocationArguments, 5):
      return "fileName"
    case (.poundSourceLocationArguments, 6):
      return "unexpectedBetweenFileNameAndComma"
    case (.poundSourceLocationArguments, 7):
      return "comma"
    case (.poundSourceLocationArguments, 8):
      return "unexpectedBetweenCommaAndLineLabel"
    case (.poundSourceLocationArguments, 9):
      return "lineLabel"
    case (.poundSourceLocationArguments, 10):
      return "unexpectedBetweenLineLabelAndLineColon"
    case (.poundSourceLocationArguments, 11):
      return "lineColon"
    case (.poundSourceLocationArguments, 12):
      return "unexpectedBetweenLineColonAndLineNumber"
    case (.poundSourceLocationArguments, 13):
      return "lineNumber"
    case (.poundSourceLocationArguments, 14):
      return "unexpectedAfterLineNumber"
    case (.poundSourceLocation, 0):
      return "unexpectedBeforePoundSourceLocation"
    case (.poundSourceLocation, 1):
      return "poundSourceLocation"
    case (.poundSourceLocation, 2):
      return "unexpectedBetweenPoundSourceLocationAndLeftParen"
    case (.poundSourceLocation, 3):
      return "leftParen"
    case (.poundSourceLocation, 4):
      return "unexpectedBetweenLeftParenAndArguments"
    case (.poundSourceLocation, 5):
      return "arguments"
    case (.poundSourceLocation, 6):
      return "unexpectedBetweenArgumentsAndRightParen"
    case (.poundSourceLocation, 7):
      return "rightParen"
    case (.poundSourceLocation, 8):
      return "unexpectedAfterRightParen"
    case (.precedenceGroupAssignment, 0):
      return "unexpectedBeforeAssignmentLabel"
    case (.precedenceGroupAssignment, 1):
      return "assignmentLabel"
    case (.precedenceGroupAssignment, 2):
      return "unexpectedBetweenAssignmentLabelAndColon"
    case (.precedenceGroupAssignment, 3):
      return "colon"
    case (.precedenceGroupAssignment, 4):
      return "unexpectedBetweenColonAndValue"
    case (.precedenceGroupAssignment, 5):
      return "value"
    case (.precedenceGroupAssignment, 6):
      return "unexpectedAfterValue"
    case (.precedenceGroupAssociativity, 0):
      return "unexpectedBeforeAssociativityLabel"
    case (.precedenceGroupAssociativity, 1):
      return "associativityLabel"
    case (.precedenceGroupAssociativity, 2):
      return "unexpectedBetweenAssociativityLabelAndColon"
    case (.precedenceGroupAssociativity, 3):
      return "colon"
    case (.precedenceGroupAssociativity, 4):
      return "unexpectedBetweenColonAndValue"
    case (.precedenceGroupAssociativity, 5):
      return "value"
    case (.precedenceGroupAssociativity, 6):
      return "unexpectedAfterValue"
    case (.precedenceGroupDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.precedenceGroupDecl, 1):
      return "attributes"
    case (.precedenceGroupDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.precedenceGroupDecl, 3):
      return "modifiers"
    case (.precedenceGroupDecl, 4):
      return "unexpectedBetweenModifiersAndPrecedencegroupKeyword"
    case (.precedenceGroupDecl, 5):
      return "precedencegroupKeyword"
    case (.precedenceGroupDecl, 6):
      return "unexpectedBetweenPrecedencegroupKeywordAndName"
    case (.precedenceGroupDecl, 7):
      return "name"
    case (.precedenceGroupDecl, 8):
      return "unexpectedBetweenNameAndLeftBrace"
    case (.precedenceGroupDecl, 9):
      return "leftBrace"
    case (.precedenceGroupDecl, 10):
      return "unexpectedBetweenLeftBraceAndGroupAttributes"
    case (.precedenceGroupDecl, 11):
      return "groupAttributes"
    case (.precedenceGroupDecl, 12):
      return "unexpectedBetweenGroupAttributesAndRightBrace"
    case (.precedenceGroupDecl, 13):
      return "rightBrace"
    case (.precedenceGroupDecl, 14):
      return "unexpectedAfterRightBrace"
    case (.precedenceGroupName, 0):
      return "unexpectedBeforeName"
    case (.precedenceGroupName, 1):
      return "name"
    case (.precedenceGroupName, 2):
      return "unexpectedBetweenNameAndTrailingComma"
    case (.precedenceGroupName, 3):
      return "trailingComma"
    case (.precedenceGroupName, 4):
      return "unexpectedAfterTrailingComma"
    case (.precedenceGroupRelation, 0):
      return "unexpectedBeforeHigherThanOrLowerThanLabel"
    case (.precedenceGroupRelation, 1):
      return "higherThanOrLowerThanLabel"
    case (.precedenceGroupRelation, 2):
      return "unexpectedBetweenHigherThanOrLowerThanLabelAndColon"
    case (.precedenceGroupRelation, 3):
      return "colon"
    case (.precedenceGroupRelation, 4):
      return "unexpectedBetweenColonAndPrecedenceGroups"
    case (.precedenceGroupRelation, 5):
      return "precedenceGroups"
    case (.precedenceGroupRelation, 6):
      return "unexpectedAfterPrecedenceGroups"
    case (.prefixOperatorExpr, 0):
      return "unexpectedBeforeOperator"
    case (.prefixOperatorExpr, 1):
      return "operator"
    case (.prefixOperatorExpr, 2):
      return "unexpectedBetweenOperatorAndExpression"
    case (.prefixOperatorExpr, 3):
      return "expression"
    case (.prefixOperatorExpr, 4):
      return "unexpectedAfterExpression"
    case (.primaryAssociatedTypeClause, 0):
      return "unexpectedBeforeLeftAngle"
    case (.primaryAssociatedTypeClause, 1):
      return "leftAngle"
    case (.primaryAssociatedTypeClause, 2):
      return "unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes"
    case (.primaryAssociatedTypeClause, 3):
      return "primaryAssociatedTypes"
    case (.primaryAssociatedTypeClause, 4):
      return "unexpectedBetweenPrimaryAssociatedTypesAndRightAngle"
    case (.primaryAssociatedTypeClause, 5):
      return "rightAngle"
    case (.primaryAssociatedTypeClause, 6):
      return "unexpectedAfterRightAngle"
    case (.primaryAssociatedType, 0):
      return "unexpectedBeforeName"
    case (.primaryAssociatedType, 1):
      return "name"
    case (.primaryAssociatedType, 2):
      return "unexpectedBetweenNameAndTrailingComma"
    case (.primaryAssociatedType, 3):
      return "trailingComma"
    case (.primaryAssociatedType, 4):
      return "unexpectedAfterTrailingComma"
    case (.protocolDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.protocolDecl, 1):
      return "attributes"
    case (.protocolDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.protocolDecl, 3):
      return "modifiers"
    case (.protocolDecl, 4):
      return "unexpectedBetweenModifiersAndProtocolKeyword"
    case (.protocolDecl, 5):
      return "protocolKeyword"
    case (.protocolDecl, 6):
      return "unexpectedBetweenProtocolKeywordAndName"
    case (.protocolDecl, 7):
      return "name"
    case (.protocolDecl, 8):
      return "unexpectedBetweenNameAndPrimaryAssociatedTypeClause"
    case (.protocolDecl, 9):
      return "primaryAssociatedTypeClause"
    case (.protocolDecl, 10):
      return "unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause"
    case (.protocolDecl, 11):
      return "inheritanceClause"
    case (.protocolDecl, 12):
      return "unexpectedBetweenInheritanceClauseAndGenericWhereClause"
    case (.protocolDecl, 13):
      return "genericWhereClause"
    case (.protocolDecl, 14):
      return "unexpectedBetweenGenericWhereClauseAndMemberBlock"
    case (.protocolDecl, 15):
      return "memberBlock"
    case (.protocolDecl, 16):
      return "unexpectedAfterMemberBlock"
    case (.regexLiteralExpr, 0):
      return "unexpectedBeforeOpeningPounds"
    case (.regexLiteralExpr, 1):
      return "openingPounds"
    case (.regexLiteralExpr, 2):
      return "unexpectedBetweenOpeningPoundsAndOpeningSlash"
    case (.regexLiteralExpr, 3):
      return "openingSlash"
    case (.regexLiteralExpr, 4):
      return "unexpectedBetweenOpeningSlashAndRegex"
    case (.regexLiteralExpr, 5):
      return "regex"
    case (.regexLiteralExpr, 6):
      return "unexpectedBetweenRegexAndClosingSlash"
    case (.regexLiteralExpr, 7):
      return "closingSlash"
    case (.regexLiteralExpr, 8):
      return "unexpectedBetweenClosingSlashAndClosingPounds"
    case (.regexLiteralExpr, 9):
      return "closingPounds"
    case (.regexLiteralExpr, 10):
      return "unexpectedAfterClosingPounds"
    case (.repeatStmt, 0):
      return "unexpectedBeforeRepeatKeyword"
    case (.repeatStmt, 1):
      return "repeatKeyword"
    case (.repeatStmt, 2):
      return "unexpectedBetweenRepeatKeywordAndBody"
    case (.repeatStmt, 3):
      return "body"
    case (.repeatStmt, 4):
      return "unexpectedBetweenBodyAndWhileKeyword"
    case (.repeatStmt, 5):
      return "whileKeyword"
    case (.repeatStmt, 6):
      return "unexpectedBetweenWhileKeywordAndCondition"
    case (.repeatStmt, 7):
      return "condition"
    case (.repeatStmt, 8):
      return "unexpectedAfterCondition"
    case (.returnClause, 0):
      return "unexpectedBeforeArrow"
    case (.returnClause, 1):
      return "arrow"
    case (.returnClause, 2):
      return "unexpectedBetweenArrowAndType"
    case (.returnClause, 3):
      return "type"
    case (.returnClause, 4):
      return "unexpectedAfterType"
    case (.returnStmt, 0):
      return "unexpectedBeforeReturnKeyword"
    case (.returnStmt, 1):
      return "returnKeyword"
    case (.returnStmt, 2):
      return "unexpectedBetweenReturnKeywordAndExpression"
    case (.returnStmt, 3):
      return "expression"
    case (.returnStmt, 4):
      return "unexpectedAfterExpression"
    case (.sameTypeRequirement, 0):
      return "unexpectedBeforeLeftType"
    case (.sameTypeRequirement, 1):
      return "leftType"
    case (.sameTypeRequirement, 2):
      return "unexpectedBetweenLeftTypeAndEqual"
    case (.sameTypeRequirement, 3):
      return "equal"
    case (.sameTypeRequirement, 4):
      return "unexpectedBetweenEqualAndRightType"
    case (.sameTypeRequirement, 5):
      return "rightType"
    case (.sameTypeRequirement, 6):
      return "unexpectedAfterRightType"
    case (.sequenceExpr, 0):
      return "unexpectedBeforeElements"
    case (.sequenceExpr, 1):
      return "elements"
    case (.sequenceExpr, 2):
      return "unexpectedAfterElements"
    case (.simpleStringLiteralExpr, 0):
      return "unexpectedBeforeOpeningQuote"
    case (.simpleStringLiteralExpr, 1):
      return "openingQuote"
    case (.simpleStringLiteralExpr, 2):
      return "unexpectedBetweenOpeningQuoteAndSegments"
    case (.simpleStringLiteralExpr, 3):
      return "segments"
    case (.simpleStringLiteralExpr, 4):
      return "unexpectedBetweenSegmentsAndClosingQuote"
    case (.simpleStringLiteralExpr, 5):
      return "closingQuote"
    case (.simpleStringLiteralExpr, 6):
      return "unexpectedAfterClosingQuote"
    case (.simpleTypeSpecifier, 0):
      return "unexpectedBeforeSpecifier"
    case (.simpleTypeSpecifier, 1):
      return "specifier"
    case (.simpleTypeSpecifier, 2):
      return "unexpectedAfterSpecifier"
    case (.someOrAnyType, 0):
      return "unexpectedBeforeSomeOrAnySpecifier"
    case (.someOrAnyType, 1):
      return "someOrAnySpecifier"
    case (.someOrAnyType, 2):
      return "unexpectedBetweenSomeOrAnySpecifierAndConstraint"
    case (.someOrAnyType, 3):
      return "constraint"
    case (.someOrAnyType, 4):
      return "unexpectedAfterConstraint"
    case (.sourceFile, 0):
      return "unexpectedBeforeShebang"
    case (.sourceFile, 1):
      return "shebang"
    case (.sourceFile, 2):
      return "unexpectedBetweenShebangAndStatements"
    case (.sourceFile, 3):
      return "statements"
    case (.sourceFile, 4):
      return "unexpectedBetweenStatementsAndEndOfFileToken"
    case (.sourceFile, 5):
      return "endOfFileToken"
    case (.sourceFile, 6):
      return "unexpectedAfterEndOfFileToken"
    case (.specializeAvailabilityArgument, 0):
      return "unexpectedBeforeAvailabilityLabel"
    case (.specializeAvailabilityArgument, 1):
      return "availabilityLabel"
    case (.specializeAvailabilityArgument, 2):
      return "unexpectedBetweenAvailabilityLabelAndColon"
    case (.specializeAvailabilityArgument, 3):
      return "colon"
    case (.specializeAvailabilityArgument, 4):
      return "unexpectedBetweenColonAndAvailabilityArguments"
    case (.specializeAvailabilityArgument, 5):
      return "availabilityArguments"
    case (.specializeAvailabilityArgument, 6):
      return "unexpectedBetweenAvailabilityArgumentsAndSemicolon"
    case (.specializeAvailabilityArgument, 7):
      return "semicolon"
    case (.specializeAvailabilityArgument, 8):
      return "unexpectedAfterSemicolon"
    case (.specializeTargetFunctionArgument, 0):
      return "unexpectedBeforeTargetLabel"
    case (.specializeTargetFunctionArgument, 1):
      return "targetLabel"
    case (.specializeTargetFunctionArgument, 2):
      return "unexpectedBetweenTargetLabelAndColon"
    case (.specializeTargetFunctionArgument, 3):
      return "colon"
    case (.specializeTargetFunctionArgument, 4):
      return "unexpectedBetweenColonAndDeclName"
    case (.specializeTargetFunctionArgument, 5):
      return "declName"
    case (.specializeTargetFunctionArgument, 6):
      return "unexpectedBetweenDeclNameAndTrailingComma"
    case (.specializeTargetFunctionArgument, 7):
      return "trailingComma"
    case (.specializeTargetFunctionArgument, 8):
      return "unexpectedAfterTrailingComma"
    case (.stringLiteralExpr, 0):
      return "unexpectedBeforeOpeningPounds"
    case (.stringLiteralExpr, 1):
      return "openingPounds"
    case (.stringLiteralExpr, 2):
      return "unexpectedBetweenOpeningPoundsAndOpeningQuote"
    case (.stringLiteralExpr, 3):
      return "openingQuote"
    case (.stringLiteralExpr, 4):
      return "unexpectedBetweenOpeningQuoteAndSegments"
    case (.stringLiteralExpr, 5):
      return "segments"
    case (.stringLiteralExpr, 6):
      return "unexpectedBetweenSegmentsAndClosingQuote"
    case (.stringLiteralExpr, 7):
      return "closingQuote"
    case (.stringLiteralExpr, 8):
      return "unexpectedBetweenClosingQuoteAndClosingPounds"
    case (.stringLiteralExpr, 9):
      return "closingPounds"
    case (.stringLiteralExpr, 10):
      return "unexpectedAfterClosingPounds"
    case (.stringSegment, 0):
      return "unexpectedBeforeContent"
    case (.stringSegment, 1):
      return "content"
    case (.stringSegment, 2):
      return "unexpectedAfterContent"
    case (.structDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.structDecl, 1):
      return "attributes"
    case (.structDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.structDecl, 3):
      return "modifiers"
    case (.structDecl, 4):
      return "unexpectedBetweenModifiersAndStructKeyword"
    case (.structDecl, 5):
      return "structKeyword"
    case (.structDecl, 6):
      return "unexpectedBetweenStructKeywordAndName"
    case (.structDecl, 7):
      return "name"
    case (.structDecl, 8):
      return "unexpectedBetweenNameAndGenericParameterClause"
    case (.structDecl, 9):
      return "genericParameterClause"
    case (.structDecl, 10):
      return "unexpectedBetweenGenericParameterClauseAndInheritanceClause"
    case (.structDecl, 11):
      return "inheritanceClause"
    case (.structDecl, 12):
      return "unexpectedBetweenInheritanceClauseAndGenericWhereClause"
    case (.structDecl, 13):
      return "genericWhereClause"
    case (.structDecl, 14):
      return "unexpectedBetweenGenericWhereClauseAndMemberBlock"
    case (.structDecl, 15):
      return "memberBlock"
    case (.structDecl, 16):
      return "unexpectedAfterMemberBlock"
    case (.subscriptCallExpr, 0):
      return "unexpectedBeforeCalledExpression"
    case (.subscriptCallExpr, 1):
      return "calledExpression"
    case (.subscriptCallExpr, 2):
      return "unexpectedBetweenCalledExpressionAndLeftSquare"
    case (.subscriptCallExpr, 3):
      return "leftSquare"
    case (.subscriptCallExpr, 4):
      return "unexpectedBetweenLeftSquareAndArguments"
    case (.subscriptCallExpr, 5):
      return "arguments"
    case (.subscriptCallExpr, 6):
      return "unexpectedBetweenArgumentsAndRightSquare"
    case (.subscriptCallExpr, 7):
      return "rightSquare"
    case (.subscriptCallExpr, 8):
      return "unexpectedBetweenRightSquareAndTrailingClosure"
    case (.subscriptCallExpr, 9):
      return "trailingClosure"
    case (.subscriptCallExpr, 10):
      return "unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures"
    case (.subscriptCallExpr, 11):
      return "additionalTrailingClosures"
    case (.subscriptCallExpr, 12):
      return "unexpectedAfterAdditionalTrailingClosures"
    case (.subscriptDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.subscriptDecl, 1):
      return "attributes"
    case (.subscriptDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.subscriptDecl, 3):
      return "modifiers"
    case (.subscriptDecl, 4):
      return "unexpectedBetweenModifiersAndSubscriptKeyword"
    case (.subscriptDecl, 5):
      return "subscriptKeyword"
    case (.subscriptDecl, 6):
      return "unexpectedBetweenSubscriptKeywordAndGenericParameterClause"
    case (.subscriptDecl, 7):
      return "genericParameterClause"
    case (.subscriptDecl, 8):
      return "unexpectedBetweenGenericParameterClauseAndParameterClause"
    case (.subscriptDecl, 9):
      return "parameterClause"
    case (.subscriptDecl, 10):
      return "unexpectedBetweenParameterClauseAndReturnClause"
    case (.subscriptDecl, 11):
      return "returnClause"
    case (.subscriptDecl, 12):
      return "unexpectedBetweenReturnClauseAndGenericWhereClause"
    case (.subscriptDecl, 13):
      return "genericWhereClause"
    case (.subscriptDecl, 14):
      return "unexpectedBetweenGenericWhereClauseAndAccessorBlock"
    case (.subscriptDecl, 15):
      return "accessorBlock"
    case (.subscriptDecl, 16):
      return "unexpectedAfterAccessorBlock"
    case (.superExpr, 0):
      return "unexpectedBeforeSuperKeyword"
    case (.superExpr, 1):
      return "superKeyword"
    case (.superExpr, 2):
      return "unexpectedAfterSuperKeyword"
    case (.suppressedType, 0):
      return "unexpectedBeforeWithoutTilde"
    case (.suppressedType, 1):
      return "withoutTilde"
    case (.suppressedType, 2):
      return "unexpectedBetweenWithoutTildeAndType"
    case (.suppressedType, 3):
      return "type"
    case (.suppressedType, 4):
      return "unexpectedAfterType"
    case (.switchCaseItem, 0):
      return "unexpectedBeforePattern"
    case (.switchCaseItem, 1):
      return "pattern"
    case (.switchCaseItem, 2):
      return "unexpectedBetweenPatternAndWhereClause"
    case (.switchCaseItem, 3):
      return "whereClause"
    case (.switchCaseItem, 4):
      return "unexpectedBetweenWhereClauseAndTrailingComma"
    case (.switchCaseItem, 5):
      return "trailingComma"
    case (.switchCaseItem, 6):
      return "unexpectedAfterTrailingComma"
    case (.switchCaseLabel, 0):
      return "unexpectedBeforeCaseKeyword"
    case (.switchCaseLabel, 1):
      return "caseKeyword"
    case (.switchCaseLabel, 2):
      return "unexpectedBetweenCaseKeywordAndCaseItems"
    case (.switchCaseLabel, 3):
      return "caseItems"
    case (.switchCaseLabel, 4):
      return "unexpectedBetweenCaseItemsAndColon"
    case (.switchCaseLabel, 5):
      return "colon"
    case (.switchCaseLabel, 6):
      return "unexpectedAfterColon"
    case (.switchCase, 0):
      return "unexpectedBeforeAttribute"
    case (.switchCase, 1):
      return "attribute"
    case (.switchCase, 2):
      return "unexpectedBetweenAttributeAndLabel"
    case (.switchCase, 3):
      return "label"
    case (.switchCase, 4):
      return "unexpectedBetweenLabelAndStatements"
    case (.switchCase, 5):
      return "statements"
    case (.switchCase, 6):
      return "unexpectedAfterStatements"
    case (.switchDefaultLabel, 0):
      return "unexpectedBeforeDefaultKeyword"
    case (.switchDefaultLabel, 1):
      return "defaultKeyword"
    case (.switchDefaultLabel, 2):
      return "unexpectedBetweenDefaultKeywordAndColon"
    case (.switchDefaultLabel, 3):
      return "colon"
    case (.switchDefaultLabel, 4):
      return "unexpectedAfterColon"
    case (.switchExpr, 0):
      return "unexpectedBeforeSwitchKeyword"
    case (.switchExpr, 1):
      return "switchKeyword"
    case (.switchExpr, 2):
      return "unexpectedBetweenSwitchKeywordAndSubject"
    case (.switchExpr, 3):
      return "subject"
    case (.switchExpr, 4):
      return "unexpectedBetweenSubjectAndLeftBrace"
    case (.switchExpr, 5):
      return "leftBrace"
    case (.switchExpr, 6):
      return "unexpectedBetweenLeftBraceAndCases"
    case (.switchExpr, 7):
      return "cases"
    case (.switchExpr, 8):
      return "unexpectedBetweenCasesAndRightBrace"
    case (.switchExpr, 9):
      return "rightBrace"
    case (.switchExpr, 10):
      return "unexpectedAfterRightBrace"
    case (.ternaryExpr, 0):
      return "unexpectedBeforeCondition"
    case (.ternaryExpr, 1):
      return "condition"
    case (.ternaryExpr, 2):
      return "unexpectedBetweenConditionAndQuestionMark"
    case (.ternaryExpr, 3):
      return "questionMark"
    case (.ternaryExpr, 4):
      return "unexpectedBetweenQuestionMarkAndThenExpression"
    case (.ternaryExpr, 5):
      return "thenExpression"
    case (.ternaryExpr, 6):
      return "unexpectedBetweenThenExpressionAndColon"
    case (.ternaryExpr, 7):
      return "colon"
    case (.ternaryExpr, 8):
      return "unexpectedBetweenColonAndElseExpression"
    case (.ternaryExpr, 9):
      return "elseExpression"
    case (.ternaryExpr, 10):
      return "unexpectedAfterElseExpression"
    case (.thenStmt, 0):
      return "unexpectedBeforeThenKeyword"
    case (.thenStmt, 1):
      return "thenKeyword"
    case (.thenStmt, 2):
      return "unexpectedBetweenThenKeywordAndExpression"
    case (.thenStmt, 3):
      return "expression"
    case (.thenStmt, 4):
      return "unexpectedAfterExpression"
    case (.throwStmt, 0):
      return "unexpectedBeforeThrowKeyword"
    case (.throwStmt, 1):
      return "throwKeyword"
    case (.throwStmt, 2):
      return "unexpectedBetweenThrowKeywordAndExpression"
    case (.throwStmt, 3):
      return "expression"
    case (.throwStmt, 4):
      return "unexpectedAfterExpression"
    case (.throwsClause, 0):
      return "unexpectedBeforeThrowsSpecifier"
    case (.throwsClause, 1):
      return "throwsSpecifier"
    case (.throwsClause, 2):
      return "unexpectedBetweenThrowsSpecifierAndLeftParen"
    case (.throwsClause, 3):
      return "leftParen"
    case (.throwsClause, 4):
      return "unexpectedBetweenLeftParenAndType"
    case (.throwsClause, 5):
      return "type"
    case (.throwsClause, 6):
      return "unexpectedBetweenTypeAndRightParen"
    case (.throwsClause, 7):
      return "rightParen"
    case (.throwsClause, 8):
      return "unexpectedAfterRightParen"
    case (.tryExpr, 0):
      return "unexpectedBeforeTryKeyword"
    case (.tryExpr, 1):
      return "tryKeyword"
    case (.tryExpr, 2):
      return "unexpectedBetweenTryKeywordAndQuestionOrExclamationMark"
    case (.tryExpr, 3):
      return "questionOrExclamationMark"
    case (.tryExpr, 4):
      return "unexpectedBetweenQuestionOrExclamationMarkAndExpression"
    case (.tryExpr, 5):
      return "expression"
    case (.tryExpr, 6):
      return "unexpectedAfterExpression"
    case (.tupleExpr, 0):
      return "unexpectedBeforeLeftParen"
    case (.tupleExpr, 1):
      return "leftParen"
    case (.tupleExpr, 2):
      return "unexpectedBetweenLeftParenAndElements"
    case (.tupleExpr, 3):
      return "elements"
    case (.tupleExpr, 4):
      return "unexpectedBetweenElementsAndRightParen"
    case (.tupleExpr, 5):
      return "rightParen"
    case (.tupleExpr, 6):
      return "unexpectedAfterRightParen"
    case (.tuplePatternElement, 0):
      return "unexpectedBeforeLabel"
    case (.tuplePatternElement, 1):
      return "label"
    case (.tuplePatternElement, 2):
      return "unexpectedBetweenLabelAndColon"
    case (.tuplePatternElement, 3):
      return "colon"
    case (.tuplePatternElement, 4):
      return "unexpectedBetweenColonAndPattern"
    case (.tuplePatternElement, 5):
      return "pattern"
    case (.tuplePatternElement, 6):
      return "unexpectedBetweenPatternAndTrailingComma"
    case (.tuplePatternElement, 7):
      return "trailingComma"
    case (.tuplePatternElement, 8):
      return "unexpectedAfterTrailingComma"
    case (.tuplePattern, 0):
      return "unexpectedBeforeLeftParen"
    case (.tuplePattern, 1):
      return "leftParen"
    case (.tuplePattern, 2):
      return "unexpectedBetweenLeftParenAndElements"
    case (.tuplePattern, 3):
      return "elements"
    case (.tuplePattern, 4):
      return "unexpectedBetweenElementsAndRightParen"
    case (.tuplePattern, 5):
      return "rightParen"
    case (.tuplePattern, 6):
      return "unexpectedAfterRightParen"
    case (.tupleTypeElement, 0):
      return "unexpectedBeforeInoutKeyword"
    case (.tupleTypeElement, 1):
      return "inoutKeyword"
    case (.tupleTypeElement, 2):
      return "unexpectedBetweenInoutKeywordAndFirstName"
    case (.tupleTypeElement, 3):
      return "firstName"
    case (.tupleTypeElement, 4):
      return "unexpectedBetweenFirstNameAndSecondName"
    case (.tupleTypeElement, 5):
      return "secondName"
    case (.tupleTypeElement, 6):
      return "unexpectedBetweenSecondNameAndColon"
    case (.tupleTypeElement, 7):
      return "colon"
    case (.tupleTypeElement, 8):
      return "unexpectedBetweenColonAndType"
    case (.tupleTypeElement, 9):
      return "type"
    case (.tupleTypeElement, 10):
      return "unexpectedBetweenTypeAndEllipsis"
    case (.tupleTypeElement, 11):
      return "ellipsis"
    case (.tupleTypeElement, 12):
      return "unexpectedBetweenEllipsisAndTrailingComma"
    case (.tupleTypeElement, 13):
      return "trailingComma"
    case (.tupleTypeElement, 14):
      return "unexpectedAfterTrailingComma"
    case (.tupleType, 0):
      return "unexpectedBeforeLeftParen"
    case (.tupleType, 1):
      return "leftParen"
    case (.tupleType, 2):
      return "unexpectedBetweenLeftParenAndElements"
    case (.tupleType, 3):
      return "elements"
    case (.tupleType, 4):
      return "unexpectedBetweenElementsAndRightParen"
    case (.tupleType, 5):
      return "rightParen"
    case (.tupleType, 6):
      return "unexpectedAfterRightParen"
    case (.typeAliasDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.typeAliasDecl, 1):
      return "attributes"
    case (.typeAliasDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.typeAliasDecl, 3):
      return "modifiers"
    case (.typeAliasDecl, 4):
      return "unexpectedBetweenModifiersAndTypealiasKeyword"
    case (.typeAliasDecl, 5):
      return "typealiasKeyword"
    case (.typeAliasDecl, 6):
      return "unexpectedBetweenTypealiasKeywordAndName"
    case (.typeAliasDecl, 7):
      return "name"
    case (.typeAliasDecl, 8):
      return "unexpectedBetweenNameAndGenericParameterClause"
    case (.typeAliasDecl, 9):
      return "genericParameterClause"
    case (.typeAliasDecl, 10):
      return "unexpectedBetweenGenericParameterClauseAndInitializer"
    case (.typeAliasDecl, 11):
      return "initializer"
    case (.typeAliasDecl, 12):
      return "unexpectedBetweenInitializerAndGenericWhereClause"
    case (.typeAliasDecl, 13):
      return "genericWhereClause"
    case (.typeAliasDecl, 14):
      return "unexpectedAfterGenericWhereClause"
    case (.typeAnnotation, 0):
      return "unexpectedBeforeColon"
    case (.typeAnnotation, 1):
      return "colon"
    case (.typeAnnotation, 2):
      return "unexpectedBetweenColonAndType"
    case (.typeAnnotation, 3):
      return "type"
    case (.typeAnnotation, 4):
      return "unexpectedAfterType"
    case (.typeEffectSpecifiers, 0):
      return "unexpectedBeforeAsyncSpecifier"
    case (.typeEffectSpecifiers, 1):
      return "asyncSpecifier"
    case (.typeEffectSpecifiers, 2):
      return "unexpectedBetweenAsyncSpecifierAndThrowsClause"
    case (.typeEffectSpecifiers, 3):
      return "throwsClause"
    case (.typeEffectSpecifiers, 4):
      return "unexpectedAfterThrowsClause"
    case (.typeExpr, 0):
      return "unexpectedBeforeType"
    case (.typeExpr, 1):
      return "type"
    case (.typeExpr, 2):
      return "unexpectedAfterType"
    case (.typeInitializerClause, 0):
      return "unexpectedBeforeEqual"
    case (.typeInitializerClause, 1):
      return "equal"
    case (.typeInitializerClause, 2):
      return "unexpectedBetweenEqualAndValue"
    case (.typeInitializerClause, 3):
      return "value"
    case (.typeInitializerClause, 4):
      return "unexpectedAfterValue"
    case (.unavailableFromAsyncAttributeArguments, 0):
      return "unexpectedBeforeMessageLabel"
    case (.unavailableFromAsyncAttributeArguments, 1):
      return "messageLabel"
    case (.unavailableFromAsyncAttributeArguments, 2):
      return "unexpectedBetweenMessageLabelAndColon"
    case (.unavailableFromAsyncAttributeArguments, 3):
      return "colon"
    case (.unavailableFromAsyncAttributeArguments, 4):
      return "unexpectedBetweenColonAndMessage"
    case (.unavailableFromAsyncAttributeArguments, 5):
      return "message"
    case (.unavailableFromAsyncAttributeArguments, 6):
      return "unexpectedAfterMessage"
    case (.underscorePrivateAttributeArguments, 0):
      return "unexpectedBeforeSourceFileLabel"
    case (.underscorePrivateAttributeArguments, 1):
      return "sourceFileLabel"
    case (.underscorePrivateAttributeArguments, 2):
      return "unexpectedBetweenSourceFileLabelAndColon"
    case (.underscorePrivateAttributeArguments, 3):
      return "colon"
    case (.underscorePrivateAttributeArguments, 4):
      return "unexpectedBetweenColonAndFilename"
    case (.underscorePrivateAttributeArguments, 5):
      return "filename"
    case (.underscorePrivateAttributeArguments, 6):
      return "unexpectedAfterFilename"
    case (.unresolvedAsExpr, 0):
      return "unexpectedBeforeAsKeyword"
    case (.unresolvedAsExpr, 1):
      return "asKeyword"
    case (.unresolvedAsExpr, 2):
      return "unexpectedBetweenAsKeywordAndQuestionOrExclamationMark"
    case (.unresolvedAsExpr, 3):
      return "questionOrExclamationMark"
    case (.unresolvedAsExpr, 4):
      return "unexpectedAfterQuestionOrExclamationMark"
    case (.unresolvedIsExpr, 0):
      return "unexpectedBeforeIsKeyword"
    case (.unresolvedIsExpr, 1):
      return "isKeyword"
    case (.unresolvedIsExpr, 2):
      return "unexpectedAfterIsKeyword"
    case (.unresolvedTernaryExpr, 0):
      return "unexpectedBeforeQuestionMark"
    case (.unresolvedTernaryExpr, 1):
      return "questionMark"
    case (.unresolvedTernaryExpr, 2):
      return "unexpectedBetweenQuestionMarkAndThenExpression"
    case (.unresolvedTernaryExpr, 3):
      return "thenExpression"
    case (.unresolvedTernaryExpr, 4):
      return "unexpectedBetweenThenExpressionAndColon"
    case (.unresolvedTernaryExpr, 5):
      return "colon"
    case (.unresolvedTernaryExpr, 6):
      return "unexpectedAfterColon"
    case (.unsafeExpr, 0):
      return "unexpectedBeforeUnsafeKeyword"
    case (.unsafeExpr, 1):
      return "unsafeKeyword"
    case (.unsafeExpr, 2):
      return "unexpectedBetweenUnsafeKeywordAndExpression"
    case (.unsafeExpr, 3):
      return "expression"
    case (.unsafeExpr, 4):
      return "unexpectedAfterExpression"
    case (.valueBindingPattern, 0):
      return "unexpectedBeforeBindingSpecifier"
    case (.valueBindingPattern, 1):
      return "bindingSpecifier"
    case (.valueBindingPattern, 2):
      return "unexpectedBetweenBindingSpecifierAndPattern"
    case (.valueBindingPattern, 3):
      return "pattern"
    case (.valueBindingPattern, 4):
      return "unexpectedAfterPattern"
    case (.variableDecl, 0):
      return "unexpectedBeforeAttributes"
    case (.variableDecl, 1):
      return "attributes"
    case (.variableDecl, 2):
      return "unexpectedBetweenAttributesAndModifiers"
    case (.variableDecl, 3):
      return "modifiers"
    case (.variableDecl, 4):
      return "unexpectedBetweenModifiersAndBindingSpecifier"
    case (.variableDecl, 5):
      return "bindingSpecifier"
    case (.variableDecl, 6):
      return "unexpectedBetweenBindingSpecifierAndBindings"
    case (.variableDecl, 7):
      return "bindings"
    case (.variableDecl, 8):
      return "unexpectedAfterBindings"
    case (.versionComponent, 0):
      return "unexpectedBeforePeriod"
    case (.versionComponent, 1):
      return "period"
    case (.versionComponent, 2):
      return "unexpectedBetweenPeriodAndNumber"
    case (.versionComponent, 3):
      return "number"
    case (.versionComponent, 4):
      return "unexpectedAfterNumber"
    case (.versionTuple, 0):
      return "unexpectedBeforeMajor"
    case (.versionTuple, 1):
      return "major"
    case (.versionTuple, 2):
      return "unexpectedBetweenMajorAndComponents"
    case (.versionTuple, 3):
      return "components"
    case (.versionTuple, 4):
      return "unexpectedAfterComponents"
    case (.whereClause, 0):
      return "unexpectedBeforeWhereKeyword"
    case (.whereClause, 1):
      return "whereKeyword"
    case (.whereClause, 2):
      return "unexpectedBetweenWhereKeywordAndCondition"
    case (.whereClause, 3):
      return "condition"
    case (.whereClause, 4):
      return "unexpectedAfterCondition"
    case (.whileStmt, 0):
      return "unexpectedBeforeWhileKeyword"
    case (.whileStmt, 1):
      return "whileKeyword"
    case (.whileStmt, 2):
      return "unexpectedBetweenWhileKeywordAndConditions"
    case (.whileStmt, 3):
      return "conditions"
    case (.whileStmt, 4):
      return "unexpectedBetweenConditionsAndBody"
    case (.whileStmt, 5):
      return "body"
    case (.whileStmt, 6):
      return "unexpectedAfterBody"
    case (.wildcardPattern, 0):
      return "unexpectedBeforeWildcard"
    case (.wildcardPattern, 1):
      return "wildcard"
    case (.wildcardPattern, 2):
      return "unexpectedAfterWildcard"
    case (.yieldStmt, 0):
      return "unexpectedBeforeYieldKeyword"
    case (.yieldStmt, 1):
      return "yieldKeyword"
    case (.yieldStmt, 2):
      return "unexpectedBetweenYieldKeywordAndYieldedExpressions"
    case (.yieldStmt, 3):
      return "yieldedExpressions"
    case (.yieldStmt, 4):
      return "unexpectedAfterYieldedExpressions"
    case (.yieldedExpression, 0):
      return "unexpectedBeforeExpression"
    case (.yieldedExpression, 1):
      return "expression"
    case (.yieldedExpression, 2):
      return "unexpectedBetweenExpressionAndComma"
    case (.yieldedExpression, 3):
      return "comma"
    case (.yieldedExpression, 4):
      return "unexpectedAfterComma"
    case (.yieldedExpressionsClause, 0):
      return "unexpectedBeforeLeftParen"
    case (.yieldedExpressionsClause, 1):
      return "leftParen"
    case (.yieldedExpressionsClause, 2):
      return "unexpectedBetweenLeftParenAndElements"
    case (.yieldedExpressionsClause, 3):
      return "elements"
    case (.yieldedExpressionsClause, 4):
      return "unexpectedBetweenElementsAndRightParen"
    case (.yieldedExpressionsClause, 5):
      return "rightParen"
    case (.yieldedExpressionsClause, 6):
      return "unexpectedAfterRightParen"
    default:
      return nil
    }
  }
}
