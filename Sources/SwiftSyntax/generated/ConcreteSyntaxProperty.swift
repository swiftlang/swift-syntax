//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension ConcreteSyntaxProperty {
  fileprivate init(_ index: Int) {
    self.index = .init(index)
  }
}

#if compiler(>=5.8)
@_spi(ExperimentalLanguageFeatures)
#endif
extension ConcreteSyntaxProperty where Base == ABIAttributeArgumentsSyntax {
  public static var unexpectedBeforeProvider: ConcreteSyntaxProperty<ABIAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var provider: ConcreteSyntaxProperty<ABIAttributeArgumentsSyntax, ABIAttributeArgumentsSyntax.Provider> {
    .init(1)
  }

  public static var unexpectedAfterProvider: ConcreteSyntaxProperty<ABIAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == AccessorBlockSyntax {
  public static var unexpectedBeforeLeftBrace: ConcreteSyntaxProperty<AccessorBlockSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftBrace: ConcreteSyntaxProperty<AccessorBlockSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftBraceAndAccessors: ConcreteSyntaxProperty<AccessorBlockSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var accessors: ConcreteSyntaxProperty<AccessorBlockSyntax, AccessorBlockSyntax.Accessors> {
    .init(3)
  }

  public static var unexpectedBetweenAccessorsAndRightBrace: ConcreteSyntaxProperty<AccessorBlockSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightBrace: ConcreteSyntaxProperty<AccessorBlockSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightBrace: ConcreteSyntaxProperty<AccessorBlockSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == AccessorDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<AccessorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<AccessorDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifier: ConcreteSyntaxProperty<AccessorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifier: ConcreteSyntaxProperty<AccessorDeclSyntax, DeclModifierSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenModifierAndAccessorSpecifier: ConcreteSyntaxProperty<AccessorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var accessorSpecifier: ConcreteSyntaxProperty<AccessorDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenAccessorSpecifierAndParameters: ConcreteSyntaxProperty<AccessorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var parameters: ConcreteSyntaxProperty<AccessorDeclSyntax, AccessorParametersSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenParametersAndEffectSpecifiers: ConcreteSyntaxProperty<AccessorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var effectSpecifiers: ConcreteSyntaxProperty<AccessorDeclSyntax, AccessorEffectSpecifiersSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenEffectSpecifiersAndBody: ConcreteSyntaxProperty<AccessorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var body: ConcreteSyntaxProperty<AccessorDeclSyntax, CodeBlockSyntax?> {
    .init(11)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<AccessorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }
}

extension ConcreteSyntaxProperty where Base == AccessorEffectSpecifiersSyntax {
  public static var unexpectedBeforeAsyncSpecifier: ConcreteSyntaxProperty<AccessorEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var asyncSpecifier: ConcreteSyntaxProperty<AccessorEffectSpecifiersSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenAsyncSpecifierAndThrowsClause: ConcreteSyntaxProperty<AccessorEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var throwsClause: ConcreteSyntaxProperty<AccessorEffectSpecifiersSyntax, ThrowsClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterThrowsClause: ConcreteSyntaxProperty<AccessorEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == AccessorParametersSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<AccessorParametersSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<AccessorParametersSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndName: ConcreteSyntaxProperty<AccessorParametersSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var name: ConcreteSyntaxProperty<AccessorParametersSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenNameAndRightParen: ConcreteSyntaxProperty<AccessorParametersSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<AccessorParametersSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<AccessorParametersSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ActorDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<ActorDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<ActorDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndActorKeyword: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var actorKeyword: ConcreteSyntaxProperty<ActorDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenActorKeywordAndName: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<ActorDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndGenericParameterClause: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<ActorDeclSyntax, GenericParameterClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericParameterClauseAndInheritanceClause: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var inheritanceClause: ConcreteSyntaxProperty<ActorDeclSyntax, InheritanceClauseSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenInheritanceClauseAndGenericWhereClause: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<ActorDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenGenericWhereClauseAndMemberBlock: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var memberBlock: ConcreteSyntaxProperty<ActorDeclSyntax, MemberBlockSyntax> {
    .init(15)
  }

  public static var unexpectedAfterMemberBlock: ConcreteSyntaxProperty<ActorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == ArrayElementSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<ArrayElementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<ArrayElementSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenExpressionAndTrailingComma: ConcreteSyntaxProperty<ArrayElementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<ArrayElementSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<ArrayElementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ArrayExprSyntax {
  public static var unexpectedBeforeLeftSquare: ConcreteSyntaxProperty<ArrayExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftSquare: ConcreteSyntaxProperty<ArrayExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftSquareAndElements: ConcreteSyntaxProperty<ArrayExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var elements: ConcreteSyntaxProperty<ArrayExprSyntax, ArrayElementListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenElementsAndRightSquare: ConcreteSyntaxProperty<ArrayExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightSquare: ConcreteSyntaxProperty<ArrayExprSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightSquare: ConcreteSyntaxProperty<ArrayExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ArrayTypeSyntax {
  public static var unexpectedBeforeLeftSquare: ConcreteSyntaxProperty<ArrayTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftSquare: ConcreteSyntaxProperty<ArrayTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftSquareAndElement: ConcreteSyntaxProperty<ArrayTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var element: ConcreteSyntaxProperty<ArrayTypeSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenElementAndRightSquare: ConcreteSyntaxProperty<ArrayTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightSquare: ConcreteSyntaxProperty<ArrayTypeSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightSquare: ConcreteSyntaxProperty<ArrayTypeSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ArrowExprSyntax {
  public static var unexpectedBeforeEffectSpecifiers: ConcreteSyntaxProperty<ArrowExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var effectSpecifiers: ConcreteSyntaxProperty<ArrowExprSyntax, TypeEffectSpecifiersSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenEffectSpecifiersAndArrow: ConcreteSyntaxProperty<ArrowExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var arrow: ConcreteSyntaxProperty<ArrowExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterArrow: ConcreteSyntaxProperty<ArrowExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == AsExprSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<AsExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<AsExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenExpressionAndAsKeyword: ConcreteSyntaxProperty<AsExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var asKeyword: ConcreteSyntaxProperty<AsExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenAsKeywordAndQuestionOrExclamationMark: ConcreteSyntaxProperty<AsExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var questionOrExclamationMark: ConcreteSyntaxProperty<AsExprSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenQuestionOrExclamationMarkAndType: ConcreteSyntaxProperty<AsExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var type: ConcreteSyntaxProperty<AsExprSyntax, TypeSyntax> {
    .init(7)
  }

  public static var unexpectedAfterType: ConcreteSyntaxProperty<AsExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == AssignmentExprSyntax {
  public static var unexpectedBeforeEqual: ConcreteSyntaxProperty<AssignmentExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var equal: ConcreteSyntaxProperty<AssignmentExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterEqual: ConcreteSyntaxProperty<AssignmentExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == AssociatedTypeDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndAssociatedtypeKeyword: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var associatedtypeKeyword: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenAssociatedtypeKeywordAndName: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndInheritanceClause: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var inheritanceClause: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, InheritanceClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenInheritanceClauseAndInitializer: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var initializer: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, TypeInitializerClauseSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenInitializerAndGenericWhereClause: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedAfterGenericWhereClause: ConcreteSyntaxProperty<AssociatedTypeDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }
}

extension ConcreteSyntaxProperty where Base == AttributeSyntax {
  public static var unexpectedBeforeAtSign: ConcreteSyntaxProperty<AttributeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var atSign: ConcreteSyntaxProperty<AttributeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAtSignAndAttributeName: ConcreteSyntaxProperty<AttributeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var attributeName: ConcreteSyntaxProperty<AttributeSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenAttributeNameAndLeftParen: ConcreteSyntaxProperty<AttributeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var leftParen: ConcreteSyntaxProperty<AttributeSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenLeftParenAndArguments: ConcreteSyntaxProperty<AttributeSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var arguments: ConcreteSyntaxProperty<AttributeSyntax, AttributeSyntax.Arguments?> {
    .init(7)
  }

  public static var unexpectedBetweenArgumentsAndRightParen: ConcreteSyntaxProperty<AttributeSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var rightParen: ConcreteSyntaxProperty<AttributeSyntax, TokenSyntax?> {
    .init(9)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<AttributeSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == AttributedTypeSyntax {
  public static var unexpectedBeforeSpecifiers: ConcreteSyntaxProperty<AttributedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var specifiers: ConcreteSyntaxProperty<AttributedTypeSyntax, TypeSpecifierListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenSpecifiersAndAttributes: ConcreteSyntaxProperty<AttributedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var attributes: ConcreteSyntaxProperty<AttributedTypeSyntax, AttributeListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenAttributesAndBaseType: ConcreteSyntaxProperty<AttributedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var baseType: ConcreteSyntaxProperty<AttributedTypeSyntax, TypeSyntax> {
    .init(5)
  }

  public static var unexpectedAfterBaseType: ConcreteSyntaxProperty<AttributedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == AvailabilityArgumentSyntax {
  public static var unexpectedBeforeArgument: ConcreteSyntaxProperty<AvailabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var argument: ConcreteSyntaxProperty<AvailabilityArgumentSyntax, AvailabilityArgumentSyntax.Argument> {
    .init(1)
  }

  public static var unexpectedBetweenArgumentAndTrailingComma: ConcreteSyntaxProperty<AvailabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<AvailabilityArgumentSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<AvailabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == AvailabilityConditionSyntax {
  public static var unexpectedBeforeAvailabilityKeyword: ConcreteSyntaxProperty<AvailabilityConditionSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var availabilityKeyword: ConcreteSyntaxProperty<AvailabilityConditionSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAvailabilityKeywordAndLeftParen: ConcreteSyntaxProperty<AvailabilityConditionSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var leftParen: ConcreteSyntaxProperty<AvailabilityConditionSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenLeftParenAndAvailabilityArguments: ConcreteSyntaxProperty<AvailabilityConditionSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var availabilityArguments: ConcreteSyntaxProperty<AvailabilityConditionSyntax, AvailabilityArgumentListSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenAvailabilityArgumentsAndRightParen: ConcreteSyntaxProperty<AvailabilityConditionSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var rightParen: ConcreteSyntaxProperty<AvailabilityConditionSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<AvailabilityConditionSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == AvailabilityLabeledArgumentSyntax {
  public static var unexpectedBeforeLabel: ConcreteSyntaxProperty<AvailabilityLabeledArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var label: ConcreteSyntaxProperty<AvailabilityLabeledArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLabelAndColon: ConcreteSyntaxProperty<AvailabilityLabeledArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<AvailabilityLabeledArgumentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndValue: ConcreteSyntaxProperty<AvailabilityLabeledArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var value: ConcreteSyntaxProperty<AvailabilityLabeledArgumentSyntax, AvailabilityLabeledArgumentSyntax.Value> {
    .init(5)
  }

  public static var unexpectedAfterValue: ConcreteSyntaxProperty<AvailabilityLabeledArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == AwaitExprSyntax {
  public static var unexpectedBeforeAwaitKeyword: ConcreteSyntaxProperty<AwaitExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var awaitKeyword: ConcreteSyntaxProperty<AwaitExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAwaitKeywordAndExpression: ConcreteSyntaxProperty<AwaitExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<AwaitExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<AwaitExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == BackDeployedAttributeArgumentsSyntax {
  public static var unexpectedBeforeBeforeLabel: ConcreteSyntaxProperty<BackDeployedAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var beforeLabel: ConcreteSyntaxProperty<BackDeployedAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBeforeLabelAndColon: ConcreteSyntaxProperty<BackDeployedAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<BackDeployedAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndPlatforms: ConcreteSyntaxProperty<BackDeployedAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var platforms: ConcreteSyntaxProperty<BackDeployedAttributeArgumentsSyntax, PlatformVersionItemListSyntax> {
    .init(5)
  }

  public static var unexpectedAfterPlatforms: ConcreteSyntaxProperty<BackDeployedAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == BinaryOperatorExprSyntax {
  public static var unexpectedBeforeOperator: ConcreteSyntaxProperty<BinaryOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var `operator`: ConcreteSyntaxProperty<BinaryOperatorExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterOperator: ConcreteSyntaxProperty<BinaryOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == BooleanLiteralExprSyntax {
  public static var unexpectedBeforeLiteral: ConcreteSyntaxProperty<BooleanLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var literal: ConcreteSyntaxProperty<BooleanLiteralExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterLiteral: ConcreteSyntaxProperty<BooleanLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == BorrowExprSyntax {
  public static var unexpectedBeforeBorrowKeyword: ConcreteSyntaxProperty<BorrowExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var borrowKeyword: ConcreteSyntaxProperty<BorrowExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBorrowKeywordAndExpression: ConcreteSyntaxProperty<BorrowExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<BorrowExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<BorrowExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == BreakStmtSyntax {
  public static var unexpectedBeforeBreakKeyword: ConcreteSyntaxProperty<BreakStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var breakKeyword: ConcreteSyntaxProperty<BreakStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBreakKeywordAndLabel: ConcreteSyntaxProperty<BreakStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var label: ConcreteSyntaxProperty<BreakStmtSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterLabel: ConcreteSyntaxProperty<BreakStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == _CanImportExprSyntax {
  public static var unexpectedBeforeCanImportKeyword: ConcreteSyntaxProperty<_CanImportExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var canImportKeyword: ConcreteSyntaxProperty<_CanImportExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenCanImportKeywordAndLeftParen: ConcreteSyntaxProperty<_CanImportExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var leftParen: ConcreteSyntaxProperty<_CanImportExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenLeftParenAndImportPath: ConcreteSyntaxProperty<_CanImportExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var importPath: ConcreteSyntaxProperty<_CanImportExprSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenImportPathAndVersionInfo: ConcreteSyntaxProperty<_CanImportExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var versionInfo: ConcreteSyntaxProperty<_CanImportExprSyntax, _CanImportVersionInfoSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenVersionInfoAndRightParen: ConcreteSyntaxProperty<_CanImportExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var rightParen: ConcreteSyntaxProperty<_CanImportExprSyntax, TokenSyntax> {
    .init(9)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<_CanImportExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == _CanImportVersionInfoSyntax {
  public static var unexpectedBeforeComma: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var comma: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenCommaAndLabel: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var label: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenLabelAndColon: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var colon: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenColonAndVersion: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var version: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, VersionTupleSyntax> {
    .init(7)
  }

  public static var unexpectedAfterVersion: ConcreteSyntaxProperty<_CanImportVersionInfoSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == CatchClauseSyntax {
  public static var unexpectedBeforeCatchKeyword: ConcreteSyntaxProperty<CatchClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var catchKeyword: ConcreteSyntaxProperty<CatchClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenCatchKeywordAndCatchItems: ConcreteSyntaxProperty<CatchClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var catchItems: ConcreteSyntaxProperty<CatchClauseSyntax, CatchItemListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenCatchItemsAndBody: ConcreteSyntaxProperty<CatchClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var body: ConcreteSyntaxProperty<CatchClauseSyntax, CodeBlockSyntax> {
    .init(5)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<CatchClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == CatchItemSyntax {
  public static var unexpectedBeforePattern: ConcreteSyntaxProperty<CatchItemSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var pattern: ConcreteSyntaxProperty<CatchItemSyntax, PatternSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenPatternAndWhereClause: ConcreteSyntaxProperty<CatchItemSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var whereClause: ConcreteSyntaxProperty<CatchItemSyntax, WhereClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenWhereClauseAndTrailingComma: ConcreteSyntaxProperty<CatchItemSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var trailingComma: ConcreteSyntaxProperty<CatchItemSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<CatchItemSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ClassDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<ClassDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<ClassDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndClassKeyword: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var classKeyword: ConcreteSyntaxProperty<ClassDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenClassKeywordAndName: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<ClassDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndGenericParameterClause: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<ClassDeclSyntax, GenericParameterClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericParameterClauseAndInheritanceClause: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var inheritanceClause: ConcreteSyntaxProperty<ClassDeclSyntax, InheritanceClauseSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenInheritanceClauseAndGenericWhereClause: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<ClassDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenGenericWhereClauseAndMemberBlock: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var memberBlock: ConcreteSyntaxProperty<ClassDeclSyntax, MemberBlockSyntax> {
    .init(15)
  }

  public static var unexpectedAfterMemberBlock: ConcreteSyntaxProperty<ClassDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == ClassRestrictionTypeSyntax {
  public static var unexpectedBeforeClassKeyword: ConcreteSyntaxProperty<ClassRestrictionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var classKeyword: ConcreteSyntaxProperty<ClassRestrictionTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterClassKeyword: ConcreteSyntaxProperty<ClassRestrictionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == ClosureCaptureClauseSyntax {
  public static var unexpectedBeforeLeftSquare: ConcreteSyntaxProperty<ClosureCaptureClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftSquare: ConcreteSyntaxProperty<ClosureCaptureClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftSquareAndItems: ConcreteSyntaxProperty<ClosureCaptureClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var items: ConcreteSyntaxProperty<ClosureCaptureClauseSyntax, ClosureCaptureListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenItemsAndRightSquare: ConcreteSyntaxProperty<ClosureCaptureClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightSquare: ConcreteSyntaxProperty<ClosureCaptureClauseSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightSquare: ConcreteSyntaxProperty<ClosureCaptureClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ClosureCaptureSpecifierSyntax {
  public static var unexpectedBeforeSpecifier: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var specifier: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenSpecifierAndLeftParen: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var leftParen: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenLeftParenAndDetail: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var detail: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenDetailAndRightParen: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var rightParen: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<ClosureCaptureSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == ClosureCaptureSyntax {
  public static var unexpectedBeforeSpecifier: ConcreteSyntaxProperty<ClosureCaptureSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var specifier: ConcreteSyntaxProperty<ClosureCaptureSyntax, ClosureCaptureSpecifierSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenSpecifierAndName: ConcreteSyntaxProperty<ClosureCaptureSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var name: ConcreteSyntaxProperty<ClosureCaptureSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenNameAndInitializer: ConcreteSyntaxProperty<ClosureCaptureSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var initializer: ConcreteSyntaxProperty<ClosureCaptureSyntax, InitializerClauseSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenInitializerAndTrailingComma: ConcreteSyntaxProperty<ClosureCaptureSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var trailingComma: ConcreteSyntaxProperty<ClosureCaptureSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<ClosureCaptureSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == ClosureExprSyntax {
  public static var unexpectedBeforeLeftBrace: ConcreteSyntaxProperty<ClosureExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftBrace: ConcreteSyntaxProperty<ClosureExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftBraceAndSignature: ConcreteSyntaxProperty<ClosureExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var signature: ConcreteSyntaxProperty<ClosureExprSyntax, ClosureSignatureSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenSignatureAndStatements: ConcreteSyntaxProperty<ClosureExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var statements: ConcreteSyntaxProperty<ClosureExprSyntax, CodeBlockItemListSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenStatementsAndRightBrace: ConcreteSyntaxProperty<ClosureExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var rightBrace: ConcreteSyntaxProperty<ClosureExprSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedAfterRightBrace: ConcreteSyntaxProperty<ClosureExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == ClosureParameterClauseSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<ClosureParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<ClosureParameterClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndParameters: ConcreteSyntaxProperty<ClosureParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var parameters: ConcreteSyntaxProperty<ClosureParameterClauseSyntax, ClosureParameterListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenParametersAndRightParen: ConcreteSyntaxProperty<ClosureParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<ClosureParameterClauseSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<ClosureParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ClosureParameterSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<ClosureParameterSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<ClosureParameterSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndFirstName: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var firstName: ConcreteSyntaxProperty<ClosureParameterSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenFirstNameAndSecondName: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var secondName: ConcreteSyntaxProperty<ClosureParameterSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenSecondNameAndColon: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var colon: ConcreteSyntaxProperty<ClosureParameterSyntax, TokenSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenColonAndType: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var type: ConcreteSyntaxProperty<ClosureParameterSyntax, TypeSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenTypeAndEllipsis: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var ellipsis: ConcreteSyntaxProperty<ClosureParameterSyntax, TokenSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenEllipsisAndTrailingComma: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var trailingComma: ConcreteSyntaxProperty<ClosureParameterSyntax, TokenSyntax?> {
    .init(15)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<ClosureParameterSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == ClosureShorthandParameterSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<ClosureShorthandParameterSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<ClosureShorthandParameterSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndTrailingComma: ConcreteSyntaxProperty<ClosureShorthandParameterSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<ClosureShorthandParameterSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<ClosureShorthandParameterSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ClosureSignatureSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<ClosureSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<ClosureSignatureSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndCapture: ConcreteSyntaxProperty<ClosureSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var capture: ConcreteSyntaxProperty<ClosureSignatureSyntax, ClosureCaptureClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenCaptureAndParameterClause: ConcreteSyntaxProperty<ClosureSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var parameterClause: ConcreteSyntaxProperty<ClosureSignatureSyntax, ClosureSignatureSyntax.ParameterClause?> {
    .init(5)
  }

  public static var unexpectedBetweenParameterClauseAndEffectSpecifiers: ConcreteSyntaxProperty<ClosureSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var effectSpecifiers: ConcreteSyntaxProperty<ClosureSignatureSyntax, TypeEffectSpecifiersSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenEffectSpecifiersAndReturnClause: ConcreteSyntaxProperty<ClosureSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var returnClause: ConcreteSyntaxProperty<ClosureSignatureSyntax, ReturnClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenReturnClauseAndInKeyword: ConcreteSyntaxProperty<ClosureSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var inKeyword: ConcreteSyntaxProperty<ClosureSignatureSyntax, TokenSyntax> {
    .init(11)
  }

  public static var unexpectedAfterInKeyword: ConcreteSyntaxProperty<ClosureSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }
}

extension ConcreteSyntaxProperty where Base == CodeBlockItemSyntax {
  public static var unexpectedBeforeItem: ConcreteSyntaxProperty<CodeBlockItemSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var item: ConcreteSyntaxProperty<CodeBlockItemSyntax, CodeBlockItemSyntax.Item> {
    .init(1)
  }

  public static var unexpectedBetweenItemAndSemicolon: ConcreteSyntaxProperty<CodeBlockItemSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var semicolon: ConcreteSyntaxProperty<CodeBlockItemSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterSemicolon: ConcreteSyntaxProperty<CodeBlockItemSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == CodeBlockSyntax {
  public static var unexpectedBeforeLeftBrace: ConcreteSyntaxProperty<CodeBlockSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftBrace: ConcreteSyntaxProperty<CodeBlockSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftBraceAndStatements: ConcreteSyntaxProperty<CodeBlockSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var statements: ConcreteSyntaxProperty<CodeBlockSyntax, CodeBlockItemListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenStatementsAndRightBrace: ConcreteSyntaxProperty<CodeBlockSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightBrace: ConcreteSyntaxProperty<CodeBlockSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightBrace: ConcreteSyntaxProperty<CodeBlockSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == CompositionTypeElementSyntax {
  public static var unexpectedBeforeType: ConcreteSyntaxProperty<CompositionTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var type: ConcreteSyntaxProperty<CompositionTypeElementSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenTypeAndAmpersand: ConcreteSyntaxProperty<CompositionTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var ampersand: ConcreteSyntaxProperty<CompositionTypeElementSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterAmpersand: ConcreteSyntaxProperty<CompositionTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == CompositionTypeSyntax {
  public static var unexpectedBeforeElements: ConcreteSyntaxProperty<CompositionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var elements: ConcreteSyntaxProperty<CompositionTypeSyntax, CompositionTypeElementListSyntax> {
    .init(1)
  }

  public static var unexpectedAfterElements: ConcreteSyntaxProperty<CompositionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == ConditionElementSyntax {
  public static var unexpectedBeforeCondition: ConcreteSyntaxProperty<ConditionElementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var condition: ConcreteSyntaxProperty<ConditionElementSyntax, ConditionElementSyntax.Condition> {
    .init(1)
  }

  public static var unexpectedBetweenConditionAndTrailingComma: ConcreteSyntaxProperty<ConditionElementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<ConditionElementSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<ConditionElementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ConformanceRequirementSyntax {
  public static var unexpectedBeforeLeftType: ConcreteSyntaxProperty<ConformanceRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftType: ConcreteSyntaxProperty<ConformanceRequirementSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftTypeAndColon: ConcreteSyntaxProperty<ConformanceRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<ConformanceRequirementSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndRightType: ConcreteSyntaxProperty<ConformanceRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightType: ConcreteSyntaxProperty<ConformanceRequirementSyntax, TypeSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightType: ConcreteSyntaxProperty<ConformanceRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ConsumeExprSyntax {
  public static var unexpectedBeforeConsumeKeyword: ConcreteSyntaxProperty<ConsumeExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var consumeKeyword: ConcreteSyntaxProperty<ConsumeExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenConsumeKeywordAndExpression: ConcreteSyntaxProperty<ConsumeExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<ConsumeExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<ConsumeExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ContinueStmtSyntax {
  public static var unexpectedBeforeContinueKeyword: ConcreteSyntaxProperty<ContinueStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var continueKeyword: ConcreteSyntaxProperty<ContinueStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenContinueKeywordAndLabel: ConcreteSyntaxProperty<ContinueStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var label: ConcreteSyntaxProperty<ContinueStmtSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterLabel: ConcreteSyntaxProperty<ContinueStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ConventionAttributeArgumentsSyntax {
  public static var unexpectedBeforeConventionLabel: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var conventionLabel: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenConventionLabelAndComma: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var comma: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenCommaAndCTypeLabel: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var cTypeLabel: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenCTypeLabelAndColon: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var colon: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenColonAndCTypeString: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var cTypeString: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, StringLiteralExprSyntax?> {
    .init(9)
  }

  public static var unexpectedAfterCTypeString: ConcreteSyntaxProperty<ConventionAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == ConventionWitnessMethodAttributeArgumentsSyntax {
  public static var unexpectedBeforeWitnessMethodLabel: ConcreteSyntaxProperty<ConventionWitnessMethodAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var witnessMethodLabel: ConcreteSyntaxProperty<ConventionWitnessMethodAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenWitnessMethodLabelAndColon: ConcreteSyntaxProperty<ConventionWitnessMethodAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<ConventionWitnessMethodAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndProtocolName: ConcreteSyntaxProperty<ConventionWitnessMethodAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var protocolName: ConcreteSyntaxProperty<ConventionWitnessMethodAttributeArgumentsSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterProtocolName: ConcreteSyntaxProperty<ConventionWitnessMethodAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == CopyExprSyntax {
  public static var unexpectedBeforeCopyKeyword: ConcreteSyntaxProperty<CopyExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var copyKeyword: ConcreteSyntaxProperty<CopyExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenCopyKeywordAndExpression: ConcreteSyntaxProperty<CopyExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<CopyExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<CopyExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == DeclModifierDetailSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<DeclModifierDetailSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<DeclModifierDetailSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndDetail: ConcreteSyntaxProperty<DeclModifierDetailSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var detail: ConcreteSyntaxProperty<DeclModifierDetailSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenDetailAndRightParen: ConcreteSyntaxProperty<DeclModifierDetailSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<DeclModifierDetailSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<DeclModifierDetailSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == DeclModifierSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<DeclModifierSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<DeclModifierSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndDetail: ConcreteSyntaxProperty<DeclModifierSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var detail: ConcreteSyntaxProperty<DeclModifierSyntax, DeclModifierDetailSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterDetail: ConcreteSyntaxProperty<DeclModifierSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == DeclNameArgumentSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<DeclNameArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<DeclNameArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndColon: ConcreteSyntaxProperty<DeclNameArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<DeclNameArgumentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterColon: ConcreteSyntaxProperty<DeclNameArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == DeclNameArgumentsSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<DeclNameArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<DeclNameArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndArguments: ConcreteSyntaxProperty<DeclNameArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var arguments: ConcreteSyntaxProperty<DeclNameArgumentsSyntax, DeclNameArgumentListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenArgumentsAndRightParen: ConcreteSyntaxProperty<DeclNameArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<DeclNameArgumentsSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<DeclNameArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == DeclReferenceExprSyntax {
  public static var unexpectedBeforeBaseName: ConcreteSyntaxProperty<DeclReferenceExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var baseName: ConcreteSyntaxProperty<DeclReferenceExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBaseNameAndArgumentNames: ConcreteSyntaxProperty<DeclReferenceExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var argumentNames: ConcreteSyntaxProperty<DeclReferenceExprSyntax, DeclNameArgumentsSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterArgumentNames: ConcreteSyntaxProperty<DeclReferenceExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == DeferStmtSyntax {
  public static var unexpectedBeforeDeferKeyword: ConcreteSyntaxProperty<DeferStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var deferKeyword: ConcreteSyntaxProperty<DeferStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenDeferKeywordAndBody: ConcreteSyntaxProperty<DeferStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var body: ConcreteSyntaxProperty<DeferStmtSyntax, CodeBlockSyntax> {
    .init(3)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<DeferStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == DeinitializerDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<DeinitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<DeinitializerDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<DeinitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<DeinitializerDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndDeinitKeyword: ConcreteSyntaxProperty<DeinitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var deinitKeyword: ConcreteSyntaxProperty<DeinitializerDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenDeinitKeywordAndEffectSpecifiers: ConcreteSyntaxProperty<DeinitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var effectSpecifiers: ConcreteSyntaxProperty<DeinitializerDeclSyntax, DeinitializerEffectSpecifiersSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenEffectSpecifiersAndBody: ConcreteSyntaxProperty<DeinitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var body: ConcreteSyntaxProperty<DeinitializerDeclSyntax, CodeBlockSyntax?> {
    .init(9)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<DeinitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == DeinitializerEffectSpecifiersSyntax {
  public static var unexpectedBeforeAsyncSpecifier: ConcreteSyntaxProperty<DeinitializerEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var asyncSpecifier: ConcreteSyntaxProperty<DeinitializerEffectSpecifiersSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedAfterAsyncSpecifier: ConcreteSyntaxProperty<DeinitializerEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == DerivativeAttributeArgumentsSyntax {
  public static var unexpectedBeforeOfLabel: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var ofLabel: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenOfLabelAndColon: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndOriginalDeclName: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var originalDeclName: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, ExprSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenOriginalDeclNameAndPeriod: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var period: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenPeriodAndAccessorSpecifier: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var accessorSpecifier: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, TokenSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenAccessorSpecifierAndComma: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var comma: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, TokenSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenCommaAndArguments: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var arguments: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, DifferentiabilityWithRespectToArgumentSyntax?> {
    .init(13)
  }

  public static var unexpectedAfterArguments: ConcreteSyntaxProperty<DerivativeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }
}

extension ConcreteSyntaxProperty where Base == DesignatedTypeSyntax {
  public static var unexpectedBeforeLeadingComma: ConcreteSyntaxProperty<DesignatedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leadingComma: ConcreteSyntaxProperty<DesignatedTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeadingCommaAndName: ConcreteSyntaxProperty<DesignatedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var name: ConcreteSyntaxProperty<DesignatedTypeSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterName: ConcreteSyntaxProperty<DesignatedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == DictionaryElementSyntax {
  public static var unexpectedBeforeKey: ConcreteSyntaxProperty<DictionaryElementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var key: ConcreteSyntaxProperty<DictionaryElementSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenKeyAndColon: ConcreteSyntaxProperty<DictionaryElementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<DictionaryElementSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndValue: ConcreteSyntaxProperty<DictionaryElementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var value: ConcreteSyntaxProperty<DictionaryElementSyntax, ExprSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenValueAndTrailingComma: ConcreteSyntaxProperty<DictionaryElementSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var trailingComma: ConcreteSyntaxProperty<DictionaryElementSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<DictionaryElementSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == DictionaryExprSyntax {
  public static var unexpectedBeforeLeftSquare: ConcreteSyntaxProperty<DictionaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftSquare: ConcreteSyntaxProperty<DictionaryExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftSquareAndContent: ConcreteSyntaxProperty<DictionaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var content: ConcreteSyntaxProperty<DictionaryExprSyntax, DictionaryExprSyntax.Content> {
    .init(3)
  }

  public static var unexpectedBetweenContentAndRightSquare: ConcreteSyntaxProperty<DictionaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightSquare: ConcreteSyntaxProperty<DictionaryExprSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightSquare: ConcreteSyntaxProperty<DictionaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == DictionaryTypeSyntax {
  public static var unexpectedBeforeLeftSquare: ConcreteSyntaxProperty<DictionaryTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftSquare: ConcreteSyntaxProperty<DictionaryTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftSquareAndKey: ConcreteSyntaxProperty<DictionaryTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var key: ConcreteSyntaxProperty<DictionaryTypeSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenKeyAndColon: ConcreteSyntaxProperty<DictionaryTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var colon: ConcreteSyntaxProperty<DictionaryTypeSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenColonAndValue: ConcreteSyntaxProperty<DictionaryTypeSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var value: ConcreteSyntaxProperty<DictionaryTypeSyntax, TypeSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenValueAndRightSquare: ConcreteSyntaxProperty<DictionaryTypeSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var rightSquare: ConcreteSyntaxProperty<DictionaryTypeSyntax, TokenSyntax> {
    .init(9)
  }

  public static var unexpectedAfterRightSquare: ConcreteSyntaxProperty<DictionaryTypeSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == DifferentiabilityArgumentSyntax {
  public static var unexpectedBeforeArgument: ConcreteSyntaxProperty<DifferentiabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var argument: ConcreteSyntaxProperty<DifferentiabilityArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenArgumentAndTrailingComma: ConcreteSyntaxProperty<DifferentiabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<DifferentiabilityArgumentSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<DifferentiabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == DifferentiabilityArgumentsSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<DifferentiabilityArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<DifferentiabilityArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndArguments: ConcreteSyntaxProperty<DifferentiabilityArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var arguments: ConcreteSyntaxProperty<DifferentiabilityArgumentsSyntax, DifferentiabilityArgumentListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenArgumentsAndRightParen: ConcreteSyntaxProperty<DifferentiabilityArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<DifferentiabilityArgumentsSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<DifferentiabilityArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == DifferentiabilityWithRespectToArgumentSyntax {
  public static var unexpectedBeforeWrtLabel: ConcreteSyntaxProperty<DifferentiabilityWithRespectToArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var wrtLabel: ConcreteSyntaxProperty<DifferentiabilityWithRespectToArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenWrtLabelAndColon: ConcreteSyntaxProperty<DifferentiabilityWithRespectToArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<DifferentiabilityWithRespectToArgumentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndArguments: ConcreteSyntaxProperty<DifferentiabilityWithRespectToArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var arguments: ConcreteSyntaxProperty<DifferentiabilityWithRespectToArgumentSyntax, DifferentiabilityWithRespectToArgumentSyntax.Arguments> {
    .init(5)
  }

  public static var unexpectedAfterArguments: ConcreteSyntaxProperty<DifferentiabilityWithRespectToArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == DifferentiableAttributeArgumentsSyntax {
  public static var unexpectedBeforeKindSpecifier: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var kindSpecifier: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenKindSpecifierAndKindSpecifierComma: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var kindSpecifierComma: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenKindSpecifierCommaAndArguments: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var arguments: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, DifferentiabilityWithRespectToArgumentSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenArgumentsAndArgumentsComma: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var argumentsComma: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenArgumentsCommaAndGenericWhereClause: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, GenericWhereClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedAfterGenericWhereClause: ConcreteSyntaxProperty<DifferentiableAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == DiscardAssignmentExprSyntax {
  public static var unexpectedBeforeWildcard: ConcreteSyntaxProperty<DiscardAssignmentExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var wildcard: ConcreteSyntaxProperty<DiscardAssignmentExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterWildcard: ConcreteSyntaxProperty<DiscardAssignmentExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == DiscardStmtSyntax {
  public static var unexpectedBeforeDiscardKeyword: ConcreteSyntaxProperty<DiscardStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var discardKeyword: ConcreteSyntaxProperty<DiscardStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenDiscardKeywordAndExpression: ConcreteSyntaxProperty<DiscardStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<DiscardStmtSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<DiscardStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

#if compiler(>=5.8)
@_spi(ExperimentalLanguageFeatures)
#endif
extension ConcreteSyntaxProperty where Base == DoExprSyntax {
  public static var unexpectedBeforeDoKeyword: ConcreteSyntaxProperty<DoExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var doKeyword: ConcreteSyntaxProperty<DoExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenDoKeywordAndBody: ConcreteSyntaxProperty<DoExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var body: ConcreteSyntaxProperty<DoExprSyntax, CodeBlockSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenBodyAndCatchClauses: ConcreteSyntaxProperty<DoExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var catchClauses: ConcreteSyntaxProperty<DoExprSyntax, CatchClauseListSyntax> {
    .init(5)
  }

  public static var unexpectedAfterCatchClauses: ConcreteSyntaxProperty<DoExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == DoStmtSyntax {
  public static var unexpectedBeforeDoKeyword: ConcreteSyntaxProperty<DoStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var doKeyword: ConcreteSyntaxProperty<DoStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenDoKeywordAndThrowsClause: ConcreteSyntaxProperty<DoStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var throwsClause: ConcreteSyntaxProperty<DoStmtSyntax, ThrowsClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenThrowsClauseAndBody: ConcreteSyntaxProperty<DoStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var body: ConcreteSyntaxProperty<DoStmtSyntax, CodeBlockSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenBodyAndCatchClauses: ConcreteSyntaxProperty<DoStmtSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var catchClauses: ConcreteSyntaxProperty<DoStmtSyntax, CatchClauseListSyntax> {
    .init(7)
  }

  public static var unexpectedAfterCatchClauses: ConcreteSyntaxProperty<DoStmtSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == DocumentationAttributeArgumentSyntax {
  public static var unexpectedBeforeLabel: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var label: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLabelAndColon: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndValue: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var value: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, DocumentationAttributeArgumentSyntax.Value> {
    .init(5)
  }

  public static var unexpectedBetweenValueAndTrailingComma: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var trailingComma: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<DocumentationAttributeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == DynamicReplacementAttributeArgumentsSyntax {
  public static var unexpectedBeforeForLabel: ConcreteSyntaxProperty<DynamicReplacementAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var forLabel: ConcreteSyntaxProperty<DynamicReplacementAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenForLabelAndColon: ConcreteSyntaxProperty<DynamicReplacementAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<DynamicReplacementAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndDeclName: ConcreteSyntaxProperty<DynamicReplacementAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var declName: ConcreteSyntaxProperty<DynamicReplacementAttributeArgumentsSyntax, DeclReferenceExprSyntax> {
    .init(5)
  }

  public static var unexpectedAfterDeclName: ConcreteSyntaxProperty<DynamicReplacementAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == EditorPlaceholderDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<EditorPlaceholderDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<EditorPlaceholderDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<EditorPlaceholderDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<EditorPlaceholderDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndPlaceholder: ConcreteSyntaxProperty<EditorPlaceholderDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var placeholder: ConcreteSyntaxProperty<EditorPlaceholderDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterPlaceholder: ConcreteSyntaxProperty<EditorPlaceholderDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == EditorPlaceholderExprSyntax {
  public static var unexpectedBeforePlaceholder: ConcreteSyntaxProperty<EditorPlaceholderExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var placeholder: ConcreteSyntaxProperty<EditorPlaceholderExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterPlaceholder: ConcreteSyntaxProperty<EditorPlaceholderExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == EnumCaseDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<EnumCaseDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<EnumCaseDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<EnumCaseDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<EnumCaseDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndCaseKeyword: ConcreteSyntaxProperty<EnumCaseDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var caseKeyword: ConcreteSyntaxProperty<EnumCaseDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenCaseKeywordAndElements: ConcreteSyntaxProperty<EnumCaseDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var elements: ConcreteSyntaxProperty<EnumCaseDeclSyntax, EnumCaseElementListSyntax> {
    .init(7)
  }

  public static var unexpectedAfterElements: ConcreteSyntaxProperty<EnumCaseDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == EnumCaseElementSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<EnumCaseElementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<EnumCaseElementSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndParameterClause: ConcreteSyntaxProperty<EnumCaseElementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var parameterClause: ConcreteSyntaxProperty<EnumCaseElementSyntax, EnumCaseParameterClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenParameterClauseAndRawValue: ConcreteSyntaxProperty<EnumCaseElementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rawValue: ConcreteSyntaxProperty<EnumCaseElementSyntax, InitializerClauseSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenRawValueAndTrailingComma: ConcreteSyntaxProperty<EnumCaseElementSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var trailingComma: ConcreteSyntaxProperty<EnumCaseElementSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<EnumCaseElementSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == EnumCaseParameterClauseSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<EnumCaseParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<EnumCaseParameterClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndParameters: ConcreteSyntaxProperty<EnumCaseParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var parameters: ConcreteSyntaxProperty<EnumCaseParameterClauseSyntax, EnumCaseParameterListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenParametersAndRightParen: ConcreteSyntaxProperty<EnumCaseParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<EnumCaseParameterClauseSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<EnumCaseParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == EnumCaseParameterSyntax {
  public static var unexpectedBeforeModifiers: ConcreteSyntaxProperty<EnumCaseParameterSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var modifiers: ConcreteSyntaxProperty<EnumCaseParameterSyntax, DeclModifierListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenModifiersAndFirstName: ConcreteSyntaxProperty<EnumCaseParameterSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var firstName: ConcreteSyntaxProperty<EnumCaseParameterSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenFirstNameAndSecondName: ConcreteSyntaxProperty<EnumCaseParameterSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var secondName: ConcreteSyntaxProperty<EnumCaseParameterSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenSecondNameAndColon: ConcreteSyntaxProperty<EnumCaseParameterSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var colon: ConcreteSyntaxProperty<EnumCaseParameterSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenColonAndType: ConcreteSyntaxProperty<EnumCaseParameterSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var type: ConcreteSyntaxProperty<EnumCaseParameterSyntax, TypeSyntax> {
    .init(9)
  }

  public static var unexpectedBetweenTypeAndDefaultValue: ConcreteSyntaxProperty<EnumCaseParameterSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var defaultValue: ConcreteSyntaxProperty<EnumCaseParameterSyntax, InitializerClauseSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenDefaultValueAndTrailingComma: ConcreteSyntaxProperty<EnumCaseParameterSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var trailingComma: ConcreteSyntaxProperty<EnumCaseParameterSyntax, TokenSyntax?> {
    .init(13)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<EnumCaseParameterSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }
}

extension ConcreteSyntaxProperty where Base == EnumDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<EnumDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<EnumDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndEnumKeyword: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var enumKeyword: ConcreteSyntaxProperty<EnumDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenEnumKeywordAndName: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<EnumDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndGenericParameterClause: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<EnumDeclSyntax, GenericParameterClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericParameterClauseAndInheritanceClause: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var inheritanceClause: ConcreteSyntaxProperty<EnumDeclSyntax, InheritanceClauseSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenInheritanceClauseAndGenericWhereClause: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<EnumDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenGenericWhereClauseAndMemberBlock: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var memberBlock: ConcreteSyntaxProperty<EnumDeclSyntax, MemberBlockSyntax> {
    .init(15)
  }

  public static var unexpectedAfterMemberBlock: ConcreteSyntaxProperty<EnumDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == ExposeAttributeArgumentsSyntax {
  public static var unexpectedBeforeLanguage: ConcreteSyntaxProperty<ExposeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var language: ConcreteSyntaxProperty<ExposeAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLanguageAndComma: ConcreteSyntaxProperty<ExposeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var comma: ConcreteSyntaxProperty<ExposeAttributeArgumentsSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenCommaAndCxxName: ConcreteSyntaxProperty<ExposeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var cxxName: ConcreteSyntaxProperty<ExposeAttributeArgumentsSyntax, StringLiteralExprSyntax?> {
    .init(5)
  }

  public static var unexpectedAfterCxxName: ConcreteSyntaxProperty<ExposeAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ExpressionPatternSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<ExpressionPatternSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<ExpressionPatternSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<ExpressionPatternSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == ExpressionSegmentSyntax {
  public static var unexpectedBeforeBackslash: ConcreteSyntaxProperty<ExpressionSegmentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var backslash: ConcreteSyntaxProperty<ExpressionSegmentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBackslashAndPounds: ConcreteSyntaxProperty<ExpressionSegmentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var pounds: ConcreteSyntaxProperty<ExpressionSegmentSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenPoundsAndLeftParen: ConcreteSyntaxProperty<ExpressionSegmentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var leftParen: ConcreteSyntaxProperty<ExpressionSegmentSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenLeftParenAndExpressions: ConcreteSyntaxProperty<ExpressionSegmentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var expressions: ConcreteSyntaxProperty<ExpressionSegmentSyntax, LabeledExprListSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenExpressionsAndRightParen: ConcreteSyntaxProperty<ExpressionSegmentSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var rightParen: ConcreteSyntaxProperty<ExpressionSegmentSyntax, TokenSyntax> {
    .init(9)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<ExpressionSegmentSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == ExpressionStmtSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<ExpressionStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<ExpressionStmtSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<ExpressionStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == ExtensionDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<ExtensionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<ExtensionDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<ExtensionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<ExtensionDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndExtensionKeyword: ConcreteSyntaxProperty<ExtensionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var extensionKeyword: ConcreteSyntaxProperty<ExtensionDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenExtensionKeywordAndExtendedType: ConcreteSyntaxProperty<ExtensionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var extendedType: ConcreteSyntaxProperty<ExtensionDeclSyntax, TypeSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenExtendedTypeAndInheritanceClause: ConcreteSyntaxProperty<ExtensionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var inheritanceClause: ConcreteSyntaxProperty<ExtensionDeclSyntax, InheritanceClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenInheritanceClauseAndGenericWhereClause: ConcreteSyntaxProperty<ExtensionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<ExtensionDeclSyntax, GenericWhereClauseSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenGenericWhereClauseAndMemberBlock: ConcreteSyntaxProperty<ExtensionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var memberBlock: ConcreteSyntaxProperty<ExtensionDeclSyntax, MemberBlockSyntax> {
    .init(13)
  }

  public static var unexpectedAfterMemberBlock: ConcreteSyntaxProperty<ExtensionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }
}

extension ConcreteSyntaxProperty where Base == FallThroughStmtSyntax {
  public static var unexpectedBeforeFallthroughKeyword: ConcreteSyntaxProperty<FallThroughStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var fallthroughKeyword: ConcreteSyntaxProperty<FallThroughStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterFallthroughKeyword: ConcreteSyntaxProperty<FallThroughStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == FloatLiteralExprSyntax {
  public static var unexpectedBeforeLiteral: ConcreteSyntaxProperty<FloatLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var literal: ConcreteSyntaxProperty<FloatLiteralExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterLiteral: ConcreteSyntaxProperty<FloatLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == ForStmtSyntax {
  public static var unexpectedBeforeForKeyword: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var forKeyword: ConcreteSyntaxProperty<ForStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenForKeywordAndTryKeyword: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var tryKeyword: ConcreteSyntaxProperty<ForStmtSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenTryKeywordAndAwaitKeyword: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var awaitKeyword: ConcreteSyntaxProperty<ForStmtSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenAwaitKeywordAndCaseKeyword: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var caseKeyword: ConcreteSyntaxProperty<ForStmtSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenCaseKeywordAndPattern: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var pattern: ConcreteSyntaxProperty<ForStmtSyntax, PatternSyntax> {
    .init(9)
  }

  public static var unexpectedBetweenPatternAndTypeAnnotation: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var typeAnnotation: ConcreteSyntaxProperty<ForStmtSyntax, TypeAnnotationSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenTypeAnnotationAndInKeyword: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var inKeyword: ConcreteSyntaxProperty<ForStmtSyntax, TokenSyntax> {
    .init(13)
  }

  public static var unexpectedBetweenInKeywordAndSequence: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var sequence: ConcreteSyntaxProperty<ForStmtSyntax, ExprSyntax> {
    .init(15)
  }

  public static var unexpectedBetweenSequenceAndWhereClause: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }

  public static var whereClause: ConcreteSyntaxProperty<ForStmtSyntax, WhereClauseSyntax?> {
    .init(17)
  }

  public static var unexpectedBetweenWhereClauseAndBody: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(18)
  }

  public static var body: ConcreteSyntaxProperty<ForStmtSyntax, CodeBlockSyntax> {
    .init(19)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<ForStmtSyntax, UnexpectedNodesSyntax?> {
    .init(20)
  }
}

extension ConcreteSyntaxProperty where Base == ForceUnwrapExprSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<ForceUnwrapExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<ForceUnwrapExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenExpressionAndExclamationMark: ConcreteSyntaxProperty<ForceUnwrapExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var exclamationMark: ConcreteSyntaxProperty<ForceUnwrapExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExclamationMark: ConcreteSyntaxProperty<ForceUnwrapExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == FunctionCallExprSyntax {
  public static var unexpectedBeforeCalledExpression: ConcreteSyntaxProperty<FunctionCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var calledExpression: ConcreteSyntaxProperty<FunctionCallExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenCalledExpressionAndLeftParen: ConcreteSyntaxProperty<FunctionCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var leftParen: ConcreteSyntaxProperty<FunctionCallExprSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenLeftParenAndArguments: ConcreteSyntaxProperty<FunctionCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var arguments: ConcreteSyntaxProperty<FunctionCallExprSyntax, LabeledExprListSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenArgumentsAndRightParen: ConcreteSyntaxProperty<FunctionCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var rightParen: ConcreteSyntaxProperty<FunctionCallExprSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenRightParenAndTrailingClosure: ConcreteSyntaxProperty<FunctionCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var trailingClosure: ConcreteSyntaxProperty<FunctionCallExprSyntax, ClosureExprSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: ConcreteSyntaxProperty<FunctionCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var additionalTrailingClosures: ConcreteSyntaxProperty<FunctionCallExprSyntax, MultipleTrailingClosureElementListSyntax> {
    .init(11)
  }

  public static var unexpectedAfterAdditionalTrailingClosures: ConcreteSyntaxProperty<FunctionCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }
}

extension ConcreteSyntaxProperty where Base == FunctionDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<FunctionDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<FunctionDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndFuncKeyword: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var funcKeyword: ConcreteSyntaxProperty<FunctionDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenFuncKeywordAndName: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<FunctionDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndGenericParameterClause: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<FunctionDeclSyntax, GenericParameterClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericParameterClauseAndSignature: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var signature: ConcreteSyntaxProperty<FunctionDeclSyntax, FunctionSignatureSyntax> {
    .init(11)
  }

  public static var unexpectedBetweenSignatureAndGenericWhereClause: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<FunctionDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenGenericWhereClauseAndBody: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var body: ConcreteSyntaxProperty<FunctionDeclSyntax, CodeBlockSyntax?> {
    .init(15)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<FunctionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == FunctionEffectSpecifiersSyntax {
  public static var unexpectedBeforeAsyncSpecifier: ConcreteSyntaxProperty<FunctionEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var asyncSpecifier: ConcreteSyntaxProperty<FunctionEffectSpecifiersSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenAsyncSpecifierAndThrowsClause: ConcreteSyntaxProperty<FunctionEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var throwsClause: ConcreteSyntaxProperty<FunctionEffectSpecifiersSyntax, ThrowsClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterThrowsClause: ConcreteSyntaxProperty<FunctionEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == FunctionParameterClauseSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<FunctionParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<FunctionParameterClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndParameters: ConcreteSyntaxProperty<FunctionParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var parameters: ConcreteSyntaxProperty<FunctionParameterClauseSyntax, FunctionParameterListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenParametersAndRightParen: ConcreteSyntaxProperty<FunctionParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<FunctionParameterClauseSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<FunctionParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == FunctionParameterSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<FunctionParameterSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<FunctionParameterSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndFirstName: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var firstName: ConcreteSyntaxProperty<FunctionParameterSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenFirstNameAndSecondName: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var secondName: ConcreteSyntaxProperty<FunctionParameterSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenSecondNameAndColon: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var colon: ConcreteSyntaxProperty<FunctionParameterSyntax, TokenSyntax> {
    .init(9)
  }

  public static var unexpectedBetweenColonAndType: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var type: ConcreteSyntaxProperty<FunctionParameterSyntax, TypeSyntax> {
    .init(11)
  }

  public static var unexpectedBetweenTypeAndEllipsis: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var ellipsis: ConcreteSyntaxProperty<FunctionParameterSyntax, TokenSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenEllipsisAndDefaultValue: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var defaultValue: ConcreteSyntaxProperty<FunctionParameterSyntax, InitializerClauseSyntax?> {
    .init(15)
  }

  public static var unexpectedBetweenDefaultValueAndTrailingComma: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }

  public static var trailingComma: ConcreteSyntaxProperty<FunctionParameterSyntax, TokenSyntax?> {
    .init(17)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<FunctionParameterSyntax, UnexpectedNodesSyntax?> {
    .init(18)
  }
}

extension ConcreteSyntaxProperty where Base == FunctionSignatureSyntax {
  public static var unexpectedBeforeParameterClause: ConcreteSyntaxProperty<FunctionSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var parameterClause: ConcreteSyntaxProperty<FunctionSignatureSyntax, FunctionParameterClauseSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenParameterClauseAndEffectSpecifiers: ConcreteSyntaxProperty<FunctionSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var effectSpecifiers: ConcreteSyntaxProperty<FunctionSignatureSyntax, FunctionEffectSpecifiersSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenEffectSpecifiersAndReturnClause: ConcreteSyntaxProperty<FunctionSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var returnClause: ConcreteSyntaxProperty<FunctionSignatureSyntax, ReturnClauseSyntax?> {
    .init(5)
  }

  public static var unexpectedAfterReturnClause: ConcreteSyntaxProperty<FunctionSignatureSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == FunctionTypeSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<FunctionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<FunctionTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndParameters: ConcreteSyntaxProperty<FunctionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var parameters: ConcreteSyntaxProperty<FunctionTypeSyntax, TupleTypeElementListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenParametersAndRightParen: ConcreteSyntaxProperty<FunctionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<FunctionTypeSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenRightParenAndEffectSpecifiers: ConcreteSyntaxProperty<FunctionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var effectSpecifiers: ConcreteSyntaxProperty<FunctionTypeSyntax, TypeEffectSpecifiersSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenEffectSpecifiersAndReturnClause: ConcreteSyntaxProperty<FunctionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var returnClause: ConcreteSyntaxProperty<FunctionTypeSyntax, ReturnClauseSyntax> {
    .init(9)
  }

  public static var unexpectedAfterReturnClause: ConcreteSyntaxProperty<FunctionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == GenericArgumentClauseSyntax {
  public static var unexpectedBeforeLeftAngle: ConcreteSyntaxProperty<GenericArgumentClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftAngle: ConcreteSyntaxProperty<GenericArgumentClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftAngleAndArguments: ConcreteSyntaxProperty<GenericArgumentClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var arguments: ConcreteSyntaxProperty<GenericArgumentClauseSyntax, GenericArgumentListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenArgumentsAndRightAngle: ConcreteSyntaxProperty<GenericArgumentClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightAngle: ConcreteSyntaxProperty<GenericArgumentClauseSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightAngle: ConcreteSyntaxProperty<GenericArgumentClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == GenericArgumentSyntax {
  public static var unexpectedBeforeArgument: ConcreteSyntaxProperty<GenericArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var argument: ConcreteSyntaxProperty<GenericArgumentSyntax, GenericArgumentSyntax.Argument> {
    .init(1)
  }

  public static var unexpectedBetweenArgumentAndTrailingComma: ConcreteSyntaxProperty<GenericArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<GenericArgumentSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<GenericArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == GenericParameterClauseSyntax {
  public static var unexpectedBeforeLeftAngle: ConcreteSyntaxProperty<GenericParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftAngle: ConcreteSyntaxProperty<GenericParameterClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftAngleAndParameters: ConcreteSyntaxProperty<GenericParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var parameters: ConcreteSyntaxProperty<GenericParameterClauseSyntax, GenericParameterListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenParametersAndGenericWhereClause: ConcreteSyntaxProperty<GenericParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<GenericParameterClauseSyntax, GenericWhereClauseSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenGenericWhereClauseAndRightAngle: ConcreteSyntaxProperty<GenericParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var rightAngle: ConcreteSyntaxProperty<GenericParameterClauseSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedAfterRightAngle: ConcreteSyntaxProperty<GenericParameterClauseSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == GenericParameterSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<GenericParameterSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<GenericParameterSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndSpecifier: ConcreteSyntaxProperty<GenericParameterSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var specifier: ConcreteSyntaxProperty<GenericParameterSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenSpecifierAndName: ConcreteSyntaxProperty<GenericParameterSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var name: ConcreteSyntaxProperty<GenericParameterSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenNameAndColon: ConcreteSyntaxProperty<GenericParameterSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var colon: ConcreteSyntaxProperty<GenericParameterSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenColonAndInheritedType: ConcreteSyntaxProperty<GenericParameterSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var inheritedType: ConcreteSyntaxProperty<GenericParameterSyntax, TypeSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenInheritedTypeAndTrailingComma: ConcreteSyntaxProperty<GenericParameterSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var trailingComma: ConcreteSyntaxProperty<GenericParameterSyntax, TokenSyntax?> {
    .init(11)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<GenericParameterSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }
}

extension ConcreteSyntaxProperty where Base == GenericRequirementSyntax {
  public static var unexpectedBeforeRequirement: ConcreteSyntaxProperty<GenericRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var requirement: ConcreteSyntaxProperty<GenericRequirementSyntax, GenericRequirementSyntax.Requirement> {
    .init(1)
  }

  public static var unexpectedBetweenRequirementAndTrailingComma: ConcreteSyntaxProperty<GenericRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<GenericRequirementSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<GenericRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == GenericSpecializationExprSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<GenericSpecializationExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<GenericSpecializationExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenExpressionAndGenericArgumentClause: ConcreteSyntaxProperty<GenericSpecializationExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var genericArgumentClause: ConcreteSyntaxProperty<GenericSpecializationExprSyntax, GenericArgumentClauseSyntax> {
    .init(3)
  }

  public static var unexpectedAfterGenericArgumentClause: ConcreteSyntaxProperty<GenericSpecializationExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == GenericWhereClauseSyntax {
  public static var unexpectedBeforeWhereKeyword: ConcreteSyntaxProperty<GenericWhereClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var whereKeyword: ConcreteSyntaxProperty<GenericWhereClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenWhereKeywordAndRequirements: ConcreteSyntaxProperty<GenericWhereClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var requirements: ConcreteSyntaxProperty<GenericWhereClauseSyntax, GenericRequirementListSyntax> {
    .init(3)
  }

  public static var unexpectedAfterRequirements: ConcreteSyntaxProperty<GenericWhereClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == GuardStmtSyntax {
  public static var unexpectedBeforeGuardKeyword: ConcreteSyntaxProperty<GuardStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var guardKeyword: ConcreteSyntaxProperty<GuardStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenGuardKeywordAndConditions: ConcreteSyntaxProperty<GuardStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var conditions: ConcreteSyntaxProperty<GuardStmtSyntax, ConditionElementListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenConditionsAndElseKeyword: ConcreteSyntaxProperty<GuardStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var elseKeyword: ConcreteSyntaxProperty<GuardStmtSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenElseKeywordAndBody: ConcreteSyntaxProperty<GuardStmtSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var body: ConcreteSyntaxProperty<GuardStmtSyntax, CodeBlockSyntax> {
    .init(7)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<GuardStmtSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == IdentifierPatternSyntax {
  public static var unexpectedBeforeIdentifier: ConcreteSyntaxProperty<IdentifierPatternSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var identifier: ConcreteSyntaxProperty<IdentifierPatternSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterIdentifier: ConcreteSyntaxProperty<IdentifierPatternSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == IdentifierTypeSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<IdentifierTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<IdentifierTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndGenericArgumentClause: ConcreteSyntaxProperty<IdentifierTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var genericArgumentClause: ConcreteSyntaxProperty<IdentifierTypeSyntax, GenericArgumentClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterGenericArgumentClause: ConcreteSyntaxProperty<IdentifierTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == IfConfigClauseSyntax {
  public static var unexpectedBeforePoundKeyword: ConcreteSyntaxProperty<IfConfigClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var poundKeyword: ConcreteSyntaxProperty<IfConfigClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenPoundKeywordAndCondition: ConcreteSyntaxProperty<IfConfigClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var condition: ConcreteSyntaxProperty<IfConfigClauseSyntax, ExprSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenConditionAndElements: ConcreteSyntaxProperty<IfConfigClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var elements: ConcreteSyntaxProperty<IfConfigClauseSyntax, IfConfigClauseSyntax.Elements?> {
    .init(5)
  }

  public static var unexpectedAfterElements: ConcreteSyntaxProperty<IfConfigClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == IfConfigDeclSyntax {
  public static var unexpectedBeforeClauses: ConcreteSyntaxProperty<IfConfigDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var clauses: ConcreteSyntaxProperty<IfConfigDeclSyntax, IfConfigClauseListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenClausesAndPoundEndif: ConcreteSyntaxProperty<IfConfigDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var poundEndif: ConcreteSyntaxProperty<IfConfigDeclSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterPoundEndif: ConcreteSyntaxProperty<IfConfigDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == IfExprSyntax {
  public static var unexpectedBeforeIfKeyword: ConcreteSyntaxProperty<IfExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var ifKeyword: ConcreteSyntaxProperty<IfExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenIfKeywordAndConditions: ConcreteSyntaxProperty<IfExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var conditions: ConcreteSyntaxProperty<IfExprSyntax, ConditionElementListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenConditionsAndBody: ConcreteSyntaxProperty<IfExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var body: ConcreteSyntaxProperty<IfExprSyntax, CodeBlockSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenBodyAndElseKeyword: ConcreteSyntaxProperty<IfExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var elseKeyword: ConcreteSyntaxProperty<IfExprSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenElseKeywordAndElseBody: ConcreteSyntaxProperty<IfExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var elseBody: ConcreteSyntaxProperty<IfExprSyntax, IfExprSyntax.ElseBody?> {
    .init(9)
  }

  public static var unexpectedAfterElseBody: ConcreteSyntaxProperty<IfExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == ImplementsAttributeArgumentsSyntax {
  public static var unexpectedBeforeType: ConcreteSyntaxProperty<ImplementsAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var type: ConcreteSyntaxProperty<ImplementsAttributeArgumentsSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenTypeAndComma: ConcreteSyntaxProperty<ImplementsAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var comma: ConcreteSyntaxProperty<ImplementsAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenCommaAndDeclName: ConcreteSyntaxProperty<ImplementsAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var declName: ConcreteSyntaxProperty<ImplementsAttributeArgumentsSyntax, DeclReferenceExprSyntax> {
    .init(5)
  }

  public static var unexpectedAfterDeclName: ConcreteSyntaxProperty<ImplementsAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == ImplicitlyUnwrappedOptionalTypeSyntax {
  public static var unexpectedBeforeWrappedType: ConcreteSyntaxProperty<ImplicitlyUnwrappedOptionalTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var wrappedType: ConcreteSyntaxProperty<ImplicitlyUnwrappedOptionalTypeSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenWrappedTypeAndExclamationMark: ConcreteSyntaxProperty<ImplicitlyUnwrappedOptionalTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var exclamationMark: ConcreteSyntaxProperty<ImplicitlyUnwrappedOptionalTypeSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExclamationMark: ConcreteSyntaxProperty<ImplicitlyUnwrappedOptionalTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ImportDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<ImportDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<ImportDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<ImportDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<ImportDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndImportKeyword: ConcreteSyntaxProperty<ImportDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var importKeyword: ConcreteSyntaxProperty<ImportDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenImportKeywordAndImportKindSpecifier: ConcreteSyntaxProperty<ImportDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var importKindSpecifier: ConcreteSyntaxProperty<ImportDeclSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenImportKindSpecifierAndPath: ConcreteSyntaxProperty<ImportDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var path: ConcreteSyntaxProperty<ImportDeclSyntax, ImportPathComponentListSyntax> {
    .init(9)
  }

  public static var unexpectedAfterPath: ConcreteSyntaxProperty<ImportDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == ImportPathComponentSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<ImportPathComponentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<ImportPathComponentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndTrailingPeriod: ConcreteSyntaxProperty<ImportPathComponentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingPeriod: ConcreteSyntaxProperty<ImportPathComponentSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingPeriod: ConcreteSyntaxProperty<ImportPathComponentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == InOutExprSyntax {
  public static var unexpectedBeforeAmpersand: ConcreteSyntaxProperty<InOutExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var ampersand: ConcreteSyntaxProperty<InOutExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAmpersandAndExpression: ConcreteSyntaxProperty<InOutExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<InOutExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<InOutExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == InfixOperatorExprSyntax {
  public static var unexpectedBeforeLeftOperand: ConcreteSyntaxProperty<InfixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftOperand: ConcreteSyntaxProperty<InfixOperatorExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftOperandAndOperator: ConcreteSyntaxProperty<InfixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var `operator`: ConcreteSyntaxProperty<InfixOperatorExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenOperatorAndRightOperand: ConcreteSyntaxProperty<InfixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightOperand: ConcreteSyntaxProperty<InfixOperatorExprSyntax, ExprSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightOperand: ConcreteSyntaxProperty<InfixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == InheritanceClauseSyntax {
  public static var unexpectedBeforeColon: ConcreteSyntaxProperty<InheritanceClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var colon: ConcreteSyntaxProperty<InheritanceClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenColonAndInheritedTypes: ConcreteSyntaxProperty<InheritanceClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var inheritedTypes: ConcreteSyntaxProperty<InheritanceClauseSyntax, InheritedTypeListSyntax> {
    .init(3)
  }

  public static var unexpectedAfterInheritedTypes: ConcreteSyntaxProperty<InheritanceClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == InheritedTypeSyntax {
  public static var unexpectedBeforeType: ConcreteSyntaxProperty<InheritedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var type: ConcreteSyntaxProperty<InheritedTypeSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenTypeAndTrailingComma: ConcreteSyntaxProperty<InheritedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<InheritedTypeSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<InheritedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == InitializerClauseSyntax {
  public static var unexpectedBeforeEqual: ConcreteSyntaxProperty<InitializerClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var equal: ConcreteSyntaxProperty<InitializerClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenEqualAndValue: ConcreteSyntaxProperty<InitializerClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var value: ConcreteSyntaxProperty<InitializerClauseSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterValue: ConcreteSyntaxProperty<InitializerClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == InitializerDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<InitializerDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<InitializerDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndInitKeyword: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var initKeyword: ConcreteSyntaxProperty<InitializerDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenInitKeywordAndOptionalMark: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var optionalMark: ConcreteSyntaxProperty<InitializerDeclSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenOptionalMarkAndGenericParameterClause: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<InitializerDeclSyntax, GenericParameterClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericParameterClauseAndSignature: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var signature: ConcreteSyntaxProperty<InitializerDeclSyntax, FunctionSignatureSyntax> {
    .init(11)
  }

  public static var unexpectedBetweenSignatureAndGenericWhereClause: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<InitializerDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenGenericWhereClauseAndBody: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var body: ConcreteSyntaxProperty<InitializerDeclSyntax, CodeBlockSyntax?> {
    .init(15)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<InitializerDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == IntegerLiteralExprSyntax {
  public static var unexpectedBeforeLiteral: ConcreteSyntaxProperty<IntegerLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var literal: ConcreteSyntaxProperty<IntegerLiteralExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterLiteral: ConcreteSyntaxProperty<IntegerLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == IsExprSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<IsExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<IsExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenExpressionAndIsKeyword: ConcreteSyntaxProperty<IsExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var isKeyword: ConcreteSyntaxProperty<IsExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenIsKeywordAndType: ConcreteSyntaxProperty<IsExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var type: ConcreteSyntaxProperty<IsExprSyntax, TypeSyntax> {
    .init(5)
  }

  public static var unexpectedAfterType: ConcreteSyntaxProperty<IsExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == IsTypePatternSyntax {
  public static var unexpectedBeforeIsKeyword: ConcreteSyntaxProperty<IsTypePatternSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var isKeyword: ConcreteSyntaxProperty<IsTypePatternSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenIsKeywordAndType: ConcreteSyntaxProperty<IsTypePatternSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var type: ConcreteSyntaxProperty<IsTypePatternSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterType: ConcreteSyntaxProperty<IsTypePatternSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == KeyPathComponentSyntax {
  public static var unexpectedBeforePeriod: ConcreteSyntaxProperty<KeyPathComponentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var period: ConcreteSyntaxProperty<KeyPathComponentSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenPeriodAndComponent: ConcreteSyntaxProperty<KeyPathComponentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var component: ConcreteSyntaxProperty<KeyPathComponentSyntax, KeyPathComponentSyntax.Component> {
    .init(3)
  }

  public static var unexpectedAfterComponent: ConcreteSyntaxProperty<KeyPathComponentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == KeyPathExprSyntax {
  public static var unexpectedBeforeBackslash: ConcreteSyntaxProperty<KeyPathExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var backslash: ConcreteSyntaxProperty<KeyPathExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBackslashAndRoot: ConcreteSyntaxProperty<KeyPathExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var root: ConcreteSyntaxProperty<KeyPathExprSyntax, TypeSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenRootAndComponents: ConcreteSyntaxProperty<KeyPathExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var components: ConcreteSyntaxProperty<KeyPathExprSyntax, KeyPathComponentListSyntax> {
    .init(5)
  }

  public static var unexpectedAfterComponents: ConcreteSyntaxProperty<KeyPathExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == KeyPathOptionalComponentSyntax {
  public static var unexpectedBeforeQuestionOrExclamationMark: ConcreteSyntaxProperty<KeyPathOptionalComponentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var questionOrExclamationMark: ConcreteSyntaxProperty<KeyPathOptionalComponentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterQuestionOrExclamationMark: ConcreteSyntaxProperty<KeyPathOptionalComponentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == KeyPathPropertyComponentSyntax {
  public static var unexpectedBeforeDeclName: ConcreteSyntaxProperty<KeyPathPropertyComponentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var declName: ConcreteSyntaxProperty<KeyPathPropertyComponentSyntax, DeclReferenceExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenDeclNameAndGenericArgumentClause: ConcreteSyntaxProperty<KeyPathPropertyComponentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var genericArgumentClause: ConcreteSyntaxProperty<KeyPathPropertyComponentSyntax, GenericArgumentClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterGenericArgumentClause: ConcreteSyntaxProperty<KeyPathPropertyComponentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == KeyPathSubscriptComponentSyntax {
  public static var unexpectedBeforeLeftSquare: ConcreteSyntaxProperty<KeyPathSubscriptComponentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftSquare: ConcreteSyntaxProperty<KeyPathSubscriptComponentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftSquareAndArguments: ConcreteSyntaxProperty<KeyPathSubscriptComponentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var arguments: ConcreteSyntaxProperty<KeyPathSubscriptComponentSyntax, LabeledExprListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenArgumentsAndRightSquare: ConcreteSyntaxProperty<KeyPathSubscriptComponentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightSquare: ConcreteSyntaxProperty<KeyPathSubscriptComponentSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightSquare: ConcreteSyntaxProperty<KeyPathSubscriptComponentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == LabeledExprSyntax {
  public static var unexpectedBeforeLabel: ConcreteSyntaxProperty<LabeledExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var label: ConcreteSyntaxProperty<LabeledExprSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenLabelAndColon: ConcreteSyntaxProperty<LabeledExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<LabeledExprSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndExpression: ConcreteSyntaxProperty<LabeledExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var expression: ConcreteSyntaxProperty<LabeledExprSyntax, ExprSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenExpressionAndTrailingComma: ConcreteSyntaxProperty<LabeledExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var trailingComma: ConcreteSyntaxProperty<LabeledExprSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<LabeledExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == LabeledSpecializeArgumentSyntax {
  public static var unexpectedBeforeLabel: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var label: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLabelAndColon: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndValue: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var value: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenValueAndTrailingComma: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var trailingComma: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<LabeledSpecializeArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == LabeledStmtSyntax {
  public static var unexpectedBeforeLabel: ConcreteSyntaxProperty<LabeledStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var label: ConcreteSyntaxProperty<LabeledStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLabelAndColon: ConcreteSyntaxProperty<LabeledStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<LabeledStmtSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndStatement: ConcreteSyntaxProperty<LabeledStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var statement: ConcreteSyntaxProperty<LabeledStmtSyntax, StmtSyntax> {
    .init(5)
  }

  public static var unexpectedAfterStatement: ConcreteSyntaxProperty<LabeledStmtSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == LayoutRequirementSyntax {
  public static var unexpectedBeforeType: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var type: ConcreteSyntaxProperty<LayoutRequirementSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenTypeAndColon: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<LayoutRequirementSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndLayoutSpecifier: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var layoutSpecifier: ConcreteSyntaxProperty<LayoutRequirementSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenLayoutSpecifierAndLeftParen: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var leftParen: ConcreteSyntaxProperty<LayoutRequirementSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenLeftParenAndSize: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var size: ConcreteSyntaxProperty<LayoutRequirementSyntax, TokenSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenSizeAndComma: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var comma: ConcreteSyntaxProperty<LayoutRequirementSyntax, TokenSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenCommaAndAlignment: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var alignment: ConcreteSyntaxProperty<LayoutRequirementSyntax, TokenSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenAlignmentAndRightParen: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var rightParen: ConcreteSyntaxProperty<LayoutRequirementSyntax, TokenSyntax?> {
    .init(15)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<LayoutRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

#if compiler(>=5.8)
@_spi(ExperimentalLanguageFeatures)
#endif
extension ConcreteSyntaxProperty where Base == LifetimeSpecifierArgumentSyntax {
  public static var unexpectedBeforeParameter: ConcreteSyntaxProperty<LifetimeSpecifierArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var parameter: ConcreteSyntaxProperty<LifetimeSpecifierArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenParameterAndTrailingComma: ConcreteSyntaxProperty<LifetimeSpecifierArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<LifetimeSpecifierArgumentSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<LifetimeSpecifierArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

#if compiler(>=5.8)
@_spi(ExperimentalLanguageFeatures)
#endif
extension ConcreteSyntaxProperty where Base == LifetimeTypeSpecifierSyntax {
  public static var unexpectedBeforeDependsOnKeyword: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var dependsOnKeyword: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenDependsOnKeywordAndLeftParen: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var leftParen: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenLeftParenAndScopedKeyword: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var scopedKeyword: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenScopedKeywordAndArguments: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var arguments: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, LifetimeSpecifierArgumentListSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenArgumentsAndRightParen: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var rightParen: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, TokenSyntax> {
    .init(9)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<LifetimeTypeSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == MacroDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<MacroDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<MacroDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndMacroKeyword: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var macroKeyword: ConcreteSyntaxProperty<MacroDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenMacroKeywordAndName: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<MacroDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndGenericParameterClause: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<MacroDeclSyntax, GenericParameterClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericParameterClauseAndSignature: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var signature: ConcreteSyntaxProperty<MacroDeclSyntax, FunctionSignatureSyntax> {
    .init(11)
  }

  public static var unexpectedBetweenSignatureAndDefinition: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var definition: ConcreteSyntaxProperty<MacroDeclSyntax, InitializerClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenDefinitionAndGenericWhereClause: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<MacroDeclSyntax, GenericWhereClauseSyntax?> {
    .init(15)
  }

  public static var unexpectedAfterGenericWhereClause: ConcreteSyntaxProperty<MacroDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == MacroExpansionDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndPound: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var pound: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenPoundAndMacroName: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var macroName: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenMacroNameAndGenericArgumentClause: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericArgumentClause: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, GenericArgumentClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericArgumentClauseAndLeftParen: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var leftParen: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, TokenSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenLeftParenAndArguments: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var arguments: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, LabeledExprListSyntax> {
    .init(13)
  }

  public static var unexpectedBetweenArgumentsAndRightParen: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var rightParen: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, TokenSyntax?> {
    .init(15)
  }

  public static var unexpectedBetweenRightParenAndTrailingClosure: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }

  public static var trailingClosure: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, ClosureExprSyntax?> {
    .init(17)
  }

  public static var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(18)
  }

  public static var additionalTrailingClosures: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, MultipleTrailingClosureElementListSyntax> {
    .init(19)
  }

  public static var unexpectedAfterAdditionalTrailingClosures: ConcreteSyntaxProperty<MacroExpansionDeclSyntax, UnexpectedNodesSyntax?> {
    .init(20)
  }
}

extension ConcreteSyntaxProperty where Base == MacroExpansionExprSyntax {
  public static var unexpectedBeforePound: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var pound: ConcreteSyntaxProperty<MacroExpansionExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenPoundAndMacroName: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var macroName: ConcreteSyntaxProperty<MacroExpansionExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenMacroNameAndGenericArgumentClause: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var genericArgumentClause: ConcreteSyntaxProperty<MacroExpansionExprSyntax, GenericArgumentClauseSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenGenericArgumentClauseAndLeftParen: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var leftParen: ConcreteSyntaxProperty<MacroExpansionExprSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenLeftParenAndArguments: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var arguments: ConcreteSyntaxProperty<MacroExpansionExprSyntax, LabeledExprListSyntax> {
    .init(9)
  }

  public static var unexpectedBetweenArgumentsAndRightParen: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var rightParen: ConcreteSyntaxProperty<MacroExpansionExprSyntax, TokenSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenRightParenAndTrailingClosure: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var trailingClosure: ConcreteSyntaxProperty<MacroExpansionExprSyntax, ClosureExprSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var additionalTrailingClosures: ConcreteSyntaxProperty<MacroExpansionExprSyntax, MultipleTrailingClosureElementListSyntax> {
    .init(15)
  }

  public static var unexpectedAfterAdditionalTrailingClosures: ConcreteSyntaxProperty<MacroExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == MatchingPatternConditionSyntax {
  public static var unexpectedBeforeCaseKeyword: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var caseKeyword: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenCaseKeywordAndPattern: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var pattern: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, PatternSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenPatternAndTypeAnnotation: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var typeAnnotation: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, TypeAnnotationSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenTypeAnnotationAndInitializer: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var initializer: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, InitializerClauseSyntax> {
    .init(7)
  }

  public static var unexpectedAfterInitializer: ConcreteSyntaxProperty<MatchingPatternConditionSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == MemberAccessExprSyntax {
  public static var unexpectedBeforeBase: ConcreteSyntaxProperty<MemberAccessExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var base: ConcreteSyntaxProperty<MemberAccessExprSyntax, ExprSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenBaseAndPeriod: ConcreteSyntaxProperty<MemberAccessExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var period: ConcreteSyntaxProperty<MemberAccessExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenPeriodAndDeclName: ConcreteSyntaxProperty<MemberAccessExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var declName: ConcreteSyntaxProperty<MemberAccessExprSyntax, DeclReferenceExprSyntax> {
    .init(5)
  }

  public static var unexpectedAfterDeclName: ConcreteSyntaxProperty<MemberAccessExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == MemberBlockItemSyntax {
  public static var unexpectedBeforeDecl: ConcreteSyntaxProperty<MemberBlockItemSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var decl: ConcreteSyntaxProperty<MemberBlockItemSyntax, DeclSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenDeclAndSemicolon: ConcreteSyntaxProperty<MemberBlockItemSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var semicolon: ConcreteSyntaxProperty<MemberBlockItemSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterSemicolon: ConcreteSyntaxProperty<MemberBlockItemSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == MemberBlockSyntax {
  public static var unexpectedBeforeLeftBrace: ConcreteSyntaxProperty<MemberBlockSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftBrace: ConcreteSyntaxProperty<MemberBlockSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftBraceAndMembers: ConcreteSyntaxProperty<MemberBlockSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var members: ConcreteSyntaxProperty<MemberBlockSyntax, MemberBlockItemListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenMembersAndRightBrace: ConcreteSyntaxProperty<MemberBlockSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightBrace: ConcreteSyntaxProperty<MemberBlockSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightBrace: ConcreteSyntaxProperty<MemberBlockSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == MemberTypeSyntax {
  public static var unexpectedBeforeBaseType: ConcreteSyntaxProperty<MemberTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var baseType: ConcreteSyntaxProperty<MemberTypeSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBaseTypeAndPeriod: ConcreteSyntaxProperty<MemberTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var period: ConcreteSyntaxProperty<MemberTypeSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenPeriodAndName: ConcreteSyntaxProperty<MemberTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var name: ConcreteSyntaxProperty<MemberTypeSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenNameAndGenericArgumentClause: ConcreteSyntaxProperty<MemberTypeSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var genericArgumentClause: ConcreteSyntaxProperty<MemberTypeSyntax, GenericArgumentClauseSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterGenericArgumentClause: ConcreteSyntaxProperty<MemberTypeSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == MetatypeTypeSyntax {
  public static var unexpectedBeforeBaseType: ConcreteSyntaxProperty<MetatypeTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var baseType: ConcreteSyntaxProperty<MetatypeTypeSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBaseTypeAndPeriod: ConcreteSyntaxProperty<MetatypeTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var period: ConcreteSyntaxProperty<MetatypeTypeSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenPeriodAndMetatypeSpecifier: ConcreteSyntaxProperty<MetatypeTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var metatypeSpecifier: ConcreteSyntaxProperty<MetatypeTypeSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterMetatypeSpecifier: ConcreteSyntaxProperty<MetatypeTypeSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == MissingDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<MissingDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<MissingDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<MissingDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<MissingDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndPlaceholder: ConcreteSyntaxProperty<MissingDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var placeholder: ConcreteSyntaxProperty<MissingDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterPlaceholder: ConcreteSyntaxProperty<MissingDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == MissingExprSyntax {
  public static var unexpectedBeforePlaceholder: ConcreteSyntaxProperty<MissingExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var placeholder: ConcreteSyntaxProperty<MissingExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterPlaceholder: ConcreteSyntaxProperty<MissingExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == MissingPatternSyntax {
  public static var unexpectedBeforePlaceholder: ConcreteSyntaxProperty<MissingPatternSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var placeholder: ConcreteSyntaxProperty<MissingPatternSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterPlaceholder: ConcreteSyntaxProperty<MissingPatternSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == MissingStmtSyntax {
  public static var unexpectedBeforePlaceholder: ConcreteSyntaxProperty<MissingStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var placeholder: ConcreteSyntaxProperty<MissingStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterPlaceholder: ConcreteSyntaxProperty<MissingStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == MissingSyntax {
  public static var unexpectedBeforePlaceholder: ConcreteSyntaxProperty<MissingSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var placeholder: ConcreteSyntaxProperty<MissingSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterPlaceholder: ConcreteSyntaxProperty<MissingSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == MissingTypeSyntax {
  public static var unexpectedBeforePlaceholder: ConcreteSyntaxProperty<MissingTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var placeholder: ConcreteSyntaxProperty<MissingTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterPlaceholder: ConcreteSyntaxProperty<MissingTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == MultipleTrailingClosureElementSyntax {
  public static var unexpectedBeforeLabel: ConcreteSyntaxProperty<MultipleTrailingClosureElementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var label: ConcreteSyntaxProperty<MultipleTrailingClosureElementSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLabelAndColon: ConcreteSyntaxProperty<MultipleTrailingClosureElementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<MultipleTrailingClosureElementSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndClosure: ConcreteSyntaxProperty<MultipleTrailingClosureElementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var closure: ConcreteSyntaxProperty<MultipleTrailingClosureElementSyntax, ClosureExprSyntax> {
    .init(5)
  }

  public static var unexpectedAfterClosure: ConcreteSyntaxProperty<MultipleTrailingClosureElementSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == NamedOpaqueReturnTypeSyntax {
  public static var unexpectedBeforeGenericParameterClause: ConcreteSyntaxProperty<NamedOpaqueReturnTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<NamedOpaqueReturnTypeSyntax, GenericParameterClauseSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenGenericParameterClauseAndType: ConcreteSyntaxProperty<NamedOpaqueReturnTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var type: ConcreteSyntaxProperty<NamedOpaqueReturnTypeSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterType: ConcreteSyntaxProperty<NamedOpaqueReturnTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == NilLiteralExprSyntax {
  public static var unexpectedBeforeNilKeyword: ConcreteSyntaxProperty<NilLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var nilKeyword: ConcreteSyntaxProperty<NilLiteralExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterNilKeyword: ConcreteSyntaxProperty<NilLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == ObjCSelectorPieceSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<ObjCSelectorPieceSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<ObjCSelectorPieceSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndColon: ConcreteSyntaxProperty<ObjCSelectorPieceSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<ObjCSelectorPieceSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterColon: ConcreteSyntaxProperty<ObjCSelectorPieceSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == OpaqueReturnTypeOfAttributeArgumentsSyntax {
  public static var unexpectedBeforeMangledName: ConcreteSyntaxProperty<OpaqueReturnTypeOfAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var mangledName: ConcreteSyntaxProperty<OpaqueReturnTypeOfAttributeArgumentsSyntax, StringLiteralExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenMangledNameAndComma: ConcreteSyntaxProperty<OpaqueReturnTypeOfAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var comma: ConcreteSyntaxProperty<OpaqueReturnTypeOfAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenCommaAndOrdinal: ConcreteSyntaxProperty<OpaqueReturnTypeOfAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var ordinal: ConcreteSyntaxProperty<OpaqueReturnTypeOfAttributeArgumentsSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterOrdinal: ConcreteSyntaxProperty<OpaqueReturnTypeOfAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == OperatorDeclSyntax {
  public static var unexpectedBeforeFixitySpecifier: ConcreteSyntaxProperty<OperatorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var fixitySpecifier: ConcreteSyntaxProperty<OperatorDeclSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenFixitySpecifierAndOperatorKeyword: ConcreteSyntaxProperty<OperatorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var operatorKeyword: ConcreteSyntaxProperty<OperatorDeclSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenOperatorKeywordAndName: ConcreteSyntaxProperty<OperatorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var name: ConcreteSyntaxProperty<OperatorDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenNameAndOperatorPrecedenceAndTypes: ConcreteSyntaxProperty<OperatorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var operatorPrecedenceAndTypes: ConcreteSyntaxProperty<OperatorDeclSyntax, OperatorPrecedenceAndTypesSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterOperatorPrecedenceAndTypes: ConcreteSyntaxProperty<OperatorDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == OperatorPrecedenceAndTypesSyntax {
  public static var unexpectedBeforeColon: ConcreteSyntaxProperty<OperatorPrecedenceAndTypesSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var colon: ConcreteSyntaxProperty<OperatorPrecedenceAndTypesSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenColonAndPrecedenceGroup: ConcreteSyntaxProperty<OperatorPrecedenceAndTypesSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var precedenceGroup: ConcreteSyntaxProperty<OperatorPrecedenceAndTypesSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenPrecedenceGroupAndDesignatedTypes: ConcreteSyntaxProperty<OperatorPrecedenceAndTypesSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var designatedTypes: ConcreteSyntaxProperty<OperatorPrecedenceAndTypesSyntax, DesignatedTypeListSyntax> {
    .init(5)
  }

  public static var unexpectedAfterDesignatedTypes: ConcreteSyntaxProperty<OperatorPrecedenceAndTypesSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == OptionalBindingConditionSyntax {
  public static var unexpectedBeforeBindingSpecifier: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var bindingSpecifier: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBindingSpecifierAndPattern: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var pattern: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, PatternSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenPatternAndTypeAnnotation: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var typeAnnotation: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, TypeAnnotationSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenTypeAnnotationAndInitializer: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var initializer: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, InitializerClauseSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterInitializer: ConcreteSyntaxProperty<OptionalBindingConditionSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == OptionalChainingExprSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<OptionalChainingExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<OptionalChainingExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenExpressionAndQuestionMark: ConcreteSyntaxProperty<OptionalChainingExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var questionMark: ConcreteSyntaxProperty<OptionalChainingExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterQuestionMark: ConcreteSyntaxProperty<OptionalChainingExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == OptionalTypeSyntax {
  public static var unexpectedBeforeWrappedType: ConcreteSyntaxProperty<OptionalTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var wrappedType: ConcreteSyntaxProperty<OptionalTypeSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenWrappedTypeAndQuestionMark: ConcreteSyntaxProperty<OptionalTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var questionMark: ConcreteSyntaxProperty<OptionalTypeSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterQuestionMark: ConcreteSyntaxProperty<OptionalTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == OriginallyDefinedInAttributeArgumentsSyntax {
  public static var unexpectedBeforeModuleLabel: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var moduleLabel: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenModuleLabelAndColon: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndModuleName: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var moduleName: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, StringLiteralExprSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenModuleNameAndComma: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var comma: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenCommaAndPlatforms: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var platforms: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, PlatformVersionItemListSyntax> {
    .init(9)
  }

  public static var unexpectedAfterPlatforms: ConcreteSyntaxProperty<OriginallyDefinedInAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == PackElementExprSyntax {
  public static var unexpectedBeforeEachKeyword: ConcreteSyntaxProperty<PackElementExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var eachKeyword: ConcreteSyntaxProperty<PackElementExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenEachKeywordAndPack: ConcreteSyntaxProperty<PackElementExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var pack: ConcreteSyntaxProperty<PackElementExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterPack: ConcreteSyntaxProperty<PackElementExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PackElementTypeSyntax {
  public static var unexpectedBeforeEachKeyword: ConcreteSyntaxProperty<PackElementTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var eachKeyword: ConcreteSyntaxProperty<PackElementTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenEachKeywordAndPack: ConcreteSyntaxProperty<PackElementTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var pack: ConcreteSyntaxProperty<PackElementTypeSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterPack: ConcreteSyntaxProperty<PackElementTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PackExpansionExprSyntax {
  public static var unexpectedBeforeRepeatKeyword: ConcreteSyntaxProperty<PackExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var repeatKeyword: ConcreteSyntaxProperty<PackExpansionExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenRepeatKeywordAndRepetitionPattern: ConcreteSyntaxProperty<PackExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var repetitionPattern: ConcreteSyntaxProperty<PackExpansionExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterRepetitionPattern: ConcreteSyntaxProperty<PackExpansionExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PackExpansionTypeSyntax {
  public static var unexpectedBeforeRepeatKeyword: ConcreteSyntaxProperty<PackExpansionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var repeatKeyword: ConcreteSyntaxProperty<PackExpansionTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenRepeatKeywordAndRepetitionPattern: ConcreteSyntaxProperty<PackExpansionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var repetitionPattern: ConcreteSyntaxProperty<PackExpansionTypeSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterRepetitionPattern: ConcreteSyntaxProperty<PackExpansionTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PatternBindingSyntax {
  public static var unexpectedBeforePattern: ConcreteSyntaxProperty<PatternBindingSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var pattern: ConcreteSyntaxProperty<PatternBindingSyntax, PatternSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenPatternAndTypeAnnotation: ConcreteSyntaxProperty<PatternBindingSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var typeAnnotation: ConcreteSyntaxProperty<PatternBindingSyntax, TypeAnnotationSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenTypeAnnotationAndInitializer: ConcreteSyntaxProperty<PatternBindingSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var initializer: ConcreteSyntaxProperty<PatternBindingSyntax, InitializerClauseSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenInitializerAndAccessorBlock: ConcreteSyntaxProperty<PatternBindingSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var accessorBlock: ConcreteSyntaxProperty<PatternBindingSyntax, AccessorBlockSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenAccessorBlockAndTrailingComma: ConcreteSyntaxProperty<PatternBindingSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var trailingComma: ConcreteSyntaxProperty<PatternBindingSyntax, TokenSyntax?> {
    .init(9)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<PatternBindingSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == PatternExprSyntax {
  public static var unexpectedBeforePattern: ConcreteSyntaxProperty<PatternExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var pattern: ConcreteSyntaxProperty<PatternExprSyntax, PatternSyntax> {
    .init(1)
  }

  public static var unexpectedAfterPattern: ConcreteSyntaxProperty<PatternExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == PlatformVersionItemSyntax {
  public static var unexpectedBeforePlatformVersion: ConcreteSyntaxProperty<PlatformVersionItemSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var platformVersion: ConcreteSyntaxProperty<PlatformVersionItemSyntax, PlatformVersionSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenPlatformVersionAndTrailingComma: ConcreteSyntaxProperty<PlatformVersionItemSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<PlatformVersionItemSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<PlatformVersionItemSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PlatformVersionSyntax {
  public static var unexpectedBeforePlatform: ConcreteSyntaxProperty<PlatformVersionSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var platform: ConcreteSyntaxProperty<PlatformVersionSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenPlatformAndVersion: ConcreteSyntaxProperty<PlatformVersionSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var version: ConcreteSyntaxProperty<PlatformVersionSyntax, VersionTupleSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterVersion: ConcreteSyntaxProperty<PlatformVersionSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PostfixIfConfigExprSyntax {
  public static var unexpectedBeforeBase: ConcreteSyntaxProperty<PostfixIfConfigExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var base: ConcreteSyntaxProperty<PostfixIfConfigExprSyntax, ExprSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenBaseAndConfig: ConcreteSyntaxProperty<PostfixIfConfigExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var config: ConcreteSyntaxProperty<PostfixIfConfigExprSyntax, IfConfigDeclSyntax> {
    .init(3)
  }

  public static var unexpectedAfterConfig: ConcreteSyntaxProperty<PostfixIfConfigExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PostfixOperatorExprSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<PostfixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<PostfixOperatorExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenExpressionAndOperator: ConcreteSyntaxProperty<PostfixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var `operator`: ConcreteSyntaxProperty<PostfixOperatorExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterOperator: ConcreteSyntaxProperty<PostfixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PoundSourceLocationArgumentsSyntax {
  public static var unexpectedBeforeFileLabel: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var fileLabel: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenFileLabelAndFileColon: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var fileColon: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenFileColonAndFileName: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var fileName: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, SimpleStringLiteralExprSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenFileNameAndComma: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var comma: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenCommaAndLineLabel: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var lineLabel: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, TokenSyntax> {
    .init(9)
  }

  public static var unexpectedBetweenLineLabelAndLineColon: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var lineColon: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, TokenSyntax> {
    .init(11)
  }

  public static var unexpectedBetweenLineColonAndLineNumber: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var lineNumber: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, TokenSyntax> {
    .init(13)
  }

  public static var unexpectedAfterLineNumber: ConcreteSyntaxProperty<PoundSourceLocationArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }
}

extension ConcreteSyntaxProperty where Base == PoundSourceLocationSyntax {
  public static var unexpectedBeforePoundSourceLocation: ConcreteSyntaxProperty<PoundSourceLocationSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var poundSourceLocation: ConcreteSyntaxProperty<PoundSourceLocationSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenPoundSourceLocationAndLeftParen: ConcreteSyntaxProperty<PoundSourceLocationSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var leftParen: ConcreteSyntaxProperty<PoundSourceLocationSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenLeftParenAndArguments: ConcreteSyntaxProperty<PoundSourceLocationSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var arguments: ConcreteSyntaxProperty<PoundSourceLocationSyntax, PoundSourceLocationArgumentsSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenArgumentsAndRightParen: ConcreteSyntaxProperty<PoundSourceLocationSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var rightParen: ConcreteSyntaxProperty<PoundSourceLocationSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<PoundSourceLocationSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == PrecedenceGroupAssignmentSyntax {
  public static var unexpectedBeforeAssignmentLabel: ConcreteSyntaxProperty<PrecedenceGroupAssignmentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var assignmentLabel: ConcreteSyntaxProperty<PrecedenceGroupAssignmentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAssignmentLabelAndColon: ConcreteSyntaxProperty<PrecedenceGroupAssignmentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<PrecedenceGroupAssignmentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndValue: ConcreteSyntaxProperty<PrecedenceGroupAssignmentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var value: ConcreteSyntaxProperty<PrecedenceGroupAssignmentSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterValue: ConcreteSyntaxProperty<PrecedenceGroupAssignmentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == PrecedenceGroupAssociativitySyntax {
  public static var unexpectedBeforeAssociativityLabel: ConcreteSyntaxProperty<PrecedenceGroupAssociativitySyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var associativityLabel: ConcreteSyntaxProperty<PrecedenceGroupAssociativitySyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAssociativityLabelAndColon: ConcreteSyntaxProperty<PrecedenceGroupAssociativitySyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<PrecedenceGroupAssociativitySyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndValue: ConcreteSyntaxProperty<PrecedenceGroupAssociativitySyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var value: ConcreteSyntaxProperty<PrecedenceGroupAssociativitySyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterValue: ConcreteSyntaxProperty<PrecedenceGroupAssociativitySyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == PrecedenceGroupDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndPrecedencegroupKeyword: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var precedencegroupKeyword: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenPrecedencegroupKeywordAndName: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndLeftBrace: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var leftBrace: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, TokenSyntax> {
    .init(9)
  }

  public static var unexpectedBetweenLeftBraceAndGroupAttributes: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var groupAttributes: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, PrecedenceGroupAttributeListSyntax> {
    .init(11)
  }

  public static var unexpectedBetweenGroupAttributesAndRightBrace: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var rightBrace: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, TokenSyntax> {
    .init(13)
  }

  public static var unexpectedAfterRightBrace: ConcreteSyntaxProperty<PrecedenceGroupDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }
}

extension ConcreteSyntaxProperty where Base == PrecedenceGroupNameSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<PrecedenceGroupNameSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<PrecedenceGroupNameSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndTrailingComma: ConcreteSyntaxProperty<PrecedenceGroupNameSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<PrecedenceGroupNameSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<PrecedenceGroupNameSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PrecedenceGroupRelationSyntax {
  public static var unexpectedBeforeHigherThanOrLowerThanLabel: ConcreteSyntaxProperty<PrecedenceGroupRelationSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var higherThanOrLowerThanLabel: ConcreteSyntaxProperty<PrecedenceGroupRelationSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenHigherThanOrLowerThanLabelAndColon: ConcreteSyntaxProperty<PrecedenceGroupRelationSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<PrecedenceGroupRelationSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndPrecedenceGroups: ConcreteSyntaxProperty<PrecedenceGroupRelationSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var precedenceGroups: ConcreteSyntaxProperty<PrecedenceGroupRelationSyntax, PrecedenceGroupNameListSyntax> {
    .init(5)
  }

  public static var unexpectedAfterPrecedenceGroups: ConcreteSyntaxProperty<PrecedenceGroupRelationSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == PrefixOperatorExprSyntax {
  public static var unexpectedBeforeOperator: ConcreteSyntaxProperty<PrefixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var `operator`: ConcreteSyntaxProperty<PrefixOperatorExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenOperatorAndExpression: ConcreteSyntaxProperty<PrefixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<PrefixOperatorExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<PrefixOperatorExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == PrimaryAssociatedTypeClauseSyntax {
  public static var unexpectedBeforeLeftAngle: ConcreteSyntaxProperty<PrimaryAssociatedTypeClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftAngle: ConcreteSyntaxProperty<PrimaryAssociatedTypeClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes: ConcreteSyntaxProperty<PrimaryAssociatedTypeClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var primaryAssociatedTypes: ConcreteSyntaxProperty<PrimaryAssociatedTypeClauseSyntax, PrimaryAssociatedTypeListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenPrimaryAssociatedTypesAndRightAngle: ConcreteSyntaxProperty<PrimaryAssociatedTypeClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightAngle: ConcreteSyntaxProperty<PrimaryAssociatedTypeClauseSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightAngle: ConcreteSyntaxProperty<PrimaryAssociatedTypeClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == PrimaryAssociatedTypeSyntax {
  public static var unexpectedBeforeName: ConcreteSyntaxProperty<PrimaryAssociatedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var name: ConcreteSyntaxProperty<PrimaryAssociatedTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenNameAndTrailingComma: ConcreteSyntaxProperty<PrimaryAssociatedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var trailingComma: ConcreteSyntaxProperty<PrimaryAssociatedTypeSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<PrimaryAssociatedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ProtocolDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<ProtocolDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<ProtocolDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndProtocolKeyword: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var protocolKeyword: ConcreteSyntaxProperty<ProtocolDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenProtocolKeywordAndName: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<ProtocolDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndPrimaryAssociatedTypeClause: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var primaryAssociatedTypeClause: ConcreteSyntaxProperty<ProtocolDeclSyntax, PrimaryAssociatedTypeClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var inheritanceClause: ConcreteSyntaxProperty<ProtocolDeclSyntax, InheritanceClauseSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenInheritanceClauseAndGenericWhereClause: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<ProtocolDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenGenericWhereClauseAndMemberBlock: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var memberBlock: ConcreteSyntaxProperty<ProtocolDeclSyntax, MemberBlockSyntax> {
    .init(15)
  }

  public static var unexpectedAfterMemberBlock: ConcreteSyntaxProperty<ProtocolDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == RegexLiteralExprSyntax {
  public static var unexpectedBeforeOpeningPounds: ConcreteSyntaxProperty<RegexLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var openingPounds: ConcreteSyntaxProperty<RegexLiteralExprSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenOpeningPoundsAndOpeningSlash: ConcreteSyntaxProperty<RegexLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var openingSlash: ConcreteSyntaxProperty<RegexLiteralExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenOpeningSlashAndRegex: ConcreteSyntaxProperty<RegexLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var regex: ConcreteSyntaxProperty<RegexLiteralExprSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenRegexAndClosingSlash: ConcreteSyntaxProperty<RegexLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var closingSlash: ConcreteSyntaxProperty<RegexLiteralExprSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenClosingSlashAndClosingPounds: ConcreteSyntaxProperty<RegexLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var closingPounds: ConcreteSyntaxProperty<RegexLiteralExprSyntax, TokenSyntax?> {
    .init(9)
  }

  public static var unexpectedAfterClosingPounds: ConcreteSyntaxProperty<RegexLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == RepeatStmtSyntax {
  public static var unexpectedBeforeRepeatKeyword: ConcreteSyntaxProperty<RepeatStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var repeatKeyword: ConcreteSyntaxProperty<RepeatStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenRepeatKeywordAndBody: ConcreteSyntaxProperty<RepeatStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var body: ConcreteSyntaxProperty<RepeatStmtSyntax, CodeBlockSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenBodyAndWhileKeyword: ConcreteSyntaxProperty<RepeatStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var whileKeyword: ConcreteSyntaxProperty<RepeatStmtSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenWhileKeywordAndCondition: ConcreteSyntaxProperty<RepeatStmtSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var condition: ConcreteSyntaxProperty<RepeatStmtSyntax, ExprSyntax> {
    .init(7)
  }

  public static var unexpectedAfterCondition: ConcreteSyntaxProperty<RepeatStmtSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == ReturnClauseSyntax {
  public static var unexpectedBeforeArrow: ConcreteSyntaxProperty<ReturnClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var arrow: ConcreteSyntaxProperty<ReturnClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenArrowAndType: ConcreteSyntaxProperty<ReturnClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var type: ConcreteSyntaxProperty<ReturnClauseSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterType: ConcreteSyntaxProperty<ReturnClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ReturnStmtSyntax {
  public static var unexpectedBeforeReturnKeyword: ConcreteSyntaxProperty<ReturnStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var returnKeyword: ConcreteSyntaxProperty<ReturnStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenReturnKeywordAndExpression: ConcreteSyntaxProperty<ReturnStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<ReturnStmtSyntax, ExprSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<ReturnStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == SameTypeRequirementSyntax {
  public static var unexpectedBeforeLeftType: ConcreteSyntaxProperty<SameTypeRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftType: ConcreteSyntaxProperty<SameTypeRequirementSyntax, SameTypeRequirementSyntax.LeftType> {
    .init(1)
  }

  public static var unexpectedBetweenLeftTypeAndEqual: ConcreteSyntaxProperty<SameTypeRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var equal: ConcreteSyntaxProperty<SameTypeRequirementSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenEqualAndRightType: ConcreteSyntaxProperty<SameTypeRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightType: ConcreteSyntaxProperty<SameTypeRequirementSyntax, SameTypeRequirementSyntax.RightType> {
    .init(5)
  }

  public static var unexpectedAfterRightType: ConcreteSyntaxProperty<SameTypeRequirementSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == SequenceExprSyntax {
  public static var unexpectedBeforeElements: ConcreteSyntaxProperty<SequenceExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var elements: ConcreteSyntaxProperty<SequenceExprSyntax, ExprListSyntax> {
    .init(1)
  }

  public static var unexpectedAfterElements: ConcreteSyntaxProperty<SequenceExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == SimpleStringLiteralExprSyntax {
  public static var unexpectedBeforeOpeningQuote: ConcreteSyntaxProperty<SimpleStringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var openingQuote: ConcreteSyntaxProperty<SimpleStringLiteralExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenOpeningQuoteAndSegments: ConcreteSyntaxProperty<SimpleStringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var segments: ConcreteSyntaxProperty<SimpleStringLiteralExprSyntax, SimpleStringLiteralSegmentListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenSegmentsAndClosingQuote: ConcreteSyntaxProperty<SimpleStringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var closingQuote: ConcreteSyntaxProperty<SimpleStringLiteralExprSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterClosingQuote: ConcreteSyntaxProperty<SimpleStringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == SimpleTypeSpecifierSyntax {
  public static var unexpectedBeforeSpecifier: ConcreteSyntaxProperty<SimpleTypeSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var specifier: ConcreteSyntaxProperty<SimpleTypeSpecifierSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterSpecifier: ConcreteSyntaxProperty<SimpleTypeSpecifierSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == SomeOrAnyTypeSyntax {
  public static var unexpectedBeforeSomeOrAnySpecifier: ConcreteSyntaxProperty<SomeOrAnyTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var someOrAnySpecifier: ConcreteSyntaxProperty<SomeOrAnyTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenSomeOrAnySpecifierAndConstraint: ConcreteSyntaxProperty<SomeOrAnyTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var constraint: ConcreteSyntaxProperty<SomeOrAnyTypeSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterConstraint: ConcreteSyntaxProperty<SomeOrAnyTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == SourceFileSyntax {
  public static var unexpectedBeforeShebang: ConcreteSyntaxProperty<SourceFileSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var shebang: ConcreteSyntaxProperty<SourceFileSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenShebangAndStatements: ConcreteSyntaxProperty<SourceFileSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var statements: ConcreteSyntaxProperty<SourceFileSyntax, CodeBlockItemListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenStatementsAndEndOfFileToken: ConcreteSyntaxProperty<SourceFileSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var endOfFileToken: ConcreteSyntaxProperty<SourceFileSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterEndOfFileToken: ConcreteSyntaxProperty<SourceFileSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == SpecializeAvailabilityArgumentSyntax {
  public static var unexpectedBeforeAvailabilityLabel: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var availabilityLabel: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAvailabilityLabelAndColon: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndAvailabilityArguments: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var availabilityArguments: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, AvailabilityArgumentListSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenAvailabilityArgumentsAndSemicolon: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var semicolon: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedAfterSemicolon: ConcreteSyntaxProperty<SpecializeAvailabilityArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == SpecializeTargetFunctionArgumentSyntax {
  public static var unexpectedBeforeTargetLabel: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var targetLabel: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenTargetLabelAndColon: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndDeclName: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var declName: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, DeclReferenceExprSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenDeclNameAndTrailingComma: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var trailingComma: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<SpecializeTargetFunctionArgumentSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == StringLiteralExprSyntax {
  public static var unexpectedBeforeOpeningPounds: ConcreteSyntaxProperty<StringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var openingPounds: ConcreteSyntaxProperty<StringLiteralExprSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenOpeningPoundsAndOpeningQuote: ConcreteSyntaxProperty<StringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var openingQuote: ConcreteSyntaxProperty<StringLiteralExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenOpeningQuoteAndSegments: ConcreteSyntaxProperty<StringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var segments: ConcreteSyntaxProperty<StringLiteralExprSyntax, StringLiteralSegmentListSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenSegmentsAndClosingQuote: ConcreteSyntaxProperty<StringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var closingQuote: ConcreteSyntaxProperty<StringLiteralExprSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenClosingQuoteAndClosingPounds: ConcreteSyntaxProperty<StringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var closingPounds: ConcreteSyntaxProperty<StringLiteralExprSyntax, TokenSyntax?> {
    .init(9)
  }

  public static var unexpectedAfterClosingPounds: ConcreteSyntaxProperty<StringLiteralExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == StringSegmentSyntax {
  public static var unexpectedBeforeContent: ConcreteSyntaxProperty<StringSegmentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var content: ConcreteSyntaxProperty<StringSegmentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterContent: ConcreteSyntaxProperty<StringSegmentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == StructDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<StructDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<StructDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndStructKeyword: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var structKeyword: ConcreteSyntaxProperty<StructDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenStructKeywordAndName: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<StructDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndGenericParameterClause: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<StructDeclSyntax, GenericParameterClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericParameterClauseAndInheritanceClause: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var inheritanceClause: ConcreteSyntaxProperty<StructDeclSyntax, InheritanceClauseSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenInheritanceClauseAndGenericWhereClause: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<StructDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenGenericWhereClauseAndMemberBlock: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var memberBlock: ConcreteSyntaxProperty<StructDeclSyntax, MemberBlockSyntax> {
    .init(15)
  }

  public static var unexpectedAfterMemberBlock: ConcreteSyntaxProperty<StructDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == SubscriptCallExprSyntax {
  public static var unexpectedBeforeCalledExpression: ConcreteSyntaxProperty<SubscriptCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var calledExpression: ConcreteSyntaxProperty<SubscriptCallExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenCalledExpressionAndLeftSquare: ConcreteSyntaxProperty<SubscriptCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var leftSquare: ConcreteSyntaxProperty<SubscriptCallExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenLeftSquareAndArguments: ConcreteSyntaxProperty<SubscriptCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var arguments: ConcreteSyntaxProperty<SubscriptCallExprSyntax, LabeledExprListSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenArgumentsAndRightSquare: ConcreteSyntaxProperty<SubscriptCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var rightSquare: ConcreteSyntaxProperty<SubscriptCallExprSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenRightSquareAndTrailingClosure: ConcreteSyntaxProperty<SubscriptCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var trailingClosure: ConcreteSyntaxProperty<SubscriptCallExprSyntax, ClosureExprSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: ConcreteSyntaxProperty<SubscriptCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var additionalTrailingClosures: ConcreteSyntaxProperty<SubscriptCallExprSyntax, MultipleTrailingClosureElementListSyntax> {
    .init(11)
  }

  public static var unexpectedAfterAdditionalTrailingClosures: ConcreteSyntaxProperty<SubscriptCallExprSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }
}

extension ConcreteSyntaxProperty where Base == SubscriptDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<SubscriptDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<SubscriptDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndSubscriptKeyword: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var subscriptKeyword: ConcreteSyntaxProperty<SubscriptDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenSubscriptKeywordAndGenericParameterClause: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<SubscriptDeclSyntax, GenericParameterClauseSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenGenericParameterClauseAndParameterClause: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var parameterClause: ConcreteSyntaxProperty<SubscriptDeclSyntax, FunctionParameterClauseSyntax> {
    .init(9)
  }

  public static var unexpectedBetweenParameterClauseAndReturnClause: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var returnClause: ConcreteSyntaxProperty<SubscriptDeclSyntax, ReturnClauseSyntax> {
    .init(11)
  }

  public static var unexpectedBetweenReturnClauseAndGenericWhereClause: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<SubscriptDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedBetweenGenericWhereClauseAndAccessorBlock: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }

  public static var accessorBlock: ConcreteSyntaxProperty<SubscriptDeclSyntax, AccessorBlockSyntax?> {
    .init(15)
  }

  public static var unexpectedAfterAccessorBlock: ConcreteSyntaxProperty<SubscriptDeclSyntax, UnexpectedNodesSyntax?> {
    .init(16)
  }
}

extension ConcreteSyntaxProperty where Base == SuperExprSyntax {
  public static var unexpectedBeforeSuperKeyword: ConcreteSyntaxProperty<SuperExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var superKeyword: ConcreteSyntaxProperty<SuperExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterSuperKeyword: ConcreteSyntaxProperty<SuperExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == SuppressedTypeSyntax {
  public static var unexpectedBeforeWithoutTilde: ConcreteSyntaxProperty<SuppressedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var withoutTilde: ConcreteSyntaxProperty<SuppressedTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenWithoutTildeAndType: ConcreteSyntaxProperty<SuppressedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var type: ConcreteSyntaxProperty<SuppressedTypeSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterType: ConcreteSyntaxProperty<SuppressedTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == SwitchCaseItemSyntax {
  public static var unexpectedBeforePattern: ConcreteSyntaxProperty<SwitchCaseItemSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var pattern: ConcreteSyntaxProperty<SwitchCaseItemSyntax, PatternSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenPatternAndWhereClause: ConcreteSyntaxProperty<SwitchCaseItemSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var whereClause: ConcreteSyntaxProperty<SwitchCaseItemSyntax, WhereClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenWhereClauseAndTrailingComma: ConcreteSyntaxProperty<SwitchCaseItemSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var trailingComma: ConcreteSyntaxProperty<SwitchCaseItemSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<SwitchCaseItemSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == SwitchCaseLabelSyntax {
  public static var unexpectedBeforeCaseKeyword: ConcreteSyntaxProperty<SwitchCaseLabelSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var caseKeyword: ConcreteSyntaxProperty<SwitchCaseLabelSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenCaseKeywordAndCaseItems: ConcreteSyntaxProperty<SwitchCaseLabelSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var caseItems: ConcreteSyntaxProperty<SwitchCaseLabelSyntax, SwitchCaseItemListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenCaseItemsAndColon: ConcreteSyntaxProperty<SwitchCaseLabelSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var colon: ConcreteSyntaxProperty<SwitchCaseLabelSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterColon: ConcreteSyntaxProperty<SwitchCaseLabelSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == SwitchCaseSyntax {
  public static var unexpectedBeforeAttribute: ConcreteSyntaxProperty<SwitchCaseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attribute: ConcreteSyntaxProperty<SwitchCaseSyntax, AttributeSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenAttributeAndLabel: ConcreteSyntaxProperty<SwitchCaseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var label: ConcreteSyntaxProperty<SwitchCaseSyntax, SwitchCaseSyntax.Label> {
    .init(3)
  }

  public static var unexpectedBetweenLabelAndStatements: ConcreteSyntaxProperty<SwitchCaseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var statements: ConcreteSyntaxProperty<SwitchCaseSyntax, CodeBlockItemListSyntax> {
    .init(5)
  }

  public static var unexpectedAfterStatements: ConcreteSyntaxProperty<SwitchCaseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == SwitchDefaultLabelSyntax {
  public static var unexpectedBeforeDefaultKeyword: ConcreteSyntaxProperty<SwitchDefaultLabelSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var defaultKeyword: ConcreteSyntaxProperty<SwitchDefaultLabelSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenDefaultKeywordAndColon: ConcreteSyntaxProperty<SwitchDefaultLabelSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<SwitchDefaultLabelSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterColon: ConcreteSyntaxProperty<SwitchDefaultLabelSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == SwitchExprSyntax {
  public static var unexpectedBeforeSwitchKeyword: ConcreteSyntaxProperty<SwitchExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var switchKeyword: ConcreteSyntaxProperty<SwitchExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenSwitchKeywordAndSubject: ConcreteSyntaxProperty<SwitchExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var subject: ConcreteSyntaxProperty<SwitchExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenSubjectAndLeftBrace: ConcreteSyntaxProperty<SwitchExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var leftBrace: ConcreteSyntaxProperty<SwitchExprSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenLeftBraceAndCases: ConcreteSyntaxProperty<SwitchExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var cases: ConcreteSyntaxProperty<SwitchExprSyntax, SwitchCaseListSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenCasesAndRightBrace: ConcreteSyntaxProperty<SwitchExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var rightBrace: ConcreteSyntaxProperty<SwitchExprSyntax, TokenSyntax> {
    .init(9)
  }

  public static var unexpectedAfterRightBrace: ConcreteSyntaxProperty<SwitchExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

extension ConcreteSyntaxProperty where Base == TernaryExprSyntax {
  public static var unexpectedBeforeCondition: ConcreteSyntaxProperty<TernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var condition: ConcreteSyntaxProperty<TernaryExprSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenConditionAndQuestionMark: ConcreteSyntaxProperty<TernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var questionMark: ConcreteSyntaxProperty<TernaryExprSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenQuestionMarkAndThenExpression: ConcreteSyntaxProperty<TernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var thenExpression: ConcreteSyntaxProperty<TernaryExprSyntax, ExprSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenThenExpressionAndColon: ConcreteSyntaxProperty<TernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var colon: ConcreteSyntaxProperty<TernaryExprSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenColonAndElseExpression: ConcreteSyntaxProperty<TernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var elseExpression: ConcreteSyntaxProperty<TernaryExprSyntax, ExprSyntax> {
    .init(9)
  }

  public static var unexpectedAfterElseExpression: ConcreteSyntaxProperty<TernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }
}

#if compiler(>=5.8)
@_spi(ExperimentalLanguageFeatures)
#endif
extension ConcreteSyntaxProperty where Base == ThenStmtSyntax {
  public static var unexpectedBeforeThenKeyword: ConcreteSyntaxProperty<ThenStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var thenKeyword: ConcreteSyntaxProperty<ThenStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenThenKeywordAndExpression: ConcreteSyntaxProperty<ThenStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<ThenStmtSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<ThenStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ThrowStmtSyntax {
  public static var unexpectedBeforeThrowKeyword: ConcreteSyntaxProperty<ThrowStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var throwKeyword: ConcreteSyntaxProperty<ThrowStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenThrowKeywordAndExpression: ConcreteSyntaxProperty<ThrowStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<ThrowStmtSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<ThrowStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ThrowsClauseSyntax {
  public static var unexpectedBeforeThrowsSpecifier: ConcreteSyntaxProperty<ThrowsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var throwsSpecifier: ConcreteSyntaxProperty<ThrowsClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenThrowsSpecifierAndLeftParen: ConcreteSyntaxProperty<ThrowsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var leftParen: ConcreteSyntaxProperty<ThrowsClauseSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenLeftParenAndType: ConcreteSyntaxProperty<ThrowsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var type: ConcreteSyntaxProperty<ThrowsClauseSyntax, TypeSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenTypeAndRightParen: ConcreteSyntaxProperty<ThrowsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var rightParen: ConcreteSyntaxProperty<ThrowsClauseSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<ThrowsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == TryExprSyntax {
  public static var unexpectedBeforeTryKeyword: ConcreteSyntaxProperty<TryExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var tryKeyword: ConcreteSyntaxProperty<TryExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenTryKeywordAndQuestionOrExclamationMark: ConcreteSyntaxProperty<TryExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var questionOrExclamationMark: ConcreteSyntaxProperty<TryExprSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenQuestionOrExclamationMarkAndExpression: ConcreteSyntaxProperty<TryExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var expression: ConcreteSyntaxProperty<TryExprSyntax, ExprSyntax> {
    .init(5)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<TryExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == TupleExprSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<TupleExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<TupleExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndElements: ConcreteSyntaxProperty<TupleExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var elements: ConcreteSyntaxProperty<TupleExprSyntax, LabeledExprListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenElementsAndRightParen: ConcreteSyntaxProperty<TupleExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<TupleExprSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<TupleExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == TuplePatternElementSyntax {
  public static var unexpectedBeforeLabel: ConcreteSyntaxProperty<TuplePatternElementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var label: ConcreteSyntaxProperty<TuplePatternElementSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenLabelAndColon: ConcreteSyntaxProperty<TuplePatternElementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<TuplePatternElementSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndPattern: ConcreteSyntaxProperty<TuplePatternElementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var pattern: ConcreteSyntaxProperty<TuplePatternElementSyntax, PatternSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenPatternAndTrailingComma: ConcreteSyntaxProperty<TuplePatternElementSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var trailingComma: ConcreteSyntaxProperty<TuplePatternElementSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<TuplePatternElementSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == TuplePatternSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<TuplePatternSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<TuplePatternSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndElements: ConcreteSyntaxProperty<TuplePatternSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var elements: ConcreteSyntaxProperty<TuplePatternSyntax, TuplePatternElementListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenElementsAndRightParen: ConcreteSyntaxProperty<TuplePatternSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<TuplePatternSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<TuplePatternSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == TupleTypeElementSyntax {
  public static var unexpectedBeforeInoutKeyword: ConcreteSyntaxProperty<TupleTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var inoutKeyword: ConcreteSyntaxProperty<TupleTypeElementSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenInoutKeywordAndFirstName: ConcreteSyntaxProperty<TupleTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var firstName: ConcreteSyntaxProperty<TupleTypeElementSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedBetweenFirstNameAndSecondName: ConcreteSyntaxProperty<TupleTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var secondName: ConcreteSyntaxProperty<TupleTypeElementSyntax, TokenSyntax?> {
    .init(5)
  }

  public static var unexpectedBetweenSecondNameAndColon: ConcreteSyntaxProperty<TupleTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var colon: ConcreteSyntaxProperty<TupleTypeElementSyntax, TokenSyntax?> {
    .init(7)
  }

  public static var unexpectedBetweenColonAndType: ConcreteSyntaxProperty<TupleTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var type: ConcreteSyntaxProperty<TupleTypeElementSyntax, TypeSyntax> {
    .init(9)
  }

  public static var unexpectedBetweenTypeAndEllipsis: ConcreteSyntaxProperty<TupleTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var ellipsis: ConcreteSyntaxProperty<TupleTypeElementSyntax, TokenSyntax?> {
    .init(11)
  }

  public static var unexpectedBetweenEllipsisAndTrailingComma: ConcreteSyntaxProperty<TupleTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var trailingComma: ConcreteSyntaxProperty<TupleTypeElementSyntax, TokenSyntax?> {
    .init(13)
  }

  public static var unexpectedAfterTrailingComma: ConcreteSyntaxProperty<TupleTypeElementSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }
}

extension ConcreteSyntaxProperty where Base == TupleTypeSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<TupleTypeSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<TupleTypeSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndElements: ConcreteSyntaxProperty<TupleTypeSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var elements: ConcreteSyntaxProperty<TupleTypeSyntax, TupleTypeElementListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenElementsAndRightParen: ConcreteSyntaxProperty<TupleTypeSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<TupleTypeSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<TupleTypeSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == TypeAliasDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<TypeAliasDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<TypeAliasDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<TypeAliasDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<TypeAliasDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndTypealiasKeyword: ConcreteSyntaxProperty<TypeAliasDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var typealiasKeyword: ConcreteSyntaxProperty<TypeAliasDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenTypealiasKeywordAndName: ConcreteSyntaxProperty<TypeAliasDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var name: ConcreteSyntaxProperty<TypeAliasDeclSyntax, TokenSyntax> {
    .init(7)
  }

  public static var unexpectedBetweenNameAndGenericParameterClause: ConcreteSyntaxProperty<TypeAliasDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }

  public static var genericParameterClause: ConcreteSyntaxProperty<TypeAliasDeclSyntax, GenericParameterClauseSyntax?> {
    .init(9)
  }

  public static var unexpectedBetweenGenericParameterClauseAndInitializer: ConcreteSyntaxProperty<TypeAliasDeclSyntax, UnexpectedNodesSyntax?> {
    .init(10)
  }

  public static var initializer: ConcreteSyntaxProperty<TypeAliasDeclSyntax, TypeInitializerClauseSyntax> {
    .init(11)
  }

  public static var unexpectedBetweenInitializerAndGenericWhereClause: ConcreteSyntaxProperty<TypeAliasDeclSyntax, UnexpectedNodesSyntax?> {
    .init(12)
  }

  public static var genericWhereClause: ConcreteSyntaxProperty<TypeAliasDeclSyntax, GenericWhereClauseSyntax?> {
    .init(13)
  }

  public static var unexpectedAfterGenericWhereClause: ConcreteSyntaxProperty<TypeAliasDeclSyntax, UnexpectedNodesSyntax?> {
    .init(14)
  }
}

extension ConcreteSyntaxProperty where Base == TypeAnnotationSyntax {
  public static var unexpectedBeforeColon: ConcreteSyntaxProperty<TypeAnnotationSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var colon: ConcreteSyntaxProperty<TypeAnnotationSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenColonAndType: ConcreteSyntaxProperty<TypeAnnotationSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var type: ConcreteSyntaxProperty<TypeAnnotationSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterType: ConcreteSyntaxProperty<TypeAnnotationSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == TypeEffectSpecifiersSyntax {
  public static var unexpectedBeforeAsyncSpecifier: ConcreteSyntaxProperty<TypeEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var asyncSpecifier: ConcreteSyntaxProperty<TypeEffectSpecifiersSyntax, TokenSyntax?> {
    .init(1)
  }

  public static var unexpectedBetweenAsyncSpecifierAndThrowsClause: ConcreteSyntaxProperty<TypeEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var throwsClause: ConcreteSyntaxProperty<TypeEffectSpecifiersSyntax, ThrowsClauseSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterThrowsClause: ConcreteSyntaxProperty<TypeEffectSpecifiersSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == TypeExprSyntax {
  public static var unexpectedBeforeType: ConcreteSyntaxProperty<TypeExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var type: ConcreteSyntaxProperty<TypeExprSyntax, TypeSyntax> {
    .init(1)
  }

  public static var unexpectedAfterType: ConcreteSyntaxProperty<TypeExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == TypeInitializerClauseSyntax {
  public static var unexpectedBeforeEqual: ConcreteSyntaxProperty<TypeInitializerClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var equal: ConcreteSyntaxProperty<TypeInitializerClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenEqualAndValue: ConcreteSyntaxProperty<TypeInitializerClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var value: ConcreteSyntaxProperty<TypeInitializerClauseSyntax, TypeSyntax> {
    .init(3)
  }

  public static var unexpectedAfterValue: ConcreteSyntaxProperty<TypeInitializerClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == UnavailableFromAsyncAttributeArgumentsSyntax {
  public static var unexpectedBeforeMessageLabel: ConcreteSyntaxProperty<UnavailableFromAsyncAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var messageLabel: ConcreteSyntaxProperty<UnavailableFromAsyncAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenMessageLabelAndColon: ConcreteSyntaxProperty<UnavailableFromAsyncAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<UnavailableFromAsyncAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndMessage: ConcreteSyntaxProperty<UnavailableFromAsyncAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var message: ConcreteSyntaxProperty<UnavailableFromAsyncAttributeArgumentsSyntax, StringLiteralExprSyntax> {
    .init(5)
  }

  public static var unexpectedAfterMessage: ConcreteSyntaxProperty<UnavailableFromAsyncAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == UnderscorePrivateAttributeArgumentsSyntax {
  public static var unexpectedBeforeSourceFileLabel: ConcreteSyntaxProperty<UnderscorePrivateAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var sourceFileLabel: ConcreteSyntaxProperty<UnderscorePrivateAttributeArgumentsSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenSourceFileLabelAndColon: ConcreteSyntaxProperty<UnderscorePrivateAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var colon: ConcreteSyntaxProperty<UnderscorePrivateAttributeArgumentsSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenColonAndFilename: ConcreteSyntaxProperty<UnderscorePrivateAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var filename: ConcreteSyntaxProperty<UnderscorePrivateAttributeArgumentsSyntax, StringLiteralExprSyntax> {
    .init(5)
  }

  public static var unexpectedAfterFilename: ConcreteSyntaxProperty<UnderscorePrivateAttributeArgumentsSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == UnresolvedAsExprSyntax {
  public static var unexpectedBeforeAsKeyword: ConcreteSyntaxProperty<UnresolvedAsExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var asKeyword: ConcreteSyntaxProperty<UnresolvedAsExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAsKeywordAndQuestionOrExclamationMark: ConcreteSyntaxProperty<UnresolvedAsExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var questionOrExclamationMark: ConcreteSyntaxProperty<UnresolvedAsExprSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterQuestionOrExclamationMark: ConcreteSyntaxProperty<UnresolvedAsExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == UnresolvedIsExprSyntax {
  public static var unexpectedBeforeIsKeyword: ConcreteSyntaxProperty<UnresolvedIsExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var isKeyword: ConcreteSyntaxProperty<UnresolvedIsExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterIsKeyword: ConcreteSyntaxProperty<UnresolvedIsExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == UnresolvedTernaryExprSyntax {
  public static var unexpectedBeforeQuestionMark: ConcreteSyntaxProperty<UnresolvedTernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var questionMark: ConcreteSyntaxProperty<UnresolvedTernaryExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenQuestionMarkAndThenExpression: ConcreteSyntaxProperty<UnresolvedTernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var thenExpression: ConcreteSyntaxProperty<UnresolvedTernaryExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenThenExpressionAndColon: ConcreteSyntaxProperty<UnresolvedTernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var colon: ConcreteSyntaxProperty<UnresolvedTernaryExprSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterColon: ConcreteSyntaxProperty<UnresolvedTernaryExprSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

#if compiler(>=5.8)
@_spi(ExperimentalLanguageFeatures)
#endif
extension ConcreteSyntaxProperty where Base == UnsafeExprSyntax {
  public static var unexpectedBeforeUnsafeKeyword: ConcreteSyntaxProperty<UnsafeExprSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var unsafeKeyword: ConcreteSyntaxProperty<UnsafeExprSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenUnsafeKeywordAndExpression: ConcreteSyntaxProperty<UnsafeExprSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var expression: ConcreteSyntaxProperty<UnsafeExprSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterExpression: ConcreteSyntaxProperty<UnsafeExprSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == ValueBindingPatternSyntax {
  public static var unexpectedBeforeBindingSpecifier: ConcreteSyntaxProperty<ValueBindingPatternSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var bindingSpecifier: ConcreteSyntaxProperty<ValueBindingPatternSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenBindingSpecifierAndPattern: ConcreteSyntaxProperty<ValueBindingPatternSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var pattern: ConcreteSyntaxProperty<ValueBindingPatternSyntax, PatternSyntax> {
    .init(3)
  }

  public static var unexpectedAfterPattern: ConcreteSyntaxProperty<ValueBindingPatternSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == VariableDeclSyntax {
  public static var unexpectedBeforeAttributes: ConcreteSyntaxProperty<VariableDeclSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var attributes: ConcreteSyntaxProperty<VariableDeclSyntax, AttributeListSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenAttributesAndModifiers: ConcreteSyntaxProperty<VariableDeclSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var modifiers: ConcreteSyntaxProperty<VariableDeclSyntax, DeclModifierListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenModifiersAndBindingSpecifier: ConcreteSyntaxProperty<VariableDeclSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var bindingSpecifier: ConcreteSyntaxProperty<VariableDeclSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedBetweenBindingSpecifierAndBindings: ConcreteSyntaxProperty<VariableDeclSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }

  public static var bindings: ConcreteSyntaxProperty<VariableDeclSyntax, PatternBindingListSyntax> {
    .init(7)
  }

  public static var unexpectedAfterBindings: ConcreteSyntaxProperty<VariableDeclSyntax, UnexpectedNodesSyntax?> {
    .init(8)
  }
}

extension ConcreteSyntaxProperty where Base == VersionComponentSyntax {
  public static var unexpectedBeforePeriod: ConcreteSyntaxProperty<VersionComponentSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var period: ConcreteSyntaxProperty<VersionComponentSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenPeriodAndNumber: ConcreteSyntaxProperty<VersionComponentSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var number: ConcreteSyntaxProperty<VersionComponentSyntax, TokenSyntax> {
    .init(3)
  }

  public static var unexpectedAfterNumber: ConcreteSyntaxProperty<VersionComponentSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == VersionTupleSyntax {
  public static var unexpectedBeforeMajor: ConcreteSyntaxProperty<VersionTupleSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var major: ConcreteSyntaxProperty<VersionTupleSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenMajorAndComponents: ConcreteSyntaxProperty<VersionTupleSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var components: ConcreteSyntaxProperty<VersionTupleSyntax, VersionComponentListSyntax> {
    .init(3)
  }

  public static var unexpectedAfterComponents: ConcreteSyntaxProperty<VersionTupleSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == WhereClauseSyntax {
  public static var unexpectedBeforeWhereKeyword: ConcreteSyntaxProperty<WhereClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var whereKeyword: ConcreteSyntaxProperty<WhereClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenWhereKeywordAndCondition: ConcreteSyntaxProperty<WhereClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var condition: ConcreteSyntaxProperty<WhereClauseSyntax, ExprSyntax> {
    .init(3)
  }

  public static var unexpectedAfterCondition: ConcreteSyntaxProperty<WhereClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == WhileStmtSyntax {
  public static var unexpectedBeforeWhileKeyword: ConcreteSyntaxProperty<WhileStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var whileKeyword: ConcreteSyntaxProperty<WhileStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenWhileKeywordAndConditions: ConcreteSyntaxProperty<WhileStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var conditions: ConcreteSyntaxProperty<WhileStmtSyntax, ConditionElementListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenConditionsAndBody: ConcreteSyntaxProperty<WhileStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var body: ConcreteSyntaxProperty<WhileStmtSyntax, CodeBlockSyntax> {
    .init(5)
  }

  public static var unexpectedAfterBody: ConcreteSyntaxProperty<WhileStmtSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}

extension ConcreteSyntaxProperty where Base == WildcardPatternSyntax {
  public static var unexpectedBeforeWildcard: ConcreteSyntaxProperty<WildcardPatternSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var wildcard: ConcreteSyntaxProperty<WildcardPatternSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedAfterWildcard: ConcreteSyntaxProperty<WildcardPatternSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }
}

extension ConcreteSyntaxProperty where Base == YieldStmtSyntax {
  public static var unexpectedBeforeYieldKeyword: ConcreteSyntaxProperty<YieldStmtSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var yieldKeyword: ConcreteSyntaxProperty<YieldStmtSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenYieldKeywordAndYieldedExpressions: ConcreteSyntaxProperty<YieldStmtSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var yieldedExpressions: ConcreteSyntaxProperty<YieldStmtSyntax, YieldStmtSyntax.YieldedExpressions> {
    .init(3)
  }

  public static var unexpectedAfterYieldedExpressions: ConcreteSyntaxProperty<YieldStmtSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == YieldedExpressionSyntax {
  public static var unexpectedBeforeExpression: ConcreteSyntaxProperty<YieldedExpressionSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var expression: ConcreteSyntaxProperty<YieldedExpressionSyntax, ExprSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenExpressionAndComma: ConcreteSyntaxProperty<YieldedExpressionSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var comma: ConcreteSyntaxProperty<YieldedExpressionSyntax, TokenSyntax?> {
    .init(3)
  }

  public static var unexpectedAfterComma: ConcreteSyntaxProperty<YieldedExpressionSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }
}

extension ConcreteSyntaxProperty where Base == YieldedExpressionsClauseSyntax {
  public static var unexpectedBeforeLeftParen: ConcreteSyntaxProperty<YieldedExpressionsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(0)
  }

  public static var leftParen: ConcreteSyntaxProperty<YieldedExpressionsClauseSyntax, TokenSyntax> {
    .init(1)
  }

  public static var unexpectedBetweenLeftParenAndElements: ConcreteSyntaxProperty<YieldedExpressionsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(2)
  }

  public static var elements: ConcreteSyntaxProperty<YieldedExpressionsClauseSyntax, YieldedExpressionListSyntax> {
    .init(3)
  }

  public static var unexpectedBetweenElementsAndRightParen: ConcreteSyntaxProperty<YieldedExpressionsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(4)
  }

  public static var rightParen: ConcreteSyntaxProperty<YieldedExpressionsClauseSyntax, TokenSyntax> {
    .init(5)
  }

  public static var unexpectedAfterRightParen: ConcreteSyntaxProperty<YieldedExpressionsClauseSyntax, UnexpectedNodesSyntax?> {
    .init(6)
  }
}
