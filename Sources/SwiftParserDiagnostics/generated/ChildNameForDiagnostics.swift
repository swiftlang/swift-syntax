//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

#if compiler(>=6)
@_spi(ExperimentalLanguageFeatures) internal import SwiftSyntax
#else
@_spi(ExperimentalLanguageFeatures) import SwiftSyntax
#endif

private func childNameForDiagnostics(_ property: SyntaxLayoutProperty) -> String? {
  switch property {
  case AccessorDeclSyntax.layout[.attributes]:
    return "attributes"
  case AccessorDeclSyntax.layout[.modifier]:
    return "modifiers"
  case AccessorDeclSyntax.layout[.parameters]:
    return "parameter"
  case AccessorParametersSyntax.layout[.name]:
    return "name"
  case ActorDeclSyntax.layout[.attributes]:
    return "attributes"
  case ActorDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case ActorDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case ActorDeclSyntax.layout[.inheritanceClause]:
    return "inheritance clause"
  case ActorDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case ArrayElementSyntax.layout[.expression]:
    return "value"
  case AssociatedTypeDeclSyntax.layout[.attributes]:
    return "attributes"
  case AssociatedTypeDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case AssociatedTypeDeclSyntax.layout[.inheritanceClause]:
    return "inheritance clause"
  case AssociatedTypeDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case AttributeSyntax.layout[.attributeName]:
    return "name"
  case AvailabilityLabeledArgumentSyntax.layout[.label]:
    return "label"
  case AvailabilityLabeledArgumentSyntax.layout[.value]:
    return "value"
  case BreakStmtSyntax.layout[.label]:
    return "label"
  case ClassDeclSyntax.layout[.attributes]:
    return "attributes"
  case ClassDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case ClassDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case ClassDeclSyntax.layout[.inheritanceClause]:
    return "inheritance clause"
  case ClassDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case ClosureParameterClauseSyntax.layout[.parameters]:
    return "parameters"
  case ClosureParameterSyntax.layout[.attributes]:
    return "attributes"
  case ClosureParameterSyntax.layout[.modifiers]:
    return "modifiers"
  case ClosureParameterSyntax.layout[.type]:
    return "type"
  case ClosureShorthandParameterSyntax.layout[.name]:
    return "name"
  case ClosureSignatureSyntax.layout[.attributes]:
    return "attributes"
  case CodeBlockSyntax.layout[.statements]:
    return "statements"
  case ContinueStmtSyntax.layout[.label]:
    return "label"
  case DeinitializerDeclSyntax.layout[.attributes]:
    return "attributes"
  case DeinitializerDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case DictionaryElementSyntax.layout[.key]:
    return "key"
  case DictionaryElementSyntax.layout[.value]:
    return "value"
  case DictionaryTypeSyntax.layout[.key]:
    return "key type"
  case DictionaryTypeSyntax.layout[.value]:
    return "value type"
  case DifferentiabilityWithRespectToArgumentSyntax.layout[.arguments]:
    return "arguments"
  case DoExprSyntax.layout[.body]:
    return "body"
  case DoStmtSyntax.layout[.body]:
    return "body"
  case DocumentationAttributeArgumentSyntax.layout[.label]:
    return "label"
  case EnumCaseDeclSyntax.layout[.attributes]:
    return "attributes"
  case EnumCaseDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case EnumCaseDeclSyntax.layout[.elements]:
    return "elements"
  case EnumCaseElementSyntax.layout[.parameterClause]:
    return "associated values"
  case EnumCaseParameterClauseSyntax.layout[.parameters]:
    return "parameters"
  case EnumCaseParameterSyntax.layout[.modifiers]:
    return "modifiers"
  case EnumCaseParameterSyntax.layout[.type]:
    return "type"
  case EnumCaseParameterSyntax.layout[.defaultValue]:
    return "default value"
  case EnumDeclSyntax.layout[.attributes]:
    return "attributes"
  case EnumDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case EnumDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case EnumDeclSyntax.layout[.inheritanceClause]:
    return "inheritance clause"
  case EnumDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case ExtensionDeclSyntax.layout[.attributes]:
    return "attributes"
  case ExtensionDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case ExtensionDeclSyntax.layout[.inheritanceClause]:
    return "inheritance clause"
  case ExtensionDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case ForStmtSyntax.layout[.body]:
    return "body"
  case FunctionCallExprSyntax.layout[.calledExpression]:
    return "called expression"
  case FunctionCallExprSyntax.layout[.arguments]:
    return "arguments"
  case FunctionCallExprSyntax.layout[.trailingClosure]:
    return "trailing closure"
  case FunctionCallExprSyntax.layout[.additionalTrailingClosures]:
    return "trailing closures"
  case FunctionDeclSyntax.layout[.attributes]:
    return "attributes"
  case FunctionDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case FunctionDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case FunctionDeclSyntax.layout[.signature]:
    return "function signature"
  case FunctionDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case FunctionParameterClauseSyntax.layout[.parameters]:
    return "parameters"
  case FunctionParameterSyntax.layout[.attributes]:
    return "attributes"
  case FunctionParameterSyntax.layout[.modifiers]:
    return "modifiers"
  case FunctionParameterSyntax.layout[.secondName]:
    return "internal name"
  case FunctionParameterSyntax.layout[.type]:
    return "type"
  case FunctionParameterSyntax.layout[.defaultValue]:
    return "default value"
  case GenericParameterSyntax.layout[.specifier]:
    return "specifier"
  case GenericParameterSyntax.layout[.name]:
    return "name"
  case GenericParameterSyntax.layout[.inheritedType]:
    return "inherited type"
  case GuardStmtSyntax.layout[.conditions]:
    return "condition"
  case GuardStmtSyntax.layout[.body]:
    return "body"
  case IfConfigClauseSyntax.layout[.condition]:
    return "condition"
  case IfExprSyntax.layout[.body]:
    return "body"
  case IfExprSyntax.layout[.elseBody]:
    return "else body"
  case ImplementsAttributeArgumentsSyntax.layout[.type]:
    return "type"
  case ImplementsAttributeArgumentsSyntax.layout[.declName]:
    return "declaration name"
  case ImportDeclSyntax.layout[.attributes]:
    return "attributes"
  case ImportDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case ImportPathComponentSyntax.layout[.name]:
    return "name"
  case InitializerDeclSyntax.layout[.attributes]:
    return "attributes"
  case InitializerDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case InitializerDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case InitializerDeclSyntax.layout[.signature]:
    return "function signature"
  case InitializerDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case KeyPathExprSyntax.layout[.root]:
    return "root"
  case KeyPathSubscriptComponentSyntax.layout[.arguments]:
    return "arguments"
  case LabeledExprSyntax.layout[.label]:
    return "label"
  case LabeledExprSyntax.layout[.expression]:
    return "value"
  case LabeledSpecializeArgumentSyntax.layout[.label]:
    return "label"
  case LabeledSpecializeArgumentSyntax.layout[.value]:
    return "value"
  case LabeledStmtSyntax.layout[.label]:
    return "label name"
  case LayoutRequirementSyntax.layout[.type]:
    return "constrained type"
  case LayoutRequirementSyntax.layout[.size]:
    return "size"
  case LayoutRequirementSyntax.layout[.alignment]:
    return "alignment"
  case LifetimeSpecifierArgumentSyntax.layout[.parameter]:
    return "parameter reference"
  case MacroDeclSyntax.layout[.attributes]:
    return "attributes"
  case MacroDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case MacroDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case MacroDeclSyntax.layout[.signature]:
    return "macro signature"
  case MacroDeclSyntax.layout[.definition]:
    return "macro definition"
  case MacroDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case MacroExpansionDeclSyntax.layout[.attributes]:
    return "attributes"
  case MacroExpansionDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case MemberAccessExprSyntax.layout[.base]:
    return "base"
  case MemberAccessExprSyntax.layout[.declName]:
    return "name"
  case MemberTypeSyntax.layout[.baseType]:
    return "base type"
  case MemberTypeSyntax.layout[.name]:
    return "name"
  case MetatypeTypeSyntax.layout[.baseType]:
    return "base type"
  case MultipleTrailingClosureElementSyntax.layout[.label]:
    return "label"
  case ObjCSelectorPieceSyntax.layout[.name]:
    return "name"
  case OperatorDeclSyntax.layout[.fixitySpecifier]:
    return "fixity"
  case OperatorPrecedenceAndTypesSyntax.layout[.precedenceGroup]:
    return "precedence group"
  case PatternBindingSyntax.layout[.typeAnnotation]:
    return "type annotation"
  case PlatformVersionSyntax.layout[.platform]:
    return "platform"
  case PlatformVersionSyntax.layout[.version]:
    return "version"
  case PoundSourceLocationArgumentsSyntax.layout[.fileName]:
    return "file name"
  case PoundSourceLocationArgumentsSyntax.layout[.lineNumber]:
    return "line number"
  case PoundSourceLocationSyntax.layout[.arguments]:
    return "arguments"
  case PrecedenceGroupDeclSyntax.layout[.attributes]:
    return "attributes"
  case PrecedenceGroupDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case PrecedenceGroupNameSyntax.layout[.name]:
    return "name"
  case PrimaryAssociatedTypeSyntax.layout[.name]:
    return "name"
  case ProtocolDeclSyntax.layout[.attributes]:
    return "attributes"
  case ProtocolDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case ProtocolDeclSyntax.layout[.primaryAssociatedTypeClause]:
    return "primary associated type clause"
  case ProtocolDeclSyntax.layout[.inheritanceClause]:
    return "inheritance clause"
  case ProtocolDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case RepeatStmtSyntax.layout[.body]:
    return "body"
  case RepeatStmtSyntax.layout[.condition]:
    return "condition"
  case ReturnClauseSyntax.layout[.type]:
    return "return type"
  case SameTypeRequirementSyntax.layout[.leftType]:
    return "left-hand type"
  case SameTypeRequirementSyntax.layout[.rightType]:
    return "right-hand type"
  case SpecializeAvailabilityArgumentSyntax.layout[.availabilityLabel]:
    return "label"
  case SpecializeTargetFunctionArgumentSyntax.layout[.targetLabel]:
    return "label"
  case SpecializeTargetFunctionArgumentSyntax.layout[.declName]:
    return "declaration name"
  case StructDeclSyntax.layout[.attributes]:
    return "attributes"
  case StructDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case StructDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case StructDeclSyntax.layout[.inheritanceClause]:
    return "inheritance clause"
  case StructDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case SubscriptCallExprSyntax.layout[.calledExpression]:
    return "called expression"
  case SubscriptCallExprSyntax.layout[.arguments]:
    return "arguments"
  case SubscriptCallExprSyntax.layout[.trailingClosure]:
    return "trailing closure"
  case SubscriptCallExprSyntax.layout[.additionalTrailingClosures]:
    return "trailing closures"
  case SubscriptDeclSyntax.layout[.attributes]:
    return "attributes"
  case SubscriptDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case SubscriptDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case SubscriptDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case SwitchCaseSyntax.layout[.label]:
    return "label"
  case TernaryExprSyntax.layout[.condition]:
    return "condition"
  case TernaryExprSyntax.layout[.thenExpression]:
    return "first choice"
  case TernaryExprSyntax.layout[.elseExpression]:
    return "second choice"
  case ThrowsClauseSyntax.layout[.type]:
    return "thrown type"
  case TuplePatternElementSyntax.layout[.label]:
    return "label"
  case TupleTypeElementSyntax.layout[.firstName]:
    return "name"
  case TupleTypeElementSyntax.layout[.secondName]:
    return "internal name"
  case TypeAliasDeclSyntax.layout[.attributes]:
    return "attributes"
  case TypeAliasDeclSyntax.layout[.modifiers]:
    return "modifiers"
  case TypeAliasDeclSyntax.layout[.genericParameterClause]:
    return "generic parameter clause"
  case TypeAliasDeclSyntax.layout[.genericWhereClause]:
    return "generic where clause"
  case TypeInitializerClauseSyntax.layout[.value]:
    return "type"
  case VariableDeclSyntax.layout[.attributes]:
    return "attributes"
  case VariableDeclSyntax.layout[.modifiers]:
    return "modifiers"
  default:
    return nil
  }
}

extension SyntaxProtocol {
  var childNameInParent: String? {
    guard let property = self.propertyInParent else {
      return nil
    }
    return childNameForDiagnostics(property)
  }
}
