//// Automatically generated by generate-swift-syntax
//// Do not edit directly!
//===----------------------------------------------------------------------===//
//
// This source file is part of the Swift.org open source project
//
// Copyright (c) 2014 - 2023 Apple Inc. and the Swift project authors
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://swift.org/LICENSE.txt for license information
// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
//
//===----------------------------------------------------------------------===//

extension AccessorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifierAndAccessorSpecifier")
  public var unexpectedBetweenModifierAndAccessorKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifierAndAccessorSpecifier
    }
    set {
      unexpectedBetweenModifierAndAccessorSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "accessorSpecifier")
  public var accessorKind: TokenSyntax {
    get {
      return accessorSpecifier
    }
    set {
      accessorSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAccessorSpecifierAndParameters")
  public var unexpectedBetweenAccessorKindAndParameter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAccessorSpecifierAndParameters
    }
    set {
      unexpectedBetweenAccessorSpecifierAndParameters = newValue
    }
  }

  @available(*, deprecated, renamed: "parameters")
  public var parameter: AccessorParametersSyntax? {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndEffectSpecifiers")
  public var unexpectedBetweenParameterAndEffectSpecifiers: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndEffectSpecifiers
    }
    set {
      unexpectedBetweenParametersAndEffectSpecifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifier:_:accessorSpecifier:_:parameters:_:effectSpecifiers:_:body:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifier: UnexpectedNodesSyntax? = nil,
    modifier: DeclModifierSyntax? = nil,
    _ unexpectedBetweenModifierAndAccessorKind: UnexpectedNodesSyntax? = nil,
    accessorKind: TokenSyntax,
    _ unexpectedBetweenAccessorKindAndParameter: UnexpectedNodesSyntax? = nil,
    parameter: AccessorParametersSyntax? = nil,
    _ unexpectedBetweenParameterAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
    effectSpecifiers: AccessorEffectSpecifiersSyntax? = nil,
    _ unexpectedBetweenEffectSpecifiersAndBody: UnexpectedNodesSyntax? = nil,
    body: CodeBlockSyntax? = nil,
    _ unexpectedAfterBody: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifier,
      modifier: modifier,
      unexpectedBetweenModifierAndAccessorKind,
      accessorSpecifier: accessorKind,
      unexpectedBetweenAccessorKindAndParameter,
      parameters: parameter,
      unexpectedBetweenParameterAndEffectSpecifiers,
      effectSpecifiers: effectSpecifiers,
      unexpectedBetweenEffectSpecifiersAndBody,
      body: body,
      unexpectedAfterBody,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ActorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeActorHeader")
  public var unexpectedBeforeAttributes: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeActorHeader
    }
    set {
      unexpectedBeforeActorHeader = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.attributes")
  public var attributes: AttributeListSyntax {
    get {
      return actorHeader.attributes
    }
    set {
      actorHeader.attributes = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.unexpectedBetweenAttributesAndModifiers")
  public var unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? {
    get {
      return actorHeader.unexpectedBetweenAttributesAndModifiers
    }
    set {
      actorHeader.unexpectedBetweenAttributesAndModifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.modifiers")
  public var modifiers: DeclModifierListSyntax {
    get {
      return actorHeader.modifiers
    }
    set {
      actorHeader.modifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.unexpectedBetweenModifiersAndActorKeyword")
  public var unexpectedBetweenModifiersAndActorKeyword: UnexpectedNodesSyntax? {
    get {
      return actorHeader.unexpectedBetweenModifiersAndActorKeyword
    }
    set {
      actorHeader.unexpectedBetweenModifiersAndActorKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.actorKeyword")
  public var actorKeyword: TokenSyntax {
    get {
      return actorHeader.actorKeyword
    }
    set {
      actorHeader.actorKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.unexpectedBetweenActorKeywordAndName")
  public var unexpectedBetweenActorKeywordAndName: UnexpectedNodesSyntax? {
    get {
      return actorHeader.unexpectedBetweenActorKeywordAndName
    }
    set {
      actorHeader.unexpectedBetweenActorKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.name")
  public var name: TokenSyntax {
    get {
      return actorHeader.name
    }
    set {
      actorHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenNameAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return actorHeader.unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      actorHeader.unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.genericParameterClause")
  public var genericParameterClause: GenericParameterClauseSyntax? {
    get {
      return actorHeader.genericParameterClause
    }
    set {
      actorHeader.genericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause")
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return actorHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause
    }
    set {
      actorHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.inheritanceClause")
  public var inheritanceClause: InheritanceClauseSyntax? {
    get {
      return actorHeader.inheritanceClause
    }
    set {
      actorHeader.inheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause")
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return actorHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause
    }
    set {
      actorHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.genericWhereClause")
  public var genericWhereClause: GenericWhereClauseSyntax? {
    get {
      return actorHeader.genericWhereClause
    }
    set {
      actorHeader.genericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenActorHeaderAndMemberBlock")
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenActorHeaderAndMemberBlock
    }
    set {
      unexpectedBetweenActorHeaderAndMemberBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.unexpectedBetweenActorKeywordAndName")
  public var unexpectedBetweenActorKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return actorHeader.unexpectedBetweenActorKeywordAndName
    }
    set {
      actorHeader.unexpectedBetweenActorKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.name")
  public var identifier: TokenSyntax {
    get {
      return actorHeader.name
    }
    set {
      actorHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "actorHeader.unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return actorHeader.unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      actorHeader.unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:actorHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndActorKeyword: UnexpectedNodesSyntax? = nil,
    actorKeyword: TokenSyntax = .keyword(.actor),
    _ unexpectedBetweenActorKeywordAndName: UnexpectedNodesSyntax? = nil,
    name: TokenSyntax,
    _ unexpectedBetweenNameAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      actorHeader: ActorDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndActorKeyword,
        actorKeyword: actorKeyword,
        unexpectedBetweenActorKeywordAndName,
        name: name,
        unexpectedBetweenNameAndGenericParameterClause,
        genericParameterClause: genericParameterClause,
        unexpectedBetweenGenericParameterClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:actorHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndActorKeyword: UnexpectedNodesSyntax? = nil,
    actorKeyword: TokenSyntax = .keyword(.actor),
    _ unexpectedBetweenActorKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      actorHeader: ActorDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndActorKeyword,
        actorKeyword: actorKeyword,
        unexpectedBetweenActorKeywordAndIdentifier,
        name: identifier,
        unexpectedBetweenIdentifierAndGenericParameterClause,
        genericParameterClause: genericParameterClause,
        unexpectedBetweenGenericParameterClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ArrayExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndElements")
  public var unexpectedBetweenLeftSquareBracketAndElements: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndElements
    }
    set {
      unexpectedBetweenLeftSquareAndElements = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightSquare")
  public var unexpectedBetweenElementsAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementsAndRightSquare
    }
    set {
      unexpectedBetweenElementsAndRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftSquare:_:elements:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
    leftSquareBracket: TokenSyntax = .leftSquareToken(),
    _ unexpectedBetweenLeftSquareBracketAndElements: UnexpectedNodesSyntax? = nil,
    elements: ArrayElementListSyntax,
    _ unexpectedBetweenElementsAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
    rightSquareBracket: TokenSyntax = .rightSquareToken(),
    _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftSquareBracket,
      leftSquare: leftSquareBracket,
      unexpectedBetweenLeftSquareBracketAndElements,
      elements: elements,
      unexpectedBetweenElementsAndRightSquareBracket,
      rightSquare: rightSquareBracket,
      unexpectedAfterRightSquareBracket,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ArrayTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndElement")
  public var unexpectedBetweenLeftSquareBracketAndElementType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndElement
    }
    set {
      unexpectedBetweenLeftSquareAndElement = newValue
    }
  }

  @available(*, deprecated, renamed: "element")
  public var elementType: TypeSyntax {
    get {
      return element
    }
    set {
      element = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenElementAndRightSquare")
  public var unexpectedBetweenElementTypeAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementAndRightSquare
    }
    set {
      unexpectedBetweenElementAndRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftSquare:_:element:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
    leftSquareBracket: TokenSyntax = .leftSquareToken(),
    _ unexpectedBetweenLeftSquareBracketAndElementType: UnexpectedNodesSyntax? = nil,
    elementType: some TypeSyntaxProtocol,
    _ unexpectedBetweenElementTypeAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
    rightSquareBracket: TokenSyntax = .rightSquareToken(),
    _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftSquareBracket,
      leftSquare: leftSquareBracket,
      unexpectedBetweenLeftSquareBracketAndElementType,
      element: elementType,
      unexpectedBetweenElementTypeAndRightSquareBracket,
      rightSquare: rightSquareBracket,
      unexpectedAfterRightSquareBracket,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ArrowExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndArrow")
  public var unexpectedBetweenEffectSpecifiersAndArrowToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEffectSpecifiersAndArrow
    }
    set {
      unexpectedBetweenEffectSpecifiersAndArrow = newValue
    }
  }

  @available(*, deprecated, renamed: "arrow")
  public var arrowToken: TokenSyntax {
    get {
      return arrow
    }
    set {
      arrow = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterArrow")
  public var unexpectedAfterArrowToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterArrow
    }
    set {
      unexpectedAfterArrow = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:effectSpecifiers:_:arrow:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeEffectSpecifiers: UnexpectedNodesSyntax? = nil,
    effectSpecifiers: TypeEffectSpecifiersSyntax? = nil,
    _ unexpectedBetweenEffectSpecifiersAndArrowToken: UnexpectedNodesSyntax? = nil,
    arrowToken: TokenSyntax = .arrowToken(),
    _ unexpectedAfterArrowToken: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeEffectSpecifiers,
      effectSpecifiers: effectSpecifiers,
      unexpectedBetweenEffectSpecifiersAndArrowToken,
      arrow: arrowToken,
      unexpectedAfterArrowToken,
      trailingTrivia: trailingTrivia
    )
  }
}

extension AsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndAsKeyword")
  public var unexpectedBetweenExpressionAndAsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenExpressionAndAsKeyword
    }
    set {
      unexpectedBetweenExpressionAndAsKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "asKeyword")
  public var asTok: TokenSyntax {
    get {
      return asKeyword
    }
    set {
      asKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAsKeywordAndQuestionOrExclamationMark")
  public var unexpectedBetweenAsTokAndQuestionOrExclamationMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAsKeywordAndQuestionOrExclamationMark
    }
    set {
      unexpectedBetweenAsKeywordAndQuestionOrExclamationMark = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenQuestionOrExclamationMarkAndType")
  public var unexpectedBetweenQuestionOrExclamationMarkAndTypeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenQuestionOrExclamationMarkAndType
    }
    set {
      unexpectedBetweenQuestionOrExclamationMarkAndType = newValue
    }
  }

  @available(*, deprecated, renamed: "type")
  public var typeName: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterTypeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterType
    }
    set {
      unexpectedAfterType = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:expression:_:asKeyword:_:questionOrExclamationMark:_:type:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeExpression: UnexpectedNodesSyntax? = nil,
    expression: some ExprSyntaxProtocol,
    _ unexpectedBetweenExpressionAndAsTok: UnexpectedNodesSyntax? = nil,
    asTok: TokenSyntax = .keyword(.as),
    _ unexpectedBetweenAsTokAndQuestionOrExclamationMark: UnexpectedNodesSyntax? = nil,
    questionOrExclamationMark: TokenSyntax? = nil,
    _ unexpectedBetweenQuestionOrExclamationMarkAndTypeName: UnexpectedNodesSyntax? = nil,
    typeName: some TypeSyntaxProtocol,
    _ unexpectedAfterTypeName: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeExpression,
      expression: expression,
      unexpectedBetweenExpressionAndAsTok,
      asKeyword: asTok,
      unexpectedBetweenAsTokAndQuestionOrExclamationMark,
      questionOrExclamationMark: questionOrExclamationMark,
      unexpectedBetweenQuestionOrExclamationMarkAndTypeName,
      type: typeName,
      unexpectedAfterTypeName,
      trailingTrivia: trailingTrivia
    )
  }
}

extension AssignmentExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeEqual")
  public var unexpectedBeforeAssignToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeEqual
    }
    set {
      unexpectedBeforeEqual = newValue
    }
  }

  @available(*, deprecated, renamed: "equal")
  public var assignToken: TokenSyntax {
    get {
      return equal
    }
    set {
      equal = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterEqual")
  public var unexpectedAfterAssignToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterEqual
    }
    set {
      unexpectedAfterEqual = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:equal:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAssignToken: UnexpectedNodesSyntax? = nil,
    assignToken: TokenSyntax = .equalToken(),
    _ unexpectedAfterAssignToken: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAssignToken,
      equal: assignToken,
      unexpectedAfterAssignToken,
      trailingTrivia: trailingTrivia
    )
  }
}

extension AssociatedTypeDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenAssociatedtypeKeywordAndName")
  public var unexpectedBetweenAssociatedtypeKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAssociatedtypeKeywordAndName
    }
    set {
      unexpectedBetweenAssociatedtypeKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "name")
  public var identifier: TokenSyntax {
    get {
      return name
    }
    set {
      name = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenNameAndInheritanceClause")
  public var unexpectedBetweenIdentifierAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndInheritanceClause
    }
    set {
      unexpectedBetweenNameAndInheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:associatedtypeKeyword:_:name:_:inheritanceClause:_:initializer:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndAssociatedtypeKeyword: UnexpectedNodesSyntax? = nil,
    associatedtypeKeyword: TokenSyntax = .keyword(.associatedtype),
    _ unexpectedBetweenAssociatedtypeKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndInitializer: UnexpectedNodesSyntax? = nil,
    initializer: TypeInitializerClauseSyntax? = nil,
    _ unexpectedBetweenInitializerAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedAfterGenericWhereClause: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndAssociatedtypeKeyword,
      associatedtypeKeyword: associatedtypeKeyword,
      unexpectedBetweenAssociatedtypeKeywordAndIdentifier,
      name: identifier,
      unexpectedBetweenIdentifierAndInheritanceClause,
      inheritanceClause: inheritanceClause,
      unexpectedBetweenInheritanceClauseAndInitializer,
      initializer: initializer,
      unexpectedBetweenInitializerAndGenericWhereClause,
      genericWhereClause: genericWhereClause,
      unexpectedAfterGenericWhereClause,
      trailingTrivia: trailingTrivia
    )
  }
}

extension AttributeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAtSign")
  public var unexpectedBeforeAtSignToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAtSign
    }
    set {
      unexpectedBeforeAtSign = newValue
    }
  }

  @available(*, deprecated, renamed: "atSign")
  public var atSignToken: TokenSyntax {
    get {
      return atSign
    }
    set {
      atSign = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAtSignAndAttributeName")
  public var unexpectedBetweenAtSignTokenAndAttributeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAtSignAndAttributeName
    }
    set {
      unexpectedBetweenAtSignAndAttributeName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgument: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndArguments
    }
    set {
      unexpectedBetweenLeftParenAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var argument: Arguments? {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightParen
    }
    set {
      unexpectedBetweenArgumentsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:atSign:_:attributeName:_:leftParen:_:arguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAtSignToken: UnexpectedNodesSyntax? = nil,
    atSignToken: TokenSyntax = .atSignToken(),
    _ unexpectedBetweenAtSignTokenAndAttributeName: UnexpectedNodesSyntax? = nil,
    attributeName: some TypeSyntaxProtocol,
    _ unexpectedBetweenAttributeNameAndLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax? = nil,
    _ unexpectedBetweenLeftParenAndArgument: UnexpectedNodesSyntax? = nil,
    argument: Arguments? = nil,
    _ unexpectedBetweenArgumentAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax? = nil,
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAtSignToken,
      atSign: atSignToken,
      unexpectedBetweenAtSignTokenAndAttributeName,
      attributeName: attributeName,
      unexpectedBetweenAttributeNameAndLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndArgument,
      arguments: argument,
      unexpectedBetweenArgumentAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension AvailabilityArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeArgument")
  public var unexpectedBeforeEntry: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeArgument
    }
    set {
      unexpectedBeforeArgument = newValue
    }
  }

  @available(*, deprecated, renamed: "argument")
  public var entry: Argument {
    get {
      return argument
    }
    set {
      argument = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentAndTrailingComma")
  public var unexpectedBetweenEntryAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentAndTrailingComma
    }
    set {
      unexpectedBetweenArgumentAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:argument:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeEntry: UnexpectedNodesSyntax? = nil,
    entry: Argument,
    _ unexpectedBetweenEntryAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeEntry,
      argument: entry,
      unexpectedBetweenEntryAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension AvailabilityConditionSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndAvailabilityArguments")
  public var unexpectedBetweenLeftParenAndAvailabilitySpec: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndAvailabilityArguments
    }
    set {
      unexpectedBetweenLeftParenAndAvailabilityArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilitySpec: AvailabilityArgumentListSyntax {
    get {
      return availabilityArguments
    }
    set {
      availabilityArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndRightParen")
  public var unexpectedBetweenAvailabilitySpecAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityArgumentsAndRightParen
    }
    set {
      unexpectedBetweenAvailabilityArgumentsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:availabilityKeyword:_:leftParen:_:availabilityArguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAvailabilityKeyword: UnexpectedNodesSyntax? = nil,
    availabilityKeyword: TokenSyntax,
    _ unexpectedBetweenAvailabilityKeywordAndLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndAvailabilitySpec: UnexpectedNodesSyntax? = nil,
    availabilitySpec: AvailabilityArgumentListSyntax,
    _ unexpectedBetweenAvailabilitySpecAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAvailabilityKeyword,
      availabilityKeyword: availabilityKeyword,
      unexpectedBetweenAvailabilityKeywordAndLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndAvailabilitySpec,
      availabilityArguments: availabilitySpec,
      unexpectedBetweenAvailabilitySpecAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension BackDeployedAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPlatforms")
  public var unexpectedBetweenColonAndVersionList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndPlatforms
    }
    set {
      unexpectedBetweenColonAndPlatforms = newValue
    }
  }

  @available(*, deprecated, renamed: "platforms")
  public var versionList: PlatformVersionItemListSyntax {
    get {
      return platforms
    }
    set {
      platforms = newValue
    }
  }

  @available(*, deprecated, renamed: "addPlatform")
  public func addAvailability(_ element: PlatformVersionItemSyntax) -> Self {
    return addPlatform(element)
  }

  @available(*, deprecated, renamed: "unexpectedAfterPlatforms")
  public var unexpectedAfterVersionList: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPlatforms
    }
    set {
      unexpectedAfterPlatforms = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:beforeLabel:_:colon:_:platforms:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeBeforeLabel: UnexpectedNodesSyntax? = nil,
    beforeLabel: TokenSyntax = .keyword(.before),
    _ unexpectedBetweenBeforeLabelAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndVersionList: UnexpectedNodesSyntax? = nil,
    versionList: PlatformVersionItemListSyntax,
    _ unexpectedAfterVersionList: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeBeforeLabel,
      beforeLabel: beforeLabel,
      unexpectedBetweenBeforeLabelAndColon,
      colon: colon,
      unexpectedBetweenColonAndVersionList,
      platforms: versionList,
      unexpectedAfterVersionList,
      trailingTrivia: trailingTrivia
    )
  }
}

extension BinaryOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOperator")
  public var unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeOperator
    }
    set {
      unexpectedBeforeOperator = newValue
    }
  }

  @available(*, deprecated, renamed: "operator")
  public var operatorToken: TokenSyntax {
    get {
      return `operator`
    }
    set {
      `operator` = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterOperator")
  public var unexpectedAfterOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterOperator
    }
    set {
      unexpectedAfterOperator = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:operator:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? = nil,
    operatorToken: TokenSyntax,
    _ unexpectedAfterOperatorToken: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeOperatorToken,
      operator: operatorToken,
      unexpectedAfterOperatorToken,
      trailingTrivia: trailingTrivia
    )
  }
}

extension BooleanLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLiteral")
  public var unexpectedBeforeBooleanLiteral: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLiteral
    }
    set {
      unexpectedBeforeLiteral = newValue
    }
  }

  @available(*, deprecated, renamed: "literal")
  public var booleanLiteral: TokenSyntax {
    get {
      return literal
    }
    set {
      literal = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterLiteral")
  public var unexpectedAfterBooleanLiteral: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterLiteral
    }
    set {
      unexpectedAfterLiteral = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:literal:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeBooleanLiteral: UnexpectedNodesSyntax? = nil,
    booleanLiteral: TokenSyntax,
    _ unexpectedAfterBooleanLiteral: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeBooleanLiteral,
      literal: booleanLiteral,
      unexpectedAfterBooleanLiteral,
      trailingTrivia: trailingTrivia
    )
  }
}

extension _CanImportVersionInfoSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndVersion")
  public var unexpectedBetweenColonAndVersionTuple: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndVersion
    }
    set {
      unexpectedBetweenColonAndVersion = newValue
    }
  }

  @available(*, deprecated, renamed: "version")
  public var versionTuple: VersionTupleSyntax {
    get {
      return version
    }
    set {
      version = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterVersion")
  public var unexpectedAfterVersionTuple: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterVersion
    }
    set {
      unexpectedAfterVersion = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:comma:_:label:_:colon:_:version:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeComma: UnexpectedNodesSyntax? = nil,
    comma: TokenSyntax = .commaToken(),
    _ unexpectedBetweenCommaAndLabel: UnexpectedNodesSyntax? = nil,
    label: TokenSyntax,
    _ unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndVersionTuple: UnexpectedNodesSyntax? = nil,
    versionTuple: VersionTupleSyntax,
    _ unexpectedAfterVersionTuple: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeComma,
      comma: comma,
      unexpectedBetweenCommaAndLabel,
      label: label,
      unexpectedBetweenLabelAndColon,
      colon: colon,
      unexpectedBetweenColonAndVersionTuple,
      version: versionTuple,
      unexpectedAfterVersionTuple,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ClassDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeClassHeader")
  public var unexpectedBeforeAttributes: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeClassHeader
    }
    set {
      unexpectedBeforeClassHeader = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.attributes")
  public var attributes: AttributeListSyntax {
    get {
      return classHeader.attributes
    }
    set {
      classHeader.attributes = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.unexpectedBetweenAttributesAndModifiers")
  public var unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? {
    get {
      return classHeader.unexpectedBetweenAttributesAndModifiers
    }
    set {
      classHeader.unexpectedBetweenAttributesAndModifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.modifiers")
  public var modifiers: DeclModifierListSyntax {
    get {
      return classHeader.modifiers
    }
    set {
      classHeader.modifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.unexpectedBetweenModifiersAndClassKeyword")
  public var unexpectedBetweenModifiersAndClassKeyword: UnexpectedNodesSyntax? {
    get {
      return classHeader.unexpectedBetweenModifiersAndClassKeyword
    }
    set {
      classHeader.unexpectedBetweenModifiersAndClassKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.classKeyword")
  public var classKeyword: TokenSyntax {
    get {
      return classHeader.classKeyword
    }
    set {
      classHeader.classKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.unexpectedBetweenClassKeywordAndName")
  public var unexpectedBetweenClassKeywordAndName: UnexpectedNodesSyntax? {
    get {
      return classHeader.unexpectedBetweenClassKeywordAndName
    }
    set {
      classHeader.unexpectedBetweenClassKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.name")
  public var name: TokenSyntax {
    get {
      return classHeader.name
    }
    set {
      classHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenNameAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return classHeader.unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      classHeader.unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.genericParameterClause")
  public var genericParameterClause: GenericParameterClauseSyntax? {
    get {
      return classHeader.genericParameterClause
    }
    set {
      classHeader.genericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause")
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return classHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause
    }
    set {
      classHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.inheritanceClause")
  public var inheritanceClause: InheritanceClauseSyntax? {
    get {
      return classHeader.inheritanceClause
    }
    set {
      classHeader.inheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause")
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return classHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause
    }
    set {
      classHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.genericWhereClause")
  public var genericWhereClause: GenericWhereClauseSyntax? {
    get {
      return classHeader.genericWhereClause
    }
    set {
      classHeader.genericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenClassHeaderAndMemberBlock")
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenClassHeaderAndMemberBlock
    }
    set {
      unexpectedBetweenClassHeaderAndMemberBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.unexpectedBetweenClassKeywordAndName")
  public var unexpectedBetweenClassKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return classHeader.unexpectedBetweenClassKeywordAndName
    }
    set {
      classHeader.unexpectedBetweenClassKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.name")
  public var identifier: TokenSyntax {
    get {
      return classHeader.name
    }
    set {
      classHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "classHeader.unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return classHeader.unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      classHeader.unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:classHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndClassKeyword: UnexpectedNodesSyntax? = nil,
    classKeyword: TokenSyntax = .keyword(.class),
    _ unexpectedBetweenClassKeywordAndName: UnexpectedNodesSyntax? = nil,
    name: TokenSyntax,
    _ unexpectedBetweenNameAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      classHeader: ClassDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndClassKeyword,
        classKeyword: classKeyword,
        unexpectedBetweenClassKeywordAndName,
        name: name,
        unexpectedBetweenNameAndGenericParameterClause,
        genericParameterClause: genericParameterClause,
        unexpectedBetweenGenericParameterClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:classHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndClassKeyword: UnexpectedNodesSyntax? = nil,
    classKeyword: TokenSyntax = .keyword(.class),
    _ unexpectedBetweenClassKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      classHeader: ClassDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndClassKeyword,
        classKeyword: classKeyword,
        unexpectedBetweenClassKeywordAndIdentifier,
        name: identifier,
        unexpectedBetweenIdentifierAndGenericParameterClause,
        genericParameterClause: genericParameterClause,
        unexpectedBetweenGenericParameterClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ClosureParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndParameterList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndParameters
    }
    set {
      unexpectedBetweenLeftParenAndParameters = newValue
    }
  }

  @available(*, deprecated, renamed: "parameters")
  public var parameterList: ClosureParameterListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenParameterListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndRightParen
    }
    set {
      unexpectedBetweenParametersAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndParameterList: UnexpectedNodesSyntax? = nil,
    parameterList: ClosureParameterListSyntax,
    _ unexpectedBetweenParameterListAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndParameterList,
      parameters: parameterList,
      unexpectedBetweenParameterListAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ClosureSignatureSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenCaptureAndParameterClause")
  public var unexpectedBetweenCaptureAndInput: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCaptureAndParameterClause
    }
    set {
      unexpectedBetweenCaptureAndParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "parameterClause")
  public var input: ParameterClause? {
    get {
      return parameterClause
    }
    set {
      parameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParameterClauseAndEffectSpecifiers")
  public var unexpectedBetweenInputAndEffectSpecifiers: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParameterClauseAndEffectSpecifiers
    }
    set {
      unexpectedBetweenParameterClauseAndEffectSpecifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndReturnClause")
  public var unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEffectSpecifiersAndReturnClause
    }
    set {
      unexpectedBetweenEffectSpecifiersAndReturnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "returnClause")
  public var output: ReturnClauseSyntax? {
    get {
      return returnClause
    }
    set {
      returnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenReturnClauseAndInKeyword")
  public var unexpectedBetweenOutputAndInTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenReturnClauseAndInKeyword
    }
    set {
      unexpectedBetweenReturnClauseAndInKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "inKeyword")
  public var inTok: TokenSyntax {
    get {
      return inKeyword
    }
    set {
      inKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterInKeyword")
  public var unexpectedAfterInTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterInKeyword
    }
    set {
      unexpectedAfterInKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:capture:_:parameterClause:_:effectSpecifiers:_:returnClause:_:inKeyword:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndCapture: UnexpectedNodesSyntax? = nil,
    capture: ClosureCaptureClauseSyntax? = nil,
    _ unexpectedBetweenCaptureAndInput: UnexpectedNodesSyntax? = nil,
    input: ParameterClause? = nil,
    _ unexpectedBetweenInputAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
    effectSpecifiers: TypeEffectSpecifiersSyntax? = nil,
    _ unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? = nil,
    output: ReturnClauseSyntax? = nil,
    _ unexpectedBetweenOutputAndInTok: UnexpectedNodesSyntax? = nil,
    inTok: TokenSyntax = .keyword(.in),
    _ unexpectedAfterInTok: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndCapture,
      capture: capture,
      unexpectedBetweenCaptureAndInput,
      parameterClause: input,
      unexpectedBetweenInputAndEffectSpecifiers,
      effectSpecifiers: effectSpecifiers,
      unexpectedBetweenEffectSpecifiersAndOutput,
      returnClause: output,
      unexpectedBetweenOutputAndInTok,
      inKeyword: inTok,
      unexpectedAfterInTok,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ConformanceRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftType")
  public var unexpectedBeforeLeftTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftType
    }
    set {
      unexpectedBeforeLeftType = newValue
    }
  }

  @available(*, deprecated, renamed: "leftType")
  public var leftTypeIdentifier: TypeSyntax {
    get {
      return leftType
    }
    set {
      leftType = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftTypeAndColon")
  public var unexpectedBetweenLeftTypeIdentifierAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftTypeAndColon
    }
    set {
      unexpectedBetweenLeftTypeAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndRightType")
  public var unexpectedBetweenColonAndRightTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndRightType
    }
    set {
      unexpectedBetweenColonAndRightType = newValue
    }
  }

  @available(*, deprecated, renamed: "rightType")
  public var rightTypeIdentifier: TypeSyntax {
    get {
      return rightType
    }
    set {
      rightType = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightType")
  public var unexpectedAfterRightTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightType
    }
    set {
      unexpectedAfterRightType = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftType:_:colon:_:rightType:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftTypeIdentifier: UnexpectedNodesSyntax? = nil,
    leftTypeIdentifier: some TypeSyntaxProtocol,
    _ unexpectedBetweenLeftTypeIdentifierAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndRightTypeIdentifier: UnexpectedNodesSyntax? = nil,
    rightTypeIdentifier: some TypeSyntaxProtocol,
    _ unexpectedAfterRightTypeIdentifier: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftTypeIdentifier,
      leftType: leftTypeIdentifier,
      unexpectedBetweenLeftTypeIdentifierAndColon,
      colon: colon,
      unexpectedBetweenColonAndRightTypeIdentifier,
      rightType: rightTypeIdentifier,
      unexpectedAfterRightTypeIdentifier,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ConsumeExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeConsumeKeyword")
  public var unexpectedBeforeMoveKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeConsumeKeyword
    }
    set {
      unexpectedBeforeConsumeKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "consumeKeyword")
  public var moveKeyword: TokenSyntax {
    get {
      return consumeKeyword
    }
    set {
      consumeKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenConsumeKeywordAndExpression")
  public var unexpectedBetweenMoveKeywordAndExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenConsumeKeywordAndExpression
    }
    set {
      unexpectedBetweenConsumeKeywordAndExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:consumeKeyword:_:expression:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeMoveKeyword: UnexpectedNodesSyntax? = nil,
    moveKeyword: TokenSyntax,
    _ unexpectedBetweenMoveKeywordAndExpression: UnexpectedNodesSyntax? = nil,
    expression: some ExprSyntaxProtocol,
    _ unexpectedAfterExpression: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeMoveKeyword,
      consumeKeyword: moveKeyword,
      unexpectedBetweenMoveKeywordAndExpression,
      expression: expression,
      unexpectedAfterExpression,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DeclReferenceExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeBaseName")
  public var unexpectedBeforeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeBaseName
    }
    set {
      unexpectedBeforeBaseName = newValue
    }
  }

  @available(*, deprecated, renamed: "baseName")
  public var identifier: TokenSyntax {
    get {
      return baseName
    }
    set {
      baseName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenBaseNameAndArgumentNames")
  public var unexpectedBetweenIdentifierAndDeclNameArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBaseNameAndArgumentNames
    }
    set {
      unexpectedBetweenBaseNameAndArgumentNames = newValue
    }
  }

  @available(*, deprecated, renamed: "argumentNames")
  public var declNameArguments: DeclNameArgumentsSyntax? {
    get {
      return argumentNames
    }
    set {
      argumentNames = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterArgumentNames")
  public var unexpectedAfterDeclNameArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterArgumentNames
    }
    set {
      unexpectedAfterArgumentNames = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:baseName:_:argumentNames:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndDeclNameArguments: UnexpectedNodesSyntax? = nil,
    declNameArguments: DeclNameArgumentsSyntax? = nil,
    _ unexpectedAfterDeclNameArguments: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeIdentifier,
      baseName: identifier,
      unexpectedBetweenIdentifierAndDeclNameArguments,
      argumentNames: declNameArguments,
      unexpectedAfterDeclNameArguments,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DerivativeAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndAccessorSpecifier")
  public var unexpectedBetweenPeriodAndAccessorKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPeriodAndAccessorSpecifier
    }
    set {
      unexpectedBetweenPeriodAndAccessorSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "accessorSpecifier")
  public var accessorKind: TokenSyntax? {
    get {
      return accessorSpecifier
    }
    set {
      accessorSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAccessorSpecifierAndComma")
  public var unexpectedBetweenAccessorKindAndComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAccessorSpecifierAndComma
    }
    set {
      unexpectedBetweenAccessorSpecifierAndComma = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndArguments")
  public var unexpectedBetweenCommaAndDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCommaAndArguments
    }
    set {
      unexpectedBetweenCommaAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var diffParams: DifferentiabilityWithRespectToArgumentSyntax? {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterArguments")
  public var unexpectedAfterDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterArguments
    }
    set {
      unexpectedAfterArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:ofLabel:_:colon:_:originalDeclName:_:period:_:accessorSpecifier:_:comma:_:arguments:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeOfLabel: UnexpectedNodesSyntax? = nil,
    ofLabel: TokenSyntax = .keyword(.of),
    _ unexpectedBetweenOfLabelAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndOriginalDeclName: UnexpectedNodesSyntax? = nil,
    originalDeclName: some ExprSyntaxProtocol,
    _ unexpectedBetweenOriginalDeclNameAndPeriod: UnexpectedNodesSyntax? = nil,
    period: TokenSyntax? = nil,
    _ unexpectedBetweenPeriodAndAccessorKind: UnexpectedNodesSyntax? = nil,
    accessorKind: TokenSyntax? = nil,
    _ unexpectedBetweenAccessorKindAndComma: UnexpectedNodesSyntax? = nil,
    comma: TokenSyntax? = nil,
    _ unexpectedBetweenCommaAndDiffParams: UnexpectedNodesSyntax? = nil,
    diffParams: DifferentiabilityWithRespectToArgumentSyntax? = nil,
    _ unexpectedAfterDiffParams: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeOfLabel,
      ofLabel: ofLabel,
      unexpectedBetweenOfLabelAndColon,
      colon: colon,
      unexpectedBetweenColonAndOriginalDeclName,
      originalDeclName: originalDeclName,
      unexpectedBetweenOriginalDeclNameAndPeriod,
      period: period,
      unexpectedBetweenPeriodAndAccessorKind,
      accessorSpecifier: accessorKind,
      unexpectedBetweenAccessorKindAndComma,
      comma: comma,
      unexpectedBetweenCommaAndDiffParams,
      arguments: diffParams,
      unexpectedAfterDiffParams,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DictionaryElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeKey")
  public var unexpectedBeforeKeyExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeKey
    }
    set {
      unexpectedBeforeKey = newValue
    }
  }

  @available(*, deprecated, renamed: "key")
  public var keyExpression: ExprSyntax {
    get {
      return key
    }
    set {
      key = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenKeyAndColon")
  public var unexpectedBetweenKeyExpressionAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKeyAndColon
    }
    set {
      unexpectedBetweenKeyAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndValue")
  public var unexpectedBetweenColonAndValueExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndValue
    }
    set {
      unexpectedBetweenColonAndValue = newValue
    }
  }

  @available(*, deprecated, renamed: "value")
  public var valueExpression: ExprSyntax {
    get {
      return value
    }
    set {
      value = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenValueAndTrailingComma")
  public var unexpectedBetweenValueExpressionAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenValueAndTrailingComma
    }
    set {
      unexpectedBetweenValueAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:key:_:colon:_:value:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeKeyExpression: UnexpectedNodesSyntax? = nil,
    keyExpression: some ExprSyntaxProtocol,
    _ unexpectedBetweenKeyExpressionAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndValueExpression: UnexpectedNodesSyntax? = nil,
    valueExpression: some ExprSyntaxProtocol,
    _ unexpectedBetweenValueExpressionAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeKeyExpression,
      key: keyExpression,
      unexpectedBetweenKeyExpressionAndColon,
      colon: colon,
      unexpectedBetweenColonAndValueExpression,
      value: valueExpression,
      unexpectedBetweenValueExpressionAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DictionaryTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndKey")
  public var unexpectedBetweenLeftSquareBracketAndKeyType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndKey
    }
    set {
      unexpectedBetweenLeftSquareAndKey = newValue
    }
  }

  @available(*, deprecated, renamed: "key")
  public var keyType: TypeSyntax {
    get {
      return key
    }
    set {
      key = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenKeyAndColon")
  public var unexpectedBetweenKeyTypeAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKeyAndColon
    }
    set {
      unexpectedBetweenKeyAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndValue")
  public var unexpectedBetweenColonAndValueType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndValue
    }
    set {
      unexpectedBetweenColonAndValue = newValue
    }
  }

  @available(*, deprecated, renamed: "value")
  public var valueType: TypeSyntax {
    get {
      return value
    }
    set {
      value = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenValueAndRightSquare")
  public var unexpectedBetweenValueTypeAndRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenValueAndRightSquare
    }
    set {
      unexpectedBetweenValueAndRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftSquare:_:key:_:colon:_:value:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftSquareBracket: UnexpectedNodesSyntax? = nil,
    leftSquareBracket: TokenSyntax = .leftSquareToken(),
    _ unexpectedBetweenLeftSquareBracketAndKeyType: UnexpectedNodesSyntax? = nil,
    keyType: some TypeSyntaxProtocol,
    _ unexpectedBetweenKeyTypeAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndValueType: UnexpectedNodesSyntax? = nil,
    valueType: some TypeSyntaxProtocol,
    _ unexpectedBetweenValueTypeAndRightSquareBracket: UnexpectedNodesSyntax? = nil,
    rightSquareBracket: TokenSyntax = .rightSquareToken(),
    _ unexpectedAfterRightSquareBracket: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftSquareBracket,
      leftSquare: leftSquareBracket,
      unexpectedBetweenLeftSquareBracketAndKeyType,
      key: keyType,
      unexpectedBetweenKeyTypeAndColon,
      colon: colon,
      unexpectedBetweenColonAndValueType,
      value: valueType,
      unexpectedBetweenValueTypeAndRightSquareBracket,
      rightSquare: rightSquareBracket,
      unexpectedAfterRightSquareBracket,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DifferentiabilityArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeArgument")
  public var unexpectedBeforeParameter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeArgument
    }
    set {
      unexpectedBeforeArgument = newValue
    }
  }

  @available(*, deprecated, renamed: "argument")
  public var parameter: TokenSyntax {
    get {
      return argument
    }
    set {
      argument = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentAndTrailingComma")
  public var unexpectedBetweenParameterAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentAndTrailingComma
    }
    set {
      unexpectedBetweenArgumentAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:argument:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeParameter: UnexpectedNodesSyntax? = nil,
    parameter: TokenSyntax,
    _ unexpectedBetweenParameterAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeParameter,
      argument: parameter,
      unexpectedBetweenParameterAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DifferentiabilityArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndDifferentiabilityParameters: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndArguments
    }
    set {
      unexpectedBetweenLeftParenAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var differentiabilityParameters: DifferentiabilityArgumentListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenDifferentiabilityParametersAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightParen
    }
    set {
      unexpectedBetweenArgumentsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftParen:_:arguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndDifferentiabilityParameters: UnexpectedNodesSyntax? = nil,
    differentiabilityParameters: DifferentiabilityArgumentListSyntax,
    _ unexpectedBetweenDifferentiabilityParametersAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndDifferentiabilityParameters,
      arguments: differentiabilityParameters,
      unexpectedBetweenDifferentiabilityParametersAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DifferentiabilityWithRespectToArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndArguments")
  public var unexpectedBetweenColonAndParameters: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndArguments
    }
    set {
      unexpectedBetweenColonAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var parameters: Arguments {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterArguments")
  public var unexpectedAfterParameters: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterArguments
    }
    set {
      unexpectedAfterArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:wrtLabel:_:colon:_:arguments:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeWrtLabel: UnexpectedNodesSyntax? = nil,
    wrtLabel: TokenSyntax = .keyword(.wrt),
    _ unexpectedBetweenWrtLabelAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndParameters: UnexpectedNodesSyntax? = nil,
    parameters: Arguments,
    _ unexpectedAfterParameters: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeWrtLabel,
      wrtLabel: wrtLabel,
      unexpectedBetweenWrtLabelAndColon,
      colon: colon,
      unexpectedBetweenColonAndParameters,
      arguments: parameters,
      unexpectedAfterParameters,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DifferentiableAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeKindSpecifier")
  public var unexpectedBeforeDiffKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeKindSpecifier
    }
    set {
      unexpectedBeforeKindSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "kindSpecifier")
  public var diffKind: TokenSyntax? {
    get {
      return kindSpecifier
    }
    set {
      kindSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenKindSpecifierAndKindSpecifierComma")
  public var unexpectedBetweenDiffKindAndDiffKindComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKindSpecifierAndKindSpecifierComma
    }
    set {
      unexpectedBetweenKindSpecifierAndKindSpecifierComma = newValue
    }
  }

  @available(*, deprecated, renamed: "kindSpecifierComma")
  public var diffKindComma: TokenSyntax? {
    get {
      return kindSpecifierComma
    }
    set {
      kindSpecifierComma = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenKindSpecifierCommaAndArguments")
  public var unexpectedBetweenDiffKindCommaAndDiffParams: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenKindSpecifierCommaAndArguments
    }
    set {
      unexpectedBetweenKindSpecifierCommaAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var diffParams: DifferentiabilityWithRespectToArgumentSyntax? {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndArgumentsComma")
  public var unexpectedBetweenDiffParamsAndDiffParamsComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndArgumentsComma
    }
    set {
      unexpectedBetweenArgumentsAndArgumentsComma = newValue
    }
  }

  @available(*, deprecated, renamed: "argumentsComma")
  public var diffParamsComma: TokenSyntax? {
    get {
      return argumentsComma
    }
    set {
      argumentsComma = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsCommaAndGenericWhereClause")
  public var unexpectedBetweenDiffParamsCommaAndWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsCommaAndGenericWhereClause
    }
    set {
      unexpectedBetweenArgumentsCommaAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "genericWhereClause")
  public var whereClause: GenericWhereClauseSyntax? {
    get {
      return genericWhereClause
    }
    set {
      genericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterGenericWhereClause")
  public var unexpectedAfterWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterGenericWhereClause
    }
    set {
      unexpectedAfterGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:kindSpecifier:_:kindSpecifierComma:_:arguments:_:argumentsComma:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeDiffKind: UnexpectedNodesSyntax? = nil,
    diffKind: TokenSyntax? = nil,
    _ unexpectedBetweenDiffKindAndDiffKindComma: UnexpectedNodesSyntax? = nil,
    diffKindComma: TokenSyntax? = nil,
    _ unexpectedBetweenDiffKindCommaAndDiffParams: UnexpectedNodesSyntax? = nil,
    diffParams: DifferentiabilityWithRespectToArgumentSyntax? = nil,
    _ unexpectedBetweenDiffParamsAndDiffParamsComma: UnexpectedNodesSyntax? = nil,
    diffParamsComma: TokenSyntax? = nil,
    _ unexpectedBetweenDiffParamsCommaAndWhereClause: UnexpectedNodesSyntax? = nil,
    whereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedAfterWhereClause: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeDiffKind,
      kindSpecifier: diffKind,
      unexpectedBetweenDiffKindAndDiffKindComma,
      kindSpecifierComma: diffKindComma,
      unexpectedBetweenDiffKindCommaAndDiffParams,
      arguments: diffParams,
      unexpectedBetweenDiffParamsAndDiffParamsComma,
      argumentsComma: diffParamsComma,
      unexpectedBetweenDiffParamsCommaAndWhereClause,
      genericWhereClause: whereClause,
      unexpectedAfterWhereClause,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DynamicReplacementAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndDeclName")
  public var unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndDeclName
    }
    set {
      unexpectedBetweenColonAndDeclName = newValue
    }
  }

  @available(*, deprecated, renamed: "declName")
  public var declname: DeclReferenceExprSyntax {
    get {
      return declName
    }
    set {
      declName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterDeclName")
  public var unexpectedAfterDeclname: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterDeclName
    }
    set {
      unexpectedAfterDeclName = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:forLabel:_:colon:_:declName:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeForLabel: UnexpectedNodesSyntax? = nil,
    forLabel: TokenSyntax = .keyword(.for),
    _ unexpectedBetweenForLabelAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? = nil,
    declname: DeclReferenceExprSyntax,
    _ unexpectedAfterDeclname: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeForLabel,
      forLabel: forLabel,
      unexpectedBetweenForLabelAndColon,
      colon: colon,
      unexpectedBetweenColonAndDeclname,
      declName: declname,
      unexpectedAfterDeclname,
      trailingTrivia: trailingTrivia
    )
  }
}

extension EditorPlaceholderDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndPlaceholder")
  public var unexpectedBetweenModifiersAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndPlaceholder
    }
    set {
      unexpectedBetweenModifiersAndPlaceholder = newValue
    }
  }

  @available(*, deprecated, renamed: "placeholder")
  public var identifier: TokenSyntax {
    get {
      return placeholder
    }
    set {
      placeholder = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterPlaceholder")
  public var unexpectedAfterIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPlaceholder
    }
    set {
      unexpectedAfterPlaceholder = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:placeholder:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedAfterIdentifier: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndIdentifier,
      placeholder: identifier,
      unexpectedAfterIdentifier,
      trailingTrivia: trailingTrivia
    )
  }
}

extension EditorPlaceholderExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforePlaceholder")
  public var unexpectedBeforeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforePlaceholder
    }
    set {
      unexpectedBeforePlaceholder = newValue
    }
  }

  @available(*, deprecated, renamed: "placeholder")
  public var identifier: TokenSyntax {
    get {
      return placeholder
    }
    set {
      placeholder = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterPlaceholder")
  public var unexpectedAfterIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPlaceholder
    }
    set {
      unexpectedAfterPlaceholder = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:placeholder:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedAfterIdentifier: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeIdentifier,
      placeholder: identifier,
      unexpectedAfterIdentifier,
      trailingTrivia: trailingTrivia
    )
  }
}

extension EnumCaseElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeName")
  public var unexpectedBeforeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeName
    }
    set {
      unexpectedBeforeName = newValue
    }
  }

  @available(*, deprecated, renamed: "name")
  public var identifier: TokenSyntax {
    get {
      return name
    }
    set {
      name = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenNameAndParameterClause")
  public var unexpectedBetweenIdentifierAndAssociatedValue: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndParameterClause
    }
    set {
      unexpectedBetweenNameAndParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "parameterClause")
  public var associatedValue: EnumCaseParameterClauseSyntax? {
    get {
      return parameterClause
    }
    set {
      parameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParameterClauseAndRawValue")
  public var unexpectedBetweenAssociatedValueAndRawValue: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParameterClauseAndRawValue
    }
    set {
      unexpectedBetweenParameterClauseAndRawValue = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:name:_:parameterClause:_:rawValue:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndAssociatedValue: UnexpectedNodesSyntax? = nil,
    associatedValue: EnumCaseParameterClauseSyntax? = nil,
    _ unexpectedBetweenAssociatedValueAndRawValue: UnexpectedNodesSyntax? = nil,
    rawValue: InitializerClauseSyntax? = nil,
    _ unexpectedBetweenRawValueAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeIdentifier,
      name: identifier,
      unexpectedBetweenIdentifierAndAssociatedValue,
      parameterClause: associatedValue,
      unexpectedBetweenAssociatedValueAndRawValue,
      rawValue: rawValue,
      unexpectedBetweenRawValueAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension EnumCaseParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndParameterList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndParameters
    }
    set {
      unexpectedBetweenLeftParenAndParameters = newValue
    }
  }

  @available(*, deprecated, renamed: "parameters")
  public var parameterList: EnumCaseParameterListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenParameterListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndRightParen
    }
    set {
      unexpectedBetweenParametersAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndParameterList: UnexpectedNodesSyntax? = nil,
    parameterList: EnumCaseParameterListSyntax,
    _ unexpectedBetweenParameterListAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndParameterList,
      parameters: parameterList,
      unexpectedBetweenParameterListAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension EnumCaseParameterSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenTypeAndDefaultValue")
  public var unexpectedBetweenTypeAndDefaultArgument: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenTypeAndDefaultValue
    }
    set {
      unexpectedBetweenTypeAndDefaultValue = newValue
    }
  }

  @available(*, deprecated, renamed: "defaultValue")
  public var defaultArgument: InitializerClauseSyntax? {
    get {
      return defaultValue
    }
    set {
      defaultValue = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenDefaultValueAndTrailingComma")
  public var unexpectedBetweenDefaultArgumentAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenDefaultValueAndTrailingComma
    }
    set {
      unexpectedBetweenDefaultValueAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:modifiers:_:firstName:_:secondName:_:colon:_:type:_:defaultValue:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndFirstName: UnexpectedNodesSyntax? = nil,
    firstName: TokenSyntax? = nil,
    _ unexpectedBetweenFirstNameAndSecondName: UnexpectedNodesSyntax? = nil,
    secondName: TokenSyntax? = nil,
    _ unexpectedBetweenSecondNameAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax? = nil,
    _ unexpectedBetweenColonAndType: UnexpectedNodesSyntax? = nil,
    type: some TypeSyntaxProtocol,
    _ unexpectedBetweenTypeAndDefaultArgument: UnexpectedNodesSyntax? = nil,
    defaultArgument: InitializerClauseSyntax? = nil,
    _ unexpectedBetweenDefaultArgumentAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndFirstName,
      firstName: firstName,
      unexpectedBetweenFirstNameAndSecondName,
      secondName: secondName,
      unexpectedBetweenSecondNameAndColon,
      colon: colon,
      unexpectedBetweenColonAndType,
      type: type,
      unexpectedBetweenTypeAndDefaultArgument,
      defaultValue: defaultArgument,
      unexpectedBetweenDefaultArgumentAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension EnumDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeEnumHeader")
  public var unexpectedBeforeAttributes: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeEnumHeader
    }
    set {
      unexpectedBeforeEnumHeader = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.attributes")
  public var attributes: AttributeListSyntax {
    get {
      return enumHeader.attributes
    }
    set {
      enumHeader.attributes = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenAttributesAndModifiers")
  public var unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenAttributesAndModifiers
    }
    set {
      enumHeader.unexpectedBetweenAttributesAndModifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.modifiers")
  public var modifiers: DeclModifierListSyntax {
    get {
      return enumHeader.modifiers
    }
    set {
      enumHeader.modifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenModifiersAndEnumKeyword")
  public var unexpectedBetweenModifiersAndEnumKeyword: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenModifiersAndEnumKeyword
    }
    set {
      enumHeader.unexpectedBetweenModifiersAndEnumKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.enumKeyword")
  public var enumKeyword: TokenSyntax {
    get {
      return enumHeader.enumKeyword
    }
    set {
      enumHeader.enumKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenEnumKeywordAndName")
  public var unexpectedBetweenEnumKeywordAndName: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenEnumKeywordAndName
    }
    set {
      enumHeader.unexpectedBetweenEnumKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.name")
  public var name: TokenSyntax {
    get {
      return enumHeader.name
    }
    set {
      enumHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenNameAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      enumHeader.unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.genericParameterClause")
  public var genericParameterClause: GenericParameterClauseSyntax? {
    get {
      return enumHeader.genericParameterClause
    }
    set {
      enumHeader.genericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause")
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause
    }
    set {
      enumHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.inheritanceClause")
  public var inheritanceClause: InheritanceClauseSyntax? {
    get {
      return enumHeader.inheritanceClause
    }
    set {
      enumHeader.inheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause")
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause
    }
    set {
      enumHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.genericWhereClause")
  public var genericWhereClause: GenericWhereClauseSyntax? {
    get {
      return enumHeader.genericWhereClause
    }
    set {
      enumHeader.genericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenEnumHeaderAndMemberBlock")
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEnumHeaderAndMemberBlock
    }
    set {
      unexpectedBetweenEnumHeaderAndMemberBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenEnumKeywordAndName")
  public var unexpectedBetweenEnumKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenEnumKeywordAndName
    }
    set {
      enumHeader.unexpectedBetweenEnumKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.name")
  public var identifier: TokenSyntax {
    get {
      return enumHeader.name
    }
    set {
      enumHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameters: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      enumHeader.unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.genericParameterClause")
  public var genericParameters: GenericParameterClauseSyntax? {
    get {
      return enumHeader.genericParameterClause
    }
    set {
      enumHeader.genericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "enumHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause")
  public var unexpectedBetweenGenericParametersAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return enumHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause
    }
    set {
      enumHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:enumHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndEnumKeyword: UnexpectedNodesSyntax? = nil,
    enumKeyword: TokenSyntax = .keyword(.enum),
    _ unexpectedBetweenEnumKeywordAndName: UnexpectedNodesSyntax? = nil,
    name: TokenSyntax,
    _ unexpectedBetweenNameAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      enumHeader: EnumDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndEnumKeyword,
        enumKeyword: enumKeyword,
        unexpectedBetweenEnumKeywordAndName,
        name: name,
        unexpectedBetweenNameAndGenericParameterClause,
        genericParameterClause: genericParameterClause,
        unexpectedBetweenGenericParameterClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:enumHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndEnumKeyword: UnexpectedNodesSyntax? = nil,
    enumKeyword: TokenSyntax = .keyword(.enum),
    _ unexpectedBetweenEnumKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameters: UnexpectedNodesSyntax? = nil,
    genericParameters: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParametersAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      enumHeader: EnumDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndEnumKeyword,
        enumKeyword: enumKeyword,
        unexpectedBetweenEnumKeywordAndIdentifier,
        name: identifier,
        unexpectedBetweenIdentifierAndGenericParameters,
        genericParameterClause: genericParameters,
        unexpectedBetweenGenericParametersAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ExpressionSegmentSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenBackslashAndPounds")
  public var unexpectedBetweenBackslashAndDelimiter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBackslashAndPounds
    }
    set {
      unexpectedBetweenBackslashAndPounds = newValue
    }
  }

  @available(*, deprecated, renamed: "pounds")
  public var delimiter: TokenSyntax? {
    get {
      return pounds
    }
    set {
      pounds = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenPoundsAndLeftParen")
  public var unexpectedBetweenDelimiterAndLeftParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPoundsAndLeftParen
    }
    set {
      unexpectedBetweenPoundsAndLeftParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:backslash:_:pounds:_:leftParen:_:expressions:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeBackslash: UnexpectedNodesSyntax? = nil,
    backslash: TokenSyntax = .backslashToken(),
    _ unexpectedBetweenBackslashAndDelimiter: UnexpectedNodesSyntax? = nil,
    delimiter: TokenSyntax? = nil,
    _ unexpectedBetweenDelimiterAndLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndExpressions: UnexpectedNodesSyntax? = nil,
    expressions: LabeledExprListSyntax,
    _ unexpectedBetweenExpressionsAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeBackslash,
      backslash: backslash,
      unexpectedBetweenBackslashAndDelimiter,
      pounds: delimiter,
      unexpectedBetweenDelimiterAndLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndExpressions,
      expressions: expressions,
      unexpectedBetweenExpressionsAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ExtensionDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeExtensionHeader")
  public var unexpectedBeforeAttributes: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeExtensionHeader
    }
    set {
      unexpectedBeforeExtensionHeader = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.attributes")
  public var attributes: AttributeListSyntax {
    get {
      return extensionHeader.attributes
    }
    set {
      extensionHeader.attributes = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.unexpectedBetweenAttributesAndModifiers")
  public var unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? {
    get {
      return extensionHeader.unexpectedBetweenAttributesAndModifiers
    }
    set {
      extensionHeader.unexpectedBetweenAttributesAndModifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.modifiers")
  public var modifiers: DeclModifierListSyntax {
    get {
      return extensionHeader.modifiers
    }
    set {
      extensionHeader.modifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.unexpectedBetweenModifiersAndExtensionKeyword")
  public var unexpectedBetweenModifiersAndExtensionKeyword: UnexpectedNodesSyntax? {
    get {
      return extensionHeader.unexpectedBetweenModifiersAndExtensionKeyword
    }
    set {
      extensionHeader.unexpectedBetweenModifiersAndExtensionKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.extensionKeyword")
  public var extensionKeyword: TokenSyntax {
    get {
      return extensionHeader.extensionKeyword
    }
    set {
      extensionHeader.extensionKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.unexpectedBetweenExtensionKeywordAndExtendedType")
  public var unexpectedBetweenExtensionKeywordAndExtendedType: UnexpectedNodesSyntax? {
    get {
      return extensionHeader.unexpectedBetweenExtensionKeywordAndExtendedType
    }
    set {
      extensionHeader.unexpectedBetweenExtensionKeywordAndExtendedType = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.extendedType")
  public var extendedType: TypeSyntax {
    get {
      return extensionHeader.extendedType
    }
    set {
      extensionHeader.extendedType = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.unexpectedBetweenExtendedTypeAndInheritanceClause")
  public var unexpectedBetweenExtendedTypeAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return extensionHeader.unexpectedBetweenExtendedTypeAndInheritanceClause
    }
    set {
      extensionHeader.unexpectedBetweenExtendedTypeAndInheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.inheritanceClause")
  public var inheritanceClause: InheritanceClauseSyntax? {
    get {
      return extensionHeader.inheritanceClause
    }
    set {
      extensionHeader.inheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause")
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return extensionHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause
    }
    set {
      extensionHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "extensionHeader.genericWhereClause")
  public var genericWhereClause: GenericWhereClauseSyntax? {
    get {
      return extensionHeader.genericWhereClause
    }
    set {
      extensionHeader.genericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenExtensionHeaderAndMemberBlock")
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenExtensionHeaderAndMemberBlock
    }
    set {
      unexpectedBetweenExtensionHeaderAndMemberBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:extensionHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndExtensionKeyword: UnexpectedNodesSyntax? = nil,
    extensionKeyword: TokenSyntax = .keyword(.extension),
    _ unexpectedBetweenExtensionKeywordAndExtendedType: UnexpectedNodesSyntax? = nil,
    extendedType: some TypeSyntaxProtocol,
    _ unexpectedBetweenExtendedTypeAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      extensionHeader: ExtensionDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndExtensionKeyword,
        extensionKeyword: extensionKeyword,
        unexpectedBetweenExtensionKeywordAndExtendedType,
        extendedType: extendedType,
        unexpectedBetweenExtendedTypeAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }
}

extension FloatLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLiteral")
  public var unexpectedBeforeFloatingDigits: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLiteral
    }
    set {
      unexpectedBeforeLiteral = newValue
    }
  }

  @available(*, deprecated, renamed: "literal")
  public var floatingDigits: TokenSyntax {
    get {
      return literal
    }
    set {
      literal = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterLiteral")
  public var unexpectedAfterFloatingDigits: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterLiteral
    }
    set {
      unexpectedAfterLiteral = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:literal:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeFloatingDigits: UnexpectedNodesSyntax? = nil,
    floatingDigits: TokenSyntax,
    _ unexpectedAfterFloatingDigits: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeFloatingDigits,
      literal: floatingDigits,
      unexpectedAfterFloatingDigits,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ForStmtSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenInKeywordAndSequence")
  public var unexpectedBetweenInKeywordAndSequenceExpr: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenInKeywordAndSequence
    }
    set {
      unexpectedBetweenInKeywordAndSequence = newValue
    }
  }

  @available(*, deprecated, renamed: "sequence")
  public var sequenceExpr: ExprSyntax {
    get {
      return sequence
    }
    set {
      sequence = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenSequenceAndWhereClause")
  public var unexpectedBetweenSequenceExprAndWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenSequenceAndWhereClause
    }
    set {
      unexpectedBetweenSequenceAndWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:forKeyword:_:tryKeyword:_:awaitKeyword:_:caseKeyword:_:pattern:_:typeAnnotation:_:inKeyword:_:sequence:_:whereClause:_:body:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeForKeyword: UnexpectedNodesSyntax? = nil,
    forKeyword: TokenSyntax = .keyword(.for),
    _ unexpectedBetweenForKeywordAndTryKeyword: UnexpectedNodesSyntax? = nil,
    tryKeyword: TokenSyntax? = nil,
    _ unexpectedBetweenTryKeywordAndAwaitKeyword: UnexpectedNodesSyntax? = nil,
    awaitKeyword: TokenSyntax? = nil,
    _ unexpectedBetweenAwaitKeywordAndCaseKeyword: UnexpectedNodesSyntax? = nil,
    caseKeyword: TokenSyntax? = nil,
    _ unexpectedBetweenCaseKeywordAndPattern: UnexpectedNodesSyntax? = nil,
    pattern: some PatternSyntaxProtocol,
    _ unexpectedBetweenPatternAndTypeAnnotation: UnexpectedNodesSyntax? = nil,
    typeAnnotation: TypeAnnotationSyntax? = nil,
    _ unexpectedBetweenTypeAnnotationAndInKeyword: UnexpectedNodesSyntax? = nil,
    inKeyword: TokenSyntax = .keyword(.in),
    _ unexpectedBetweenInKeywordAndSequenceExpr: UnexpectedNodesSyntax? = nil,
    sequenceExpr: some ExprSyntaxProtocol,
    _ unexpectedBetweenSequenceExprAndWhereClause: UnexpectedNodesSyntax? = nil,
    whereClause: WhereClauseSyntax? = nil,
    _ unexpectedBetweenWhereClauseAndBody: UnexpectedNodesSyntax? = nil,
    body: CodeBlockSyntax,
    _ unexpectedAfterBody: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeForKeyword,
      forKeyword: forKeyword,
      unexpectedBetweenForKeywordAndTryKeyword,
      tryKeyword: tryKeyword,
      unexpectedBetweenTryKeywordAndAwaitKeyword,
      awaitKeyword: awaitKeyword,
      unexpectedBetweenAwaitKeywordAndCaseKeyword,
      caseKeyword: caseKeyword,
      unexpectedBetweenCaseKeywordAndPattern,
      pattern: pattern,
      unexpectedBetweenPatternAndTypeAnnotation,
      typeAnnotation: typeAnnotation,
      unexpectedBetweenTypeAnnotationAndInKeyword,
      inKeyword: inKeyword,
      unexpectedBetweenInKeywordAndSequenceExpr,
      sequence: sequenceExpr,
      unexpectedBetweenSequenceExprAndWhereClause,
      whereClause: whereClause,
      unexpectedBetweenWhereClauseAndBody,
      body: body,
      unexpectedAfterBody,
      trailingTrivia: trailingTrivia
    )
  }
}

extension FunctionCallExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndArguments
    }
    set {
      unexpectedBetweenLeftParenAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var argumentList: LabeledExprListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightParen
    }
    set {
      unexpectedBetweenArgumentsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:calledExpression:_:leftParen:_:arguments:_:rightParen:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeCalledExpression: UnexpectedNodesSyntax? = nil,
    calledExpression: some ExprSyntaxProtocol,
    _ unexpectedBetweenCalledExpressionAndLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax? = nil,
    _ unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? = nil,
    argumentList: LabeledExprListSyntax,
    _ unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax? = nil,
    _ unexpectedBetweenRightParenAndTrailingClosure: UnexpectedNodesSyntax? = nil,
    trailingClosure: ClosureExprSyntax? = nil,
    _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
    additionalTrailingClosures: MultipleTrailingClosureElementListSyntax = [],
    _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeCalledExpression,
      calledExpression: calledExpression,
      unexpectedBetweenCalledExpressionAndLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndArgumentList,
      arguments: argumentList,
      unexpectedBetweenArgumentListAndRightParen,
      rightParen: rightParen,
      unexpectedBetweenRightParenAndTrailingClosure,
      trailingClosure: trailingClosure,
      unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures,
      additionalTrailingClosures: additionalTrailingClosures,
      unexpectedAfterAdditionalTrailingClosures,
      trailingTrivia: trailingTrivia
    )
  }
}

extension FunctionDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenFuncKeywordAndName")
  public var unexpectedBetweenFuncKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFuncKeywordAndName
    }
    set {
      unexpectedBetweenFuncKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "name")
  public var identifier: TokenSyntax {
    get {
      return name
    }
    set {
      name = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:funcKeyword:_:name:_:genericParameterClause:_:signature:_:genericWhereClause:_:body:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndFuncKeyword: UnexpectedNodesSyntax? = nil,
    funcKeyword: TokenSyntax = .keyword(.func),
    _ unexpectedBetweenFuncKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndSignature: UnexpectedNodesSyntax? = nil,
    signature: FunctionSignatureSyntax,
    _ unexpectedBetweenSignatureAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndBody: UnexpectedNodesSyntax? = nil,
    body: CodeBlockSyntax? = nil,
    _ unexpectedAfterBody: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndFuncKeyword,
      funcKeyword: funcKeyword,
      unexpectedBetweenFuncKeywordAndIdentifier,
      name: identifier,
      unexpectedBetweenIdentifierAndGenericParameterClause,
      genericParameterClause: genericParameterClause,
      unexpectedBetweenGenericParameterClauseAndSignature,
      signature: signature,
      unexpectedBetweenSignatureAndGenericWhereClause,
      genericWhereClause: genericWhereClause,
      unexpectedBetweenGenericWhereClauseAndBody,
      body: body,
      unexpectedAfterBody,
      trailingTrivia: trailingTrivia
    )
  }
}

extension FunctionParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndParameterList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndParameters
    }
    set {
      unexpectedBetweenLeftParenAndParameters = newValue
    }
  }

  @available(*, deprecated, renamed: "parameters")
  public var parameterList: FunctionParameterListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenParameterListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndRightParen
    }
    set {
      unexpectedBetweenParametersAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndParameterList: UnexpectedNodesSyntax? = nil,
    parameterList: FunctionParameterListSyntax,
    _ unexpectedBetweenParameterListAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndParameterList,
      parameters: parameterList,
      unexpectedBetweenParameterListAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension FunctionParameterSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEllipsisAndDefaultValue")
  public var unexpectedBetweenEllipsisAndDefaultArgument: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEllipsisAndDefaultValue
    }
    set {
      unexpectedBetweenEllipsisAndDefaultValue = newValue
    }
  }

  @available(*, deprecated, renamed: "defaultValue")
  public var defaultArgument: InitializerClauseSyntax? {
    get {
      return defaultValue
    }
    set {
      defaultValue = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenDefaultValueAndTrailingComma")
  public var unexpectedBetweenDefaultArgumentAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenDefaultValueAndTrailingComma
    }
    set {
      unexpectedBetweenDefaultValueAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:firstName:_:secondName:_:colon:_:type:_:ellipsis:_:defaultValue:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndFirstName: UnexpectedNodesSyntax? = nil,
    firstName: TokenSyntax,
    _ unexpectedBetweenFirstNameAndSecondName: UnexpectedNodesSyntax? = nil,
    secondName: TokenSyntax? = nil,
    _ unexpectedBetweenSecondNameAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndType: UnexpectedNodesSyntax? = nil,
    type: some TypeSyntaxProtocol,
    _ unexpectedBetweenTypeAndEllipsis: UnexpectedNodesSyntax? = nil,
    ellipsis: TokenSyntax? = nil,
    _ unexpectedBetweenEllipsisAndDefaultArgument: UnexpectedNodesSyntax? = nil,
    defaultArgument: InitializerClauseSyntax? = nil,
    _ unexpectedBetweenDefaultArgumentAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndFirstName,
      firstName: firstName,
      unexpectedBetweenFirstNameAndSecondName,
      secondName: secondName,
      unexpectedBetweenSecondNameAndColon,
      colon: colon,
      unexpectedBetweenColonAndType,
      type: type,
      unexpectedBetweenTypeAndEllipsis,
      ellipsis: ellipsis,
      unexpectedBetweenEllipsisAndDefaultArgument,
      defaultValue: defaultArgument,
      unexpectedBetweenDefaultArgumentAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension FunctionSignatureSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeParameterClause")
  public var unexpectedBeforeInput: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeParameterClause
    }
    set {
      unexpectedBeforeParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "parameterClause")
  public var input: FunctionParameterClauseSyntax {
    get {
      return parameterClause
    }
    set {
      parameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParameterClauseAndEffectSpecifiers")
  public var unexpectedBetweenInputAndEffectSpecifiers: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParameterClauseAndEffectSpecifiers
    }
    set {
      unexpectedBetweenParameterClauseAndEffectSpecifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndReturnClause")
  public var unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEffectSpecifiersAndReturnClause
    }
    set {
      unexpectedBetweenEffectSpecifiersAndReturnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "returnClause")
  public var output: ReturnClauseSyntax? {
    get {
      return returnClause
    }
    set {
      returnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterReturnClause")
  public var unexpectedAfterOutput: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterReturnClause
    }
    set {
      unexpectedAfterReturnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:parameterClause:_:effectSpecifiers:_:returnClause:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeInput: UnexpectedNodesSyntax? = nil,
    input: FunctionParameterClauseSyntax,
    _ unexpectedBetweenInputAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
    effectSpecifiers: FunctionEffectSpecifiersSyntax? = nil,
    _ unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? = nil,
    output: ReturnClauseSyntax? = nil,
    _ unexpectedAfterOutput: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeInput,
      parameterClause: input,
      unexpectedBetweenInputAndEffectSpecifiers,
      effectSpecifiers: effectSpecifiers,
      unexpectedBetweenEffectSpecifiersAndOutput,
      returnClause: output,
      unexpectedAfterOutput,
      trailingTrivia: trailingTrivia
    )
  }
}

extension FunctionTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndParameters
    }
    set {
      unexpectedBetweenLeftParenAndParameters = newValue
    }
  }

  @available(*, deprecated, renamed: "parameters")
  public var arguments: TupleTypeElementListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }

  @available(*, deprecated, renamed: "addParameter")
  public func addArgument(_ element: TupleTypeElementSyntax) -> Self {
    return addParameter(element)
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenArgumentsAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndRightParen
    }
    set {
      unexpectedBetweenParametersAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndReturnClause")
  public var unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEffectSpecifiersAndReturnClause
    }
    set {
      unexpectedBetweenEffectSpecifiersAndReturnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "returnClause")
  public var output: ReturnClauseSyntax {
    get {
      return returnClause
    }
    set {
      returnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterReturnClause")
  public var unexpectedAfterOutput: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterReturnClause
    }
    set {
      unexpectedAfterReturnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:effectSpecifiers:_:returnClause:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndArguments: UnexpectedNodesSyntax? = nil,
    arguments: TupleTypeElementListSyntax,
    _ unexpectedBetweenArgumentsAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedBetweenRightParenAndEffectSpecifiers: UnexpectedNodesSyntax? = nil,
    effectSpecifiers: TypeEffectSpecifiersSyntax? = nil,
    _ unexpectedBetweenEffectSpecifiersAndOutput: UnexpectedNodesSyntax? = nil,
    output: ReturnClauseSyntax,
    _ unexpectedAfterOutput: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndArguments,
      parameters: arguments,
      unexpectedBetweenArgumentsAndRightParen,
      rightParen: rightParen,
      unexpectedBetweenRightParenAndEffectSpecifiers,
      effectSpecifiers: effectSpecifiers,
      unexpectedBetweenEffectSpecifiersAndOutput,
      returnClause: output,
      unexpectedAfterOutput,
      trailingTrivia: trailingTrivia
    )
  }
}

extension GenericArgumentClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftAngle
    }
    set {
      unexpectedBeforeLeftAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: TokenSyntax {
    get {
      return leftAngle
    }
    set {
      leftAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndArguments")
  public var unexpectedBetweenLeftAngleBracketAndArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftAngleAndArguments
    }
    set {
      unexpectedBetweenLeftAngleAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightAngle")
  public var unexpectedBetweenArgumentsAndRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightAngle
    }
    set {
      unexpectedBetweenArgumentsAndRightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: TokenSyntax {
    get {
      return rightAngle
    }
    set {
      rightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightAngle
    }
    set {
      unexpectedAfterRightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftAngle:_:arguments:_:rightAngle:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? = nil,
    leftAngleBracket: TokenSyntax = .leftAngleToken(),
    _ unexpectedBetweenLeftAngleBracketAndArguments: UnexpectedNodesSyntax? = nil,
    arguments: GenericArgumentListSyntax,
    _ unexpectedBetweenArgumentsAndRightAngleBracket: UnexpectedNodesSyntax? = nil,
    rightAngleBracket: TokenSyntax = .rightAngleToken(),
    _ unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftAngleBracket,
      leftAngle: leftAngleBracket,
      unexpectedBetweenLeftAngleBracketAndArguments,
      arguments: arguments,
      unexpectedBetweenArgumentsAndRightAngleBracket,
      rightAngle: rightAngleBracket,
      unexpectedAfterRightAngleBracket,
      trailingTrivia: trailingTrivia
    )
  }
}

extension GenericArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeArgument")
  public var unexpectedBeforeArgumentType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeArgument
    }
    set {
      unexpectedBeforeArgument = newValue
    }
  }

  @available(*, deprecated, renamed: "argument")
  public var argumentType: TypeSyntax {
    get {
      return argument
    }
    set {
      argument = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentAndTrailingComma")
  public var unexpectedBetweenArgumentTypeAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentAndTrailingComma
    }
    set {
      unexpectedBetweenArgumentAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:argument:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeArgumentType: UnexpectedNodesSyntax? = nil,
    argumentType: some TypeSyntaxProtocol,
    _ unexpectedBetweenArgumentTypeAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeArgumentType,
      argument: argumentType,
      unexpectedBetweenArgumentTypeAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension GenericParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftAngle
    }
    set {
      unexpectedBeforeLeftAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: TokenSyntax {
    get {
      return leftAngle
    }
    set {
      leftAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndParameters")
  public var unexpectedBetweenLeftAngleBracketAndGenericParameterList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftAngleAndParameters
    }
    set {
      unexpectedBetweenLeftAngleAndParameters = newValue
    }
  }

  @available(*, deprecated, renamed: "parameters")
  public var genericParameterList: GenericParameterListSyntax {
    get {
      return parameters
    }
    set {
      parameters = newValue
    }
  }

  @available(*, deprecated, renamed: "addParameter")
  public func addGenericParameter(_ element: GenericParameterSyntax) -> Self {
    return addParameter(element)
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndGenericWhereClause")
  public var unexpectedBetweenGenericParameterListAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParametersAndGenericWhereClause
    }
    set {
      unexpectedBetweenParametersAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenGenericWhereClauseAndRightAngle")
  public var unexpectedBetweenGenericWhereClauseAndRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericWhereClauseAndRightAngle
    }
    set {
      unexpectedBetweenGenericWhereClauseAndRightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: TokenSyntax {
    get {
      return rightAngle
    }
    set {
      rightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightAngle
    }
    set {
      unexpectedAfterRightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftAngle:_:parameters:_:genericWhereClause:_:rightAngle:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? = nil,
    leftAngleBracket: TokenSyntax = .leftAngleToken(),
    _ unexpectedBetweenLeftAngleBracketAndGenericParameterList: UnexpectedNodesSyntax? = nil,
    genericParameterList: GenericParameterListSyntax,
    _ unexpectedBetweenGenericParameterListAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndRightAngleBracket: UnexpectedNodesSyntax? = nil,
    rightAngleBracket: TokenSyntax = .rightAngleToken(),
    _ unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftAngleBracket,
      leftAngle: leftAngleBracket,
      unexpectedBetweenLeftAngleBracketAndGenericParameterList,
      parameters: genericParameterList,
      unexpectedBetweenGenericParameterListAndGenericWhereClause,
      genericWhereClause: genericWhereClause,
      unexpectedBetweenGenericWhereClauseAndRightAngleBracket,
      rightAngle: rightAngleBracket,
      unexpectedAfterRightAngleBracket,
      trailingTrivia: trailingTrivia
    )
  }
}

extension GenericParameterSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenAttributesAndSpecifier")
  public var unexpectedBetweenAttributesAndEachKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAttributesAndSpecifier
    }
    set {
      unexpectedBetweenAttributesAndSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "specifier")
  public var eachKeyword: TokenSyntax? {
    get {
      return specifier
    }
    set {
      specifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenSpecifierAndName")
  public var unexpectedBetweenEachKeywordAndName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenSpecifierAndName
    }
    set {
      unexpectedBetweenSpecifierAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:specifier:_:name:_:colon:_:inheritedType:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndEachKeyword: UnexpectedNodesSyntax? = nil,
    eachKeyword: TokenSyntax? = nil,
    _ unexpectedBetweenEachKeywordAndName: UnexpectedNodesSyntax? = nil,
    name: TokenSyntax,
    _ unexpectedBetweenNameAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax? = nil,
    _ unexpectedBetweenColonAndInheritedType: UnexpectedNodesSyntax? = nil,
    inheritedType: (some TypeSyntaxProtocol)? = TypeSyntax?.none,
    _ unexpectedBetweenInheritedTypeAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndEachKeyword,
      specifier: eachKeyword,
      unexpectedBetweenEachKeywordAndName,
      name: name,
      unexpectedBetweenNameAndColon,
      colon: colon,
      unexpectedBetweenColonAndInheritedType,
      inheritedType: inheritedType,
      unexpectedBetweenInheritedTypeAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension GenericRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeRequirement")
  public var unexpectedBeforeBody: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeRequirement
    }
    set {
      unexpectedBeforeRequirement = newValue
    }
  }

  @available(*, deprecated, renamed: "requirement")
  public var body: Requirement {
    get {
      return requirement
    }
    set {
      requirement = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenRequirementAndTrailingComma")
  public var unexpectedBetweenBodyAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRequirementAndTrailingComma
    }
    set {
      unexpectedBetweenRequirementAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:requirement:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeBody: UnexpectedNodesSyntax? = nil,
    body: Requirement,
    _ unexpectedBetweenBodyAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeBody,
      requirement: body,
      unexpectedBetweenBodyAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension GenericWhereClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenWhereKeywordAndRequirements")
  public var unexpectedBetweenWhereKeywordAndRequirementList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenWhereKeywordAndRequirements
    }
    set {
      unexpectedBetweenWhereKeywordAndRequirements = newValue
    }
  }

  @available(*, deprecated, renamed: "requirements")
  public var requirementList: GenericRequirementListSyntax {
    get {
      return requirements
    }
    set {
      requirements = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRequirements")
  public var unexpectedAfterRequirementList: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRequirements
    }
    set {
      unexpectedAfterRequirements = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:whereKeyword:_:requirements:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeWhereKeyword: UnexpectedNodesSyntax? = nil,
    whereKeyword: TokenSyntax = .keyword(.where),
    _ unexpectedBetweenWhereKeywordAndRequirementList: UnexpectedNodesSyntax? = nil,
    requirementList: GenericRequirementListSyntax,
    _ unexpectedAfterRequirementList: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeWhereKeyword,
      whereKeyword: whereKeyword,
      unexpectedBetweenWhereKeywordAndRequirementList,
      requirements: requirementList,
      unexpectedAfterRequirementList,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ImplementsAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndDeclName")
  public var unexpectedBetweenCommaAndDeclname: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCommaAndDeclName
    }
    set {
      unexpectedBetweenCommaAndDeclName = newValue
    }
  }

  @available(*, deprecated, renamed: "declName")
  public var declname: DeclReferenceExprSyntax {
    get {
      return declName
    }
    set {
      declName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterDeclName")
  public var unexpectedAfterDeclname: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterDeclName
    }
    set {
      unexpectedAfterDeclName = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:type:_:comma:_:declName:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeType: UnexpectedNodesSyntax? = nil,
    type: some TypeSyntaxProtocol,
    _ unexpectedBetweenTypeAndComma: UnexpectedNodesSyntax? = nil,
    comma: TokenSyntax = .commaToken(),
    _ unexpectedBetweenCommaAndDeclname: UnexpectedNodesSyntax? = nil,
    declname: DeclReferenceExprSyntax,
    _ unexpectedAfterDeclname: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeType,
      type: type,
      unexpectedBetweenTypeAndComma,
      comma: comma,
      unexpectedBetweenCommaAndDeclname,
      declName: declname,
      unexpectedAfterDeclname,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ImportDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndImportKeyword")
  public var unexpectedBetweenModifiersAndImportTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndImportKeyword
    }
    set {
      unexpectedBetweenModifiersAndImportKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "importKeyword")
  public var importTok: TokenSyntax {
    get {
      return importKeyword
    }
    set {
      importKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenImportKeywordAndImportKindSpecifier")
  public var unexpectedBetweenImportTokAndImportKind: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenImportKeywordAndImportKindSpecifier
    }
    set {
      unexpectedBetweenImportKeywordAndImportKindSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "importKindSpecifier")
  public var importKind: TokenSyntax? {
    get {
      return importKindSpecifier
    }
    set {
      importKindSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenImportKindSpecifierAndPath")
  public var unexpectedBetweenImportKindAndPath: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenImportKindSpecifierAndPath
    }
    set {
      unexpectedBetweenImportKindSpecifierAndPath = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:importKeyword:_:importKindSpecifier:_:path:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndImportTok: UnexpectedNodesSyntax? = nil,
    importTok: TokenSyntax = .keyword(.import),
    _ unexpectedBetweenImportTokAndImportKind: UnexpectedNodesSyntax? = nil,
    importKind: TokenSyntax? = nil,
    _ unexpectedBetweenImportKindAndPath: UnexpectedNodesSyntax? = nil,
    path: ImportPathComponentListSyntax,
    _ unexpectedAfterPath: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndImportTok,
      importKeyword: importTok,
      unexpectedBetweenImportTokAndImportKind,
      importKindSpecifier: importKind,
      unexpectedBetweenImportKindAndPath,
      path: path,
      unexpectedAfterPath,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ImportPathComponentSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndTrailingPeriod")
  public var unexpectedBetweenNameAndTrailingDot: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndTrailingPeriod
    }
    set {
      unexpectedBetweenNameAndTrailingPeriod = newValue
    }
  }

  @available(*, deprecated, renamed: "trailingPeriod")
  public var trailingDot: TokenSyntax? {
    get {
      return trailingPeriod
    }
    set {
      trailingPeriod = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterTrailingPeriod")
  public var unexpectedAfterTrailingDot: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterTrailingPeriod
    }
    set {
      unexpectedAfterTrailingPeriod = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:name:_:trailingPeriod:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeName: UnexpectedNodesSyntax? = nil,
    name: TokenSyntax,
    _ unexpectedBetweenNameAndTrailingDot: UnexpectedNodesSyntax? = nil,
    trailingDot: TokenSyntax? = nil,
    _ unexpectedAfterTrailingDot: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeName,
      name: name,
      unexpectedBetweenNameAndTrailingDot,
      trailingPeriod: trailingDot,
      unexpectedAfterTrailingDot,
      trailingTrivia: trailingTrivia
    )
  }
}

extension InfixOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftOperandAndOperator")
  public var unexpectedBetweenLeftOperandAndOperatorOperand: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftOperandAndOperator
    }
    set {
      unexpectedBetweenLeftOperandAndOperator = newValue
    }
  }

  @available(*, deprecated, renamed: "operator")
  public var operatorOperand: ExprSyntax {
    get {
      return `operator`
    }
    set {
      `operator` = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenOperatorAndRightOperand")
  public var unexpectedBetweenOperatorOperandAndRightOperand: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOperatorAndRightOperand
    }
    set {
      unexpectedBetweenOperatorAndRightOperand = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftOperand:_:operator:_:rightOperand:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftOperand: UnexpectedNodesSyntax? = nil,
    leftOperand: some ExprSyntaxProtocol,
    _ unexpectedBetweenLeftOperandAndOperatorOperand: UnexpectedNodesSyntax? = nil,
    operatorOperand: some ExprSyntaxProtocol,
    _ unexpectedBetweenOperatorOperandAndRightOperand: UnexpectedNodesSyntax? = nil,
    rightOperand: some ExprSyntaxProtocol,
    _ unexpectedAfterRightOperand: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftOperand,
      leftOperand: leftOperand,
      unexpectedBetweenLeftOperandAndOperatorOperand,
      operator: operatorOperand,
      unexpectedBetweenOperatorOperandAndRightOperand,
      rightOperand: rightOperand,
      unexpectedAfterRightOperand,
      trailingTrivia: trailingTrivia
    )
  }
}

extension InheritanceClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndInheritedTypes")
  public var unexpectedBetweenColonAndInheritedTypeCollection: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndInheritedTypes
    }
    set {
      unexpectedBetweenColonAndInheritedTypes = newValue
    }
  }

  @available(*, deprecated, renamed: "inheritedTypes")
  public var inheritedTypeCollection: InheritedTypeListSyntax {
    get {
      return inheritedTypes
    }
    set {
      inheritedTypes = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterInheritedTypes")
  public var unexpectedAfterInheritedTypeCollection: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterInheritedTypes
    }
    set {
      unexpectedAfterInheritedTypes = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:colon:_:inheritedTypes:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndInheritedTypeCollection: UnexpectedNodesSyntax? = nil,
    inheritedTypeCollection: InheritedTypeListSyntax,
    _ unexpectedAfterInheritedTypeCollection: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeColon,
      colon: colon,
      unexpectedBetweenColonAndInheritedTypeCollection,
      inheritedTypes: inheritedTypeCollection,
      unexpectedAfterInheritedTypeCollection,
      trailingTrivia: trailingTrivia
    )
  }
}

extension InheritedTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeType")
  public var unexpectedBeforeTypeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeType
    }
    set {
      unexpectedBeforeType = newValue
    }
  }

  @available(*, deprecated, renamed: "type")
  public var typeName: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenTypeAndTrailingComma")
  public var unexpectedBetweenTypeNameAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenTypeAndTrailingComma
    }
    set {
      unexpectedBetweenTypeAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:type:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeTypeName: UnexpectedNodesSyntax? = nil,
    typeName: some TypeSyntaxProtocol,
    _ unexpectedBetweenTypeNameAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeTypeName,
      type: typeName,
      unexpectedBetweenTypeNameAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension IntegerLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLiteral")
  public var unexpectedBeforeDigits: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLiteral
    }
    set {
      unexpectedBeforeLiteral = newValue
    }
  }

  @available(*, deprecated, renamed: "literal")
  public var digits: TokenSyntax {
    get {
      return literal
    }
    set {
      literal = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterLiteral")
  public var unexpectedAfterDigits: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterLiteral
    }
    set {
      unexpectedAfterLiteral = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:literal:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeDigits: UnexpectedNodesSyntax? = nil,
    digits: TokenSyntax,
    _ unexpectedAfterDigits: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeDigits,
      literal: digits,
      unexpectedAfterDigits,
      trailingTrivia: trailingTrivia
    )
  }
}

extension IsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndIsKeyword")
  public var unexpectedBetweenExpressionAndIsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenExpressionAndIsKeyword
    }
    set {
      unexpectedBetweenExpressionAndIsKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "isKeyword")
  public var isTok: TokenSyntax {
    get {
      return isKeyword
    }
    set {
      isKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenIsKeywordAndType")
  public var unexpectedBetweenIsTokAndTypeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenIsKeywordAndType
    }
    set {
      unexpectedBetweenIsKeywordAndType = newValue
    }
  }

  @available(*, deprecated, renamed: "type")
  public var typeName: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterTypeName: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterType
    }
    set {
      unexpectedAfterType = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:expression:_:isKeyword:_:type:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeExpression: UnexpectedNodesSyntax? = nil,
    expression: some ExprSyntaxProtocol,
    _ unexpectedBetweenExpressionAndIsTok: UnexpectedNodesSyntax? = nil,
    isTok: TokenSyntax = .keyword(.is),
    _ unexpectedBetweenIsTokAndTypeName: UnexpectedNodesSyntax? = nil,
    typeName: some TypeSyntaxProtocol,
    _ unexpectedAfterTypeName: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeExpression,
      expression: expression,
      unexpectedBetweenExpressionAndIsTok,
      isKeyword: isTok,
      unexpectedBetweenIsTokAndTypeName,
      type: typeName,
      unexpectedAfterTypeName,
      trailingTrivia: trailingTrivia
    )
  }
}

extension KeyPathSubscriptComponentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftSquare
    }
    set {
      unexpectedBeforeLeftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "leftSquare")
  public var leftBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndArguments")
  public var unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndArguments
    }
    set {
      unexpectedBetweenLeftSquareAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var argumentList: LabeledExprListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightSquare")
  public var unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightSquare
    }
    set {
      unexpectedBetweenArgumentsAndRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "rightSquare")
  public var rightBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightSquare
    }
    set {
      unexpectedAfterRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftSquare:_:arguments:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftBracket: UnexpectedNodesSyntax? = nil,
    leftBracket: TokenSyntax = .leftSquareToken(),
    _ unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? = nil,
    argumentList: LabeledExprListSyntax,
    _ unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? = nil,
    rightBracket: TokenSyntax = .rightSquareToken(),
    _ unexpectedAfterRightBracket: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftBracket,
      leftSquare: leftBracket,
      unexpectedBetweenLeftBracketAndArgumentList,
      arguments: argumentList,
      unexpectedBetweenArgumentListAndRightBracket,
      rightSquare: rightBracket,
      unexpectedAfterRightBracket,
      trailingTrivia: trailingTrivia
    )
  }
}

extension LabeledStmtSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLabel")
  public var unexpectedBeforeLabelName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLabel
    }
    set {
      unexpectedBeforeLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "label")
  public var labelName: TokenSyntax {
    get {
      return label
    }
    set {
      label = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLabelAndColon")
  public var unexpectedBetweenLabelNameAndLabelColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLabelAndColon
    }
    set {
      unexpectedBetweenLabelAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "colon")
  public var labelColon: TokenSyntax {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndStatement")
  public var unexpectedBetweenLabelColonAndStatement: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndStatement
    }
    set {
      unexpectedBetweenColonAndStatement = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:label:_:colon:_:statement:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLabelName: UnexpectedNodesSyntax? = nil,
    labelName: TokenSyntax,
    _ unexpectedBetweenLabelNameAndLabelColon: UnexpectedNodesSyntax? = nil,
    labelColon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenLabelColonAndStatement: UnexpectedNodesSyntax? = nil,
    statement: some StmtSyntaxProtocol,
    _ unexpectedAfterStatement: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLabelName,
      label: labelName,
      unexpectedBetweenLabelNameAndLabelColon,
      colon: labelColon,
      unexpectedBetweenLabelColonAndStatement,
      statement: statement,
      unexpectedAfterStatement,
      trailingTrivia: trailingTrivia
    )
  }
}

extension LayoutRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeType")
  public var unexpectedBeforeTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeType
    }
    set {
      unexpectedBeforeType = newValue
    }
  }

  @available(*, deprecated, renamed: "type")
  public var typeIdentifier: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenTypeAndColon")
  public var unexpectedBetweenTypeIdentifierAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenTypeAndColon
    }
    set {
      unexpectedBetweenTypeAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndLayoutSpecifier")
  public var unexpectedBetweenColonAndLayoutConstraint: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndLayoutSpecifier
    }
    set {
      unexpectedBetweenColonAndLayoutSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "layoutSpecifier")
  public var layoutConstraint: TokenSyntax {
    get {
      return layoutSpecifier
    }
    set {
      layoutSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLayoutSpecifierAndLeftParen")
  public var unexpectedBetweenLayoutConstraintAndLeftParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLayoutSpecifierAndLeftParen
    }
    set {
      unexpectedBetweenLayoutSpecifierAndLeftParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:type:_:colon:_:layoutSpecifier:_:leftParen:_:size:_:comma:_:alignment:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeTypeIdentifier: UnexpectedNodesSyntax? = nil,
    typeIdentifier: some TypeSyntaxProtocol,
    _ unexpectedBetweenTypeIdentifierAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndLayoutConstraint: UnexpectedNodesSyntax? = nil,
    layoutConstraint: TokenSyntax,
    _ unexpectedBetweenLayoutConstraintAndLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax? = nil,
    _ unexpectedBetweenLeftParenAndSize: UnexpectedNodesSyntax? = nil,
    size: TokenSyntax? = nil,
    _ unexpectedBetweenSizeAndComma: UnexpectedNodesSyntax? = nil,
    comma: TokenSyntax? = nil,
    _ unexpectedBetweenCommaAndAlignment: UnexpectedNodesSyntax? = nil,
    alignment: TokenSyntax? = nil,
    _ unexpectedBetweenAlignmentAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax? = nil,
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeTypeIdentifier,
      type: typeIdentifier,
      unexpectedBetweenTypeIdentifierAndColon,
      colon: colon,
      unexpectedBetweenColonAndLayoutConstraint,
      layoutSpecifier: layoutConstraint,
      unexpectedBetweenLayoutConstraintAndLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndSize,
      size: size,
      unexpectedBetweenSizeAndComma,
      comma: comma,
      unexpectedBetweenCommaAndAlignment,
      alignment: alignment,
      unexpectedBetweenAlignmentAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension MacroDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenMacroKeywordAndName")
  public var unexpectedBetweenMacroKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenMacroKeywordAndName
    }
    set {
      unexpectedBetweenMacroKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "name")
  public var identifier: TokenSyntax {
    get {
      return name
    }
    set {
      name = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:macroKeyword:_:name:_:genericParameterClause:_:signature:_:definition:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndMacroKeyword: UnexpectedNodesSyntax? = nil,
    macroKeyword: TokenSyntax = .keyword(.macro),
    _ unexpectedBetweenMacroKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndSignature: UnexpectedNodesSyntax? = nil,
    signature: FunctionSignatureSyntax,
    _ unexpectedBetweenSignatureAndDefinition: UnexpectedNodesSyntax? = nil,
    definition: InitializerClauseSyntax? = nil,
    _ unexpectedBetweenDefinitionAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedAfterGenericWhereClause: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndMacroKeyword,
      macroKeyword: macroKeyword,
      unexpectedBetweenMacroKeywordAndIdentifier,
      name: identifier,
      unexpectedBetweenIdentifierAndGenericParameterClause,
      genericParameterClause: genericParameterClause,
      unexpectedBetweenGenericParameterClauseAndSignature,
      signature: signature,
      unexpectedBetweenSignatureAndDefinition,
      definition: definition,
      unexpectedBetweenDefinitionAndGenericWhereClause,
      genericWhereClause: genericWhereClause,
      unexpectedAfterGenericWhereClause,
      trailingTrivia: trailingTrivia
    )
  }
}

extension MacroExpansionDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndPound")
  public var unexpectedBetweenModifiersAndPoundToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndPound
    }
    set {
      unexpectedBetweenModifiersAndPound = newValue
    }
  }

  @available(*, deprecated, renamed: "pound")
  public var poundToken: TokenSyntax {
    get {
      return pound
    }
    set {
      pound = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenPoundAndMacroName")
  public var unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPoundAndMacroName
    }
    set {
      unexpectedBetweenPoundAndMacroName = newValue
    }
  }

  @available(*, deprecated, renamed: "macroName")
  public var macro: TokenSyntax {
    get {
      return macroName
    }
    set {
      macroName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenMacroNameAndGenericArgumentClause")
  public var unexpectedBetweenMacroAndGenericArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenMacroNameAndGenericArgumentClause
    }
    set {
      unexpectedBetweenMacroNameAndGenericArgumentClause = newValue
    }
  }

  @available(*, deprecated, renamed: "genericArgumentClause")
  public var genericArguments: GenericArgumentClauseSyntax? {
    get {
      return genericArgumentClause
    }
    set {
      genericArgumentClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenGenericArgumentClauseAndLeftParen")
  public var unexpectedBetweenGenericArgumentsAndLeftParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericArgumentClauseAndLeftParen
    }
    set {
      unexpectedBetweenGenericArgumentClauseAndLeftParen = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndArguments
    }
    set {
      unexpectedBetweenLeftParenAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var argumentList: LabeledExprListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightParen
    }
    set {
      unexpectedBetweenArgumentsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:pound:_:macroName:_:genericArgumentClause:_:leftParen:_:arguments:_:rightParen:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndPoundToken: UnexpectedNodesSyntax? = nil,
    poundToken: TokenSyntax = .poundToken(),
    _ unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? = nil,
    macro: TokenSyntax,
    _ unexpectedBetweenMacroAndGenericArguments: UnexpectedNodesSyntax? = nil,
    genericArguments: GenericArgumentClauseSyntax? = nil,
    _ unexpectedBetweenGenericArgumentsAndLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax? = nil,
    _ unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? = nil,
    argumentList: LabeledExprListSyntax,
    _ unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax? = nil,
    _ unexpectedBetweenRightParenAndTrailingClosure: UnexpectedNodesSyntax? = nil,
    trailingClosure: ClosureExprSyntax? = nil,
    _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
    additionalTrailingClosures: MultipleTrailingClosureElementListSyntax = [],
    _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndPoundToken,
      pound: poundToken,
      unexpectedBetweenPoundTokenAndMacro,
      macroName: macro,
      unexpectedBetweenMacroAndGenericArguments,
      genericArgumentClause: genericArguments,
      unexpectedBetweenGenericArgumentsAndLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndArgumentList,
      arguments: argumentList,
      unexpectedBetweenArgumentListAndRightParen,
      rightParen: rightParen,
      unexpectedBetweenRightParenAndTrailingClosure,
      trailingClosure: trailingClosure,
      unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures,
      additionalTrailingClosures: additionalTrailingClosures,
      unexpectedAfterAdditionalTrailingClosures,
      trailingTrivia: trailingTrivia
    )
  }
}

extension MacroExpansionExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforePound")
  public var unexpectedBeforePoundToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforePound
    }
    set {
      unexpectedBeforePound = newValue
    }
  }

  @available(*, deprecated, renamed: "pound")
  public var poundToken: TokenSyntax {
    get {
      return pound
    }
    set {
      pound = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenPoundAndMacroName")
  public var unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPoundAndMacroName
    }
    set {
      unexpectedBetweenPoundAndMacroName = newValue
    }
  }

  @available(*, deprecated, renamed: "macroName")
  public var macro: TokenSyntax {
    get {
      return macroName
    }
    set {
      macroName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenMacroNameAndGenericArgumentClause")
  public var unexpectedBetweenMacroAndGenericArguments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenMacroNameAndGenericArgumentClause
    }
    set {
      unexpectedBetweenMacroNameAndGenericArgumentClause = newValue
    }
  }

  @available(*, deprecated, renamed: "genericArgumentClause")
  public var genericArguments: GenericArgumentClauseSyntax? {
    get {
      return genericArgumentClause
    }
    set {
      genericArgumentClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenGenericArgumentClauseAndLeftParen")
  public var unexpectedBetweenGenericArgumentsAndLeftParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericArgumentClauseAndLeftParen
    }
    set {
      unexpectedBetweenGenericArgumentClauseAndLeftParen = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndArguments
    }
    set {
      unexpectedBetweenLeftParenAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var argumentList: LabeledExprListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightParen
    }
    set {
      unexpectedBetweenArgumentsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:pound:_:macroName:_:genericArgumentClause:_:leftParen:_:arguments:_:rightParen:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforePoundToken: UnexpectedNodesSyntax? = nil,
    poundToken: TokenSyntax = .poundToken(),
    _ unexpectedBetweenPoundTokenAndMacro: UnexpectedNodesSyntax? = nil,
    macro: TokenSyntax,
    _ unexpectedBetweenMacroAndGenericArguments: UnexpectedNodesSyntax? = nil,
    genericArguments: GenericArgumentClauseSyntax? = nil,
    _ unexpectedBetweenGenericArgumentsAndLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax? = nil,
    _ unexpectedBetweenLeftParenAndArgumentList: UnexpectedNodesSyntax? = nil,
    argumentList: LabeledExprListSyntax,
    _ unexpectedBetweenArgumentListAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax? = nil,
    _ unexpectedBetweenRightParenAndTrailingClosure: UnexpectedNodesSyntax? = nil,
    trailingClosure: ClosureExprSyntax? = nil,
    _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
    additionalTrailingClosures: MultipleTrailingClosureElementListSyntax = [],
    _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforePoundToken,
      pound: poundToken,
      unexpectedBetweenPoundTokenAndMacro,
      macroName: macro,
      unexpectedBetweenMacroAndGenericArguments,
      genericArgumentClause: genericArguments,
      unexpectedBetweenGenericArgumentsAndLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndArgumentList,
      arguments: argumentList,
      unexpectedBetweenArgumentListAndRightParen,
      rightParen: rightParen,
      unexpectedBetweenRightParenAndTrailingClosure,
      trailingClosure: trailingClosure,
      unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures,
      additionalTrailingClosures: additionalTrailingClosures,
      unexpectedAfterAdditionalTrailingClosures,
      trailingTrivia: trailingTrivia
    )
  }
}

extension MemberAccessExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenBaseAndPeriod")
  public var unexpectedBetweenBaseAndDot: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBaseAndPeriod
    }
    set {
      unexpectedBetweenBaseAndPeriod = newValue
    }
  }

  @available(*, deprecated, renamed: "period")
  public var dot: TokenSyntax {
    get {
      return period
    }
    set {
      period = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndDeclName")
  public var unexpectedBetweenDotAndDeclName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPeriodAndDeclName
    }
    set {
      unexpectedBetweenPeriodAndDeclName = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:base:_:period:_:declName:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeBase: UnexpectedNodesSyntax? = nil,
    base: (some ExprSyntaxProtocol)? = ExprSyntax?.none,
    _ unexpectedBetweenBaseAndDot: UnexpectedNodesSyntax? = nil,
    dot: TokenSyntax = .periodToken(),
    _ unexpectedBetweenDotAndDeclName: UnexpectedNodesSyntax? = nil,
    declName: DeclReferenceExprSyntax,
    _ unexpectedAfterDeclName: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeBase,
      base: base,
      unexpectedBetweenBaseAndDot,
      period: dot,
      unexpectedBetweenDotAndDeclName,
      declName: declName,
      unexpectedAfterDeclName,
      trailingTrivia: trailingTrivia
    )
  }
}

extension MetatypeTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndMetatypeSpecifier")
  public var unexpectedBetweenPeriodAndTypeOrProtocol: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPeriodAndMetatypeSpecifier
    }
    set {
      unexpectedBetweenPeriodAndMetatypeSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "metatypeSpecifier")
  public var typeOrProtocol: TokenSyntax {
    get {
      return metatypeSpecifier
    }
    set {
      metatypeSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterMetatypeSpecifier")
  public var unexpectedAfterTypeOrProtocol: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterMetatypeSpecifier
    }
    set {
      unexpectedAfterMetatypeSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:baseType:_:period:_:metatypeSpecifier:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeBaseType: UnexpectedNodesSyntax? = nil,
    baseType: some TypeSyntaxProtocol,
    _ unexpectedBetweenBaseTypeAndPeriod: UnexpectedNodesSyntax? = nil,
    period: TokenSyntax = .periodToken(),
    _ unexpectedBetweenPeriodAndTypeOrProtocol: UnexpectedNodesSyntax? = nil,
    typeOrProtocol: TokenSyntax,
    _ unexpectedAfterTypeOrProtocol: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeBaseType,
      baseType: baseType,
      unexpectedBetweenBaseTypeAndPeriod,
      period: period,
      unexpectedBetweenPeriodAndTypeOrProtocol,
      metatypeSpecifier: typeOrProtocol,
      unexpectedAfterTypeOrProtocol,
      trailingTrivia: trailingTrivia
    )
  }
}

extension NamedOpaqueReturnTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeGenericParameterClause")
  public var unexpectedBeforeGenericParameters: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeGenericParameterClause
    }
    set {
      unexpectedBeforeGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "genericParameterClause")
  public var genericParameters: GenericParameterClauseSyntax {
    get {
      return genericParameterClause
    }
    set {
      genericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndType")
  public var unexpectedBetweenGenericParametersAndBaseType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericParameterClauseAndType
    }
    set {
      unexpectedBetweenGenericParameterClauseAndType = newValue
    }
  }

  @available(*, deprecated, renamed: "type")
  public var baseType: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterBaseType: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterType
    }
    set {
      unexpectedAfterType = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:genericParameterClause:_:type:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeGenericParameters: UnexpectedNodesSyntax? = nil,
    genericParameters: GenericParameterClauseSyntax,
    _ unexpectedBetweenGenericParametersAndBaseType: UnexpectedNodesSyntax? = nil,
    baseType: some TypeSyntaxProtocol,
    _ unexpectedAfterBaseType: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeGenericParameters,
      genericParameterClause: genericParameters,
      unexpectedBetweenGenericParametersAndBaseType,
      type: baseType,
      unexpectedAfterBaseType,
      trailingTrivia: trailingTrivia
    )
  }
}

extension OperatorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeFixitySpecifier")
  public var unexpectedBeforeFixity: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeFixitySpecifier
    }
    set {
      unexpectedBeforeFixitySpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "fixitySpecifier")
  public var fixity: TokenSyntax {
    get {
      return fixitySpecifier
    }
    set {
      fixitySpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenFixitySpecifierAndOperatorKeyword")
  public var unexpectedBetweenFixityAndOperatorKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFixitySpecifierAndOperatorKeyword
    }
    set {
      unexpectedBetweenFixitySpecifierAndOperatorKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenOperatorKeywordAndName")
  public var unexpectedBetweenOperatorKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOperatorKeywordAndName
    }
    set {
      unexpectedBetweenOperatorKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "name")
  public var identifier: TokenSyntax {
    get {
      return name
    }
    set {
      name = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenNameAndOperatorPrecedenceAndTypes")
  public var unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndOperatorPrecedenceAndTypes
    }
    set {
      unexpectedBetweenNameAndOperatorPrecedenceAndTypes = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:fixitySpecifier:_:operatorKeyword:_:name:_:operatorPrecedenceAndTypes:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeFixity: UnexpectedNodesSyntax? = nil,
    fixity: TokenSyntax,
    _ unexpectedBetweenFixityAndOperatorKeyword: UnexpectedNodesSyntax? = nil,
    operatorKeyword: TokenSyntax = .keyword(.operator),
    _ unexpectedBetweenOperatorKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: UnexpectedNodesSyntax? = nil,
    operatorPrecedenceAndTypes: OperatorPrecedenceAndTypesSyntax? = nil,
    _ unexpectedAfterOperatorPrecedenceAndTypes: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeFixity,
      fixitySpecifier: fixity,
      unexpectedBetweenFixityAndOperatorKeyword,
      operatorKeyword: operatorKeyword,
      unexpectedBetweenOperatorKeywordAndIdentifier,
      name: identifier,
      unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes,
      operatorPrecedenceAndTypes: operatorPrecedenceAndTypes,
      unexpectedAfterOperatorPrecedenceAndTypes,
      trailingTrivia: trailingTrivia
    )
  }
}

extension OptionalBindingConditionSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeBindingSpecifier")
  public var unexpectedBeforeBindingKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeBindingSpecifier
    }
    set {
      unexpectedBeforeBindingSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: TokenSyntax {
    get {
      return bindingSpecifier
    }
    set {
      bindingSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndPattern")
  public var unexpectedBetweenBindingKeywordAndPattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBindingSpecifierAndPattern
    }
    set {
      unexpectedBetweenBindingSpecifierAndPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:bindingSpecifier:_:pattern:_:typeAnnotation:_:initializer:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeBindingKeyword: UnexpectedNodesSyntax? = nil,
    bindingKeyword: TokenSyntax,
    _ unexpectedBetweenBindingKeywordAndPattern: UnexpectedNodesSyntax? = nil,
    pattern: some PatternSyntaxProtocol,
    _ unexpectedBetweenPatternAndTypeAnnotation: UnexpectedNodesSyntax? = nil,
    typeAnnotation: TypeAnnotationSyntax? = nil,
    _ unexpectedBetweenTypeAnnotationAndInitializer: UnexpectedNodesSyntax? = nil,
    initializer: InitializerClauseSyntax? = nil,
    _ unexpectedAfterInitializer: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeBindingKeyword,
      bindingSpecifier: bindingKeyword,
      unexpectedBetweenBindingKeywordAndPattern,
      pattern: pattern,
      unexpectedBetweenPatternAndTypeAnnotation,
      typeAnnotation: typeAnnotation,
      unexpectedBetweenTypeAnnotationAndInitializer,
      initializer: initializer,
      unexpectedAfterInitializer,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PackElementExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEachKeywordAndPack")
  public var unexpectedBetweenEachKeywordAndPackRefExpr: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEachKeywordAndPack
    }
    set {
      unexpectedBetweenEachKeywordAndPack = newValue
    }
  }

  @available(*, deprecated, renamed: "pack")
  public var packRefExpr: ExprSyntax {
    get {
      return pack
    }
    set {
      pack = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterPack")
  public var unexpectedAfterPackRefExpr: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPack
    }
    set {
      unexpectedAfterPack = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:eachKeyword:_:pack:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeEachKeyword: UnexpectedNodesSyntax? = nil,
    eachKeyword: TokenSyntax = .keyword(.each),
    _ unexpectedBetweenEachKeywordAndPackRefExpr: UnexpectedNodesSyntax? = nil,
    packRefExpr: some ExprSyntaxProtocol,
    _ unexpectedAfterPackRefExpr: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeEachKeyword,
      eachKeyword: eachKeyword,
      unexpectedBetweenEachKeywordAndPackRefExpr,
      pack: packRefExpr,
      unexpectedAfterPackRefExpr,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PackElementTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEachKeywordAndPack")
  public var unexpectedBetweenEachKeywordAndPackType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEachKeywordAndPack
    }
    set {
      unexpectedBetweenEachKeywordAndPack = newValue
    }
  }

  @available(*, deprecated, renamed: "pack")
  public var packType: TypeSyntax {
    get {
      return pack
    }
    set {
      pack = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterPack")
  public var unexpectedAfterPackType: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPack
    }
    set {
      unexpectedAfterPack = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:eachKeyword:_:pack:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeEachKeyword: UnexpectedNodesSyntax? = nil,
    eachKeyword: TokenSyntax = .keyword(.each),
    _ unexpectedBetweenEachKeywordAndPackType: UnexpectedNodesSyntax? = nil,
    packType: some TypeSyntaxProtocol,
    _ unexpectedAfterPackType: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeEachKeyword,
      eachKeyword: eachKeyword,
      unexpectedBetweenEachKeywordAndPackType,
      pack: packType,
      unexpectedAfterPackType,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PackExpansionExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenRepeatKeywordAndRepetitionPattern")
  public var unexpectedBetweenRepeatKeywordAndPatternExpr: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRepeatKeywordAndRepetitionPattern
    }
    set {
      unexpectedBetweenRepeatKeywordAndRepetitionPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "repetitionPattern")
  public var patternExpr: ExprSyntax {
    get {
      return repetitionPattern
    }
    set {
      repetitionPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRepetitionPattern")
  public var unexpectedAfterPatternExpr: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRepetitionPattern
    }
    set {
      unexpectedAfterRepetitionPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:repeatKeyword:_:repetitionPattern:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeRepeatKeyword: UnexpectedNodesSyntax? = nil,
    repeatKeyword: TokenSyntax = .keyword(.repeat),
    _ unexpectedBetweenRepeatKeywordAndPatternExpr: UnexpectedNodesSyntax? = nil,
    patternExpr: some ExprSyntaxProtocol,
    _ unexpectedAfterPatternExpr: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeRepeatKeyword,
      repeatKeyword: repeatKeyword,
      unexpectedBetweenRepeatKeywordAndPatternExpr,
      repetitionPattern: patternExpr,
      unexpectedAfterPatternExpr,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PackExpansionTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenRepeatKeywordAndRepetitionPattern")
  public var unexpectedBetweenRepeatKeywordAndPatternType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRepeatKeywordAndRepetitionPattern
    }
    set {
      unexpectedBetweenRepeatKeywordAndRepetitionPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "repetitionPattern")
  public var patternType: TypeSyntax {
    get {
      return repetitionPattern
    }
    set {
      repetitionPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRepetitionPattern")
  public var unexpectedAfterPatternType: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRepetitionPattern
    }
    set {
      unexpectedAfterRepetitionPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:repeatKeyword:_:repetitionPattern:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeRepeatKeyword: UnexpectedNodesSyntax? = nil,
    repeatKeyword: TokenSyntax = .keyword(.repeat),
    _ unexpectedBetweenRepeatKeywordAndPatternType: UnexpectedNodesSyntax? = nil,
    patternType: some TypeSyntaxProtocol,
    _ unexpectedAfterPatternType: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeRepeatKeyword,
      repeatKeyword: repeatKeyword,
      unexpectedBetweenRepeatKeywordAndPatternType,
      repetitionPattern: patternType,
      unexpectedAfterPatternType,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PatternBindingSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenInitializerAndAccessorBlock")
  public var unexpectedBetweenInitializerAndAccessor: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenInitializerAndAccessorBlock
    }
    set {
      unexpectedBetweenInitializerAndAccessorBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "accessorBlock")
  public var accessor: AccessorBlockSyntax? {
    get {
      return accessorBlock
    }
    set {
      accessorBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAccessorBlockAndTrailingComma")
  public var unexpectedBetweenAccessorAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAccessorBlockAndTrailingComma
    }
    set {
      unexpectedBetweenAccessorBlockAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:pattern:_:typeAnnotation:_:initializer:_:accessorBlock:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforePattern: UnexpectedNodesSyntax? = nil,
    pattern: some PatternSyntaxProtocol,
    _ unexpectedBetweenPatternAndTypeAnnotation: UnexpectedNodesSyntax? = nil,
    typeAnnotation: TypeAnnotationSyntax? = nil,
    _ unexpectedBetweenTypeAnnotationAndInitializer: UnexpectedNodesSyntax? = nil,
    initializer: InitializerClauseSyntax? = nil,
    _ unexpectedBetweenInitializerAndAccessor: UnexpectedNodesSyntax? = nil,
    accessor: AccessorBlockSyntax? = nil,
    _ unexpectedBetweenAccessorAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforePattern,
      pattern: pattern,
      unexpectedBetweenPatternAndTypeAnnotation,
      typeAnnotation: typeAnnotation,
      unexpectedBetweenTypeAnnotationAndInitializer,
      initializer: initializer,
      unexpectedBetweenInitializerAndAccessor,
      accessorBlock: accessor,
      unexpectedBetweenAccessorAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PlatformVersionItemSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforePlatformVersion")
  public var unexpectedBeforeAvailabilityVersionRestriction: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforePlatformVersion
    }
    set {
      unexpectedBeforePlatformVersion = newValue
    }
  }

  @available(*, deprecated, renamed: "platformVersion")
  public var availabilityVersionRestriction: PlatformVersionSyntax {
    get {
      return platformVersion
    }
    set {
      platformVersion = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenPlatformVersionAndTrailingComma")
  public var unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPlatformVersionAndTrailingComma
    }
    set {
      unexpectedBetweenPlatformVersionAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:platformVersion:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAvailabilityVersionRestriction: UnexpectedNodesSyntax? = nil,
    availabilityVersionRestriction: PlatformVersionSyntax,
    _ unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAvailabilityVersionRestriction,
      platformVersion: availabilityVersionRestriction,
      unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PostfixOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndOperator")
  public var unexpectedBetweenExpressionAndOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenExpressionAndOperator
    }
    set {
      unexpectedBetweenExpressionAndOperator = newValue
    }
  }

  @available(*, deprecated, renamed: "operator")
  public var operatorToken: TokenSyntax {
    get {
      return `operator`
    }
    set {
      `operator` = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterOperator")
  public var unexpectedAfterOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterOperator
    }
    set {
      unexpectedAfterOperator = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:expression:_:operator:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeExpression: UnexpectedNodesSyntax? = nil,
    expression: some ExprSyntaxProtocol,
    _ unexpectedBetweenExpressionAndOperatorToken: UnexpectedNodesSyntax? = nil,
    operatorToken: TokenSyntax,
    _ unexpectedAfterOperatorToken: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeExpression,
      expression: expression,
      unexpectedBetweenExpressionAndOperatorToken,
      operator: operatorToken,
      unexpectedAfterOperatorToken,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PoundSourceLocationArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeFileLabel")
  public var unexpectedBeforeFileArgLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeFileLabel
    }
    set {
      unexpectedBeforeFileLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "fileLabel")
  public var fileArgLabel: TokenSyntax {
    get {
      return fileLabel
    }
    set {
      fileLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenFileLabelAndFileColon")
  public var unexpectedBetweenFileArgLabelAndFileArgColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFileLabelAndFileColon
    }
    set {
      unexpectedBetweenFileLabelAndFileColon = newValue
    }
  }

  @available(*, deprecated, renamed: "fileColon")
  public var fileArgColon: TokenSyntax {
    get {
      return fileColon
    }
    set {
      fileColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenFileColonAndFileName")
  public var unexpectedBetweenFileArgColonAndFileName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFileColonAndFileName
    }
    set {
      unexpectedBetweenFileColonAndFileName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndLineLabel")
  public var unexpectedBetweenCommaAndLineArgLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCommaAndLineLabel
    }
    set {
      unexpectedBetweenCommaAndLineLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "lineLabel")
  public var lineArgLabel: TokenSyntax {
    get {
      return lineLabel
    }
    set {
      lineLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLineLabelAndLineColon")
  public var unexpectedBetweenLineArgLabelAndLineArgColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLineLabelAndLineColon
    }
    set {
      unexpectedBetweenLineLabelAndLineColon = newValue
    }
  }

  @available(*, deprecated, renamed: "lineColon")
  public var lineArgColon: TokenSyntax {
    get {
      return lineColon
    }
    set {
      lineColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLineColonAndLineNumber")
  public var unexpectedBetweenLineArgColonAndLineNumber: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLineColonAndLineNumber
    }
    set {
      unexpectedBetweenLineColonAndLineNumber = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:fileLabel:_:fileColon:_:fileName:_:comma:_:lineLabel:_:lineColon:_:lineNumber:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeFileArgLabel: UnexpectedNodesSyntax? = nil,
    fileArgLabel: TokenSyntax = .keyword(.file),
    _ unexpectedBetweenFileArgLabelAndFileArgColon: UnexpectedNodesSyntax? = nil,
    fileArgColon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenFileArgColonAndFileName: UnexpectedNodesSyntax? = nil,
    fileName: SimpleStringLiteralExprSyntax,
    _ unexpectedBetweenFileNameAndComma: UnexpectedNodesSyntax? = nil,
    comma: TokenSyntax = .commaToken(),
    _ unexpectedBetweenCommaAndLineArgLabel: UnexpectedNodesSyntax? = nil,
    lineArgLabel: TokenSyntax = .keyword(.line),
    _ unexpectedBetweenLineArgLabelAndLineArgColon: UnexpectedNodesSyntax? = nil,
    lineArgColon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenLineArgColonAndLineNumber: UnexpectedNodesSyntax? = nil,
    lineNumber: TokenSyntax,
    _ unexpectedAfterLineNumber: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeFileArgLabel,
      fileLabel: fileArgLabel,
      unexpectedBetweenFileArgLabelAndFileArgColon,
      fileColon: fileArgColon,
      unexpectedBetweenFileArgColonAndFileName,
      fileName: fileName,
      unexpectedBetweenFileNameAndComma,
      comma: comma,
      unexpectedBetweenCommaAndLineArgLabel,
      lineLabel: lineArgLabel,
      unexpectedBetweenLineArgLabelAndLineArgColon,
      lineColon: lineArgColon,
      unexpectedBetweenLineArgColonAndLineNumber,
      lineNumber: lineNumber,
      unexpectedAfterLineNumber,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PoundSourceLocationSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgs: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndArguments
    }
    set {
      unexpectedBetweenLeftParenAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var args: PoundSourceLocationArgumentsSyntax? {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgsAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightParen
    }
    set {
      unexpectedBetweenArgumentsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:poundSourceLocation:_:leftParen:_:arguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforePoundSourceLocation: UnexpectedNodesSyntax? = nil,
    poundSourceLocation: TokenSyntax = .poundSourceLocationToken(),
    _ unexpectedBetweenPoundSourceLocationAndLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndArgs: UnexpectedNodesSyntax? = nil,
    args: PoundSourceLocationArgumentsSyntax? = nil,
    _ unexpectedBetweenArgsAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforePoundSourceLocation,
      poundSourceLocation: poundSourceLocation,
      unexpectedBetweenPoundSourceLocationAndLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndArgs,
      arguments: args,
      unexpectedBetweenArgsAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PrecedenceGroupAssignmentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAssignmentLabel")
  public var unexpectedBeforeAssignmentKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAssignmentLabel
    }
    set {
      unexpectedBeforeAssignmentLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "assignmentLabel")
  public var assignmentKeyword: TokenSyntax {
    get {
      return assignmentLabel
    }
    set {
      assignmentLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAssignmentLabelAndColon")
  public var unexpectedBetweenAssignmentKeywordAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAssignmentLabelAndColon
    }
    set {
      unexpectedBetweenAssignmentLabelAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndValue")
  public var unexpectedBetweenColonAndFlag: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndValue
    }
    set {
      unexpectedBetweenColonAndValue = newValue
    }
  }

  @available(*, deprecated, renamed: "value")
  public var flag: TokenSyntax {
    get {
      return value
    }
    set {
      value = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterValue")
  public var unexpectedAfterFlag: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterValue
    }
    set {
      unexpectedAfterValue = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:assignmentLabel:_:colon:_:value:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAssignmentKeyword: UnexpectedNodesSyntax? = nil,
    assignmentKeyword: TokenSyntax = .keyword(.assignment),
    _ unexpectedBetweenAssignmentKeywordAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndFlag: UnexpectedNodesSyntax? = nil,
    flag: TokenSyntax,
    _ unexpectedAfterFlag: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAssignmentKeyword,
      assignmentLabel: assignmentKeyword,
      unexpectedBetweenAssignmentKeywordAndColon,
      colon: colon,
      unexpectedBetweenColonAndFlag,
      value: flag,
      unexpectedAfterFlag,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PrecedenceGroupAssociativitySyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAssociativityLabel")
  public var unexpectedBeforeAssociativityKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAssociativityLabel
    }
    set {
      unexpectedBeforeAssociativityLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "associativityLabel")
  public var associativityKeyword: TokenSyntax {
    get {
      return associativityLabel
    }
    set {
      associativityLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAssociativityLabelAndColon")
  public var unexpectedBetweenAssociativityKeywordAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAssociativityLabelAndColon
    }
    set {
      unexpectedBetweenAssociativityLabelAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:associativityLabel:_:colon:_:value:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAssociativityKeyword: UnexpectedNodesSyntax? = nil,
    associativityKeyword: TokenSyntax = .keyword(.associativity),
    _ unexpectedBetweenAssociativityKeywordAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndValue: UnexpectedNodesSyntax? = nil,
    value: TokenSyntax,
    _ unexpectedAfterValue: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAssociativityKeyword,
      associativityLabel: associativityKeyword,
      unexpectedBetweenAssociativityKeywordAndColon,
      colon: colon,
      unexpectedBetweenColonAndValue,
      value: value,
      unexpectedAfterValue,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PrecedenceGroupDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPrecedencegroupKeywordAndName")
  public var unexpectedBetweenPrecedencegroupKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPrecedencegroupKeywordAndName
    }
    set {
      unexpectedBetweenPrecedencegroupKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "name")
  public var identifier: TokenSyntax {
    get {
      return name
    }
    set {
      name = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenNameAndLeftBrace")
  public var unexpectedBetweenIdentifierAndLeftBrace: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndLeftBrace
    }
    set {
      unexpectedBetweenNameAndLeftBrace = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:precedencegroupKeyword:_:name:_:leftBrace:_:groupAttributes:_:rightBrace:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndPrecedencegroupKeyword: UnexpectedNodesSyntax? = nil,
    precedencegroupKeyword: TokenSyntax = .keyword(.precedencegroup),
    _ unexpectedBetweenPrecedencegroupKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndLeftBrace: UnexpectedNodesSyntax? = nil,
    leftBrace: TokenSyntax = .leftBraceToken(),
    _ unexpectedBetweenLeftBraceAndGroupAttributes: UnexpectedNodesSyntax? = nil,
    groupAttributes: PrecedenceGroupAttributeListSyntax,
    _ unexpectedBetweenGroupAttributesAndRightBrace: UnexpectedNodesSyntax? = nil,
    rightBrace: TokenSyntax = .rightBraceToken(),
    _ unexpectedAfterRightBrace: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndPrecedencegroupKeyword,
      precedencegroupKeyword: precedencegroupKeyword,
      unexpectedBetweenPrecedencegroupKeywordAndIdentifier,
      name: identifier,
      unexpectedBetweenIdentifierAndLeftBrace,
      leftBrace: leftBrace,
      unexpectedBetweenLeftBraceAndGroupAttributes,
      groupAttributes: groupAttributes,
      unexpectedBetweenGroupAttributesAndRightBrace,
      rightBrace: rightBrace,
      unexpectedAfterRightBrace,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PrecedenceGroupRelationSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeHigherThanOrLowerThanLabel")
  public var unexpectedBeforeHigherThanOrLowerThan: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeHigherThanOrLowerThanLabel
    }
    set {
      unexpectedBeforeHigherThanOrLowerThanLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "higherThanOrLowerThanLabel")
  public var higherThanOrLowerThan: TokenSyntax {
    get {
      return higherThanOrLowerThanLabel
    }
    set {
      higherThanOrLowerThanLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenHigherThanOrLowerThanLabelAndColon")
  public var unexpectedBetweenHigherThanOrLowerThanAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenHigherThanOrLowerThanLabelAndColon
    }
    set {
      unexpectedBetweenHigherThanOrLowerThanLabelAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPrecedenceGroups")
  public var unexpectedBetweenColonAndOtherNames: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndPrecedenceGroups
    }
    set {
      unexpectedBetweenColonAndPrecedenceGroups = newValue
    }
  }

  @available(*, deprecated, renamed: "precedenceGroups")
  public var otherNames: PrecedenceGroupNameListSyntax {
    get {
      return precedenceGroups
    }
    set {
      precedenceGroups = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterPrecedenceGroups")
  public var unexpectedAfterOtherNames: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPrecedenceGroups
    }
    set {
      unexpectedAfterPrecedenceGroups = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:higherThanOrLowerThanLabel:_:colon:_:precedenceGroups:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeHigherThanOrLowerThan: UnexpectedNodesSyntax? = nil,
    higherThanOrLowerThan: TokenSyntax,
    _ unexpectedBetweenHigherThanOrLowerThanAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndOtherNames: UnexpectedNodesSyntax? = nil,
    otherNames: PrecedenceGroupNameListSyntax,
    _ unexpectedAfterOtherNames: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeHigherThanOrLowerThan,
      higherThanOrLowerThanLabel: higherThanOrLowerThan,
      unexpectedBetweenHigherThanOrLowerThanAndColon,
      colon: colon,
      unexpectedBetweenColonAndOtherNames,
      precedenceGroups: otherNames,
      unexpectedAfterOtherNames,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PrefixOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOperator")
  public var unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeOperator
    }
    set {
      unexpectedBeforeOperator = newValue
    }
  }

  @available(*, deprecated, renamed: "operator")
  public var operatorToken: TokenSyntax {
    get {
      return `operator`
    }
    set {
      `operator` = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenOperatorAndExpression")
  public var unexpectedBetweenOperatorTokenAndPostfixExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOperatorAndExpression
    }
    set {
      unexpectedBetweenOperatorAndExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "expression")
  public var postfixExpression: ExprSyntax {
    get {
      return expression
    }
    set {
      expression = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterExpression")
  public var unexpectedAfterPostfixExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterExpression
    }
    set {
      unexpectedAfterExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:operator:_:expression:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeOperatorToken: UnexpectedNodesSyntax? = nil,
    operatorToken: TokenSyntax,
    _ unexpectedBetweenOperatorTokenAndPostfixExpression: UnexpectedNodesSyntax? = nil,
    postfixExpression: some ExprSyntaxProtocol,
    _ unexpectedAfterPostfixExpression: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeOperatorToken,
      operator: operatorToken,
      unexpectedBetweenOperatorTokenAndPostfixExpression,
      expression: postfixExpression,
      unexpectedAfterPostfixExpression,
      trailingTrivia: trailingTrivia
    )
  }
}

extension PrimaryAssociatedTypeClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftAngle
    }
    set {
      unexpectedBeforeLeftAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: TokenSyntax {
    get {
      return leftAngle
    }
    set {
      leftAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes")
  public var unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes
    }
    set {
      unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes = newValue
    }
  }

  @available(*, deprecated, renamed: "primaryAssociatedTypes")
  public var primaryAssociatedTypeList: PrimaryAssociatedTypeListSyntax {
    get {
      return primaryAssociatedTypes
    }
    set {
      primaryAssociatedTypes = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenPrimaryAssociatedTypesAndRightAngle")
  public var unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenPrimaryAssociatedTypesAndRightAngle
    }
    set {
      unexpectedBetweenPrimaryAssociatedTypesAndRightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: TokenSyntax {
    get {
      return rightAngle
    }
    set {
      rightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightAngle
    }
    set {
      unexpectedAfterRightAngle = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftAngle:_:primaryAssociatedTypes:_:rightAngle:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftAngleBracket: UnexpectedNodesSyntax? = nil,
    leftAngleBracket: TokenSyntax = .leftAngleToken(),
    _ unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: UnexpectedNodesSyntax? = nil,
    primaryAssociatedTypeList: PrimaryAssociatedTypeListSyntax,
    _ unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: UnexpectedNodesSyntax? = nil,
    rightAngleBracket: TokenSyntax = .rightAngleToken(),
    _ unexpectedAfterRightAngleBracket: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftAngleBracket,
      leftAngle: leftAngleBracket,
      unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList,
      primaryAssociatedTypes: primaryAssociatedTypeList,
      unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket,
      rightAngle: rightAngleBracket,
      unexpectedAfterRightAngleBracket,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ProtocolDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeProtocolHeader")
  public var unexpectedBeforeAttributes: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeProtocolHeader
    }
    set {
      unexpectedBeforeProtocolHeader = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.attributes")
  public var attributes: AttributeListSyntax {
    get {
      return protocolHeader.attributes
    }
    set {
      protocolHeader.attributes = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.unexpectedBetweenAttributesAndModifiers")
  public var unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? {
    get {
      return protocolHeader.unexpectedBetweenAttributesAndModifiers
    }
    set {
      protocolHeader.unexpectedBetweenAttributesAndModifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.modifiers")
  public var modifiers: DeclModifierListSyntax {
    get {
      return protocolHeader.modifiers
    }
    set {
      protocolHeader.modifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.unexpectedBetweenModifiersAndProtocolKeyword")
  public var unexpectedBetweenModifiersAndProtocolKeyword: UnexpectedNodesSyntax? {
    get {
      return protocolHeader.unexpectedBetweenModifiersAndProtocolKeyword
    }
    set {
      protocolHeader.unexpectedBetweenModifiersAndProtocolKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.protocolKeyword")
  public var protocolKeyword: TokenSyntax {
    get {
      return protocolHeader.protocolKeyword
    }
    set {
      protocolHeader.protocolKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.unexpectedBetweenProtocolKeywordAndName")
  public var unexpectedBetweenProtocolKeywordAndName: UnexpectedNodesSyntax? {
    get {
      return protocolHeader.unexpectedBetweenProtocolKeywordAndName
    }
    set {
      protocolHeader.unexpectedBetweenProtocolKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.name")
  public var name: TokenSyntax {
    get {
      return protocolHeader.name
    }
    set {
      protocolHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.unexpectedBetweenNameAndPrimaryAssociatedTypeClause")
  public var unexpectedBetweenNameAndPrimaryAssociatedTypeClause: UnexpectedNodesSyntax? {
    get {
      return protocolHeader.unexpectedBetweenNameAndPrimaryAssociatedTypeClause
    }
    set {
      protocolHeader.unexpectedBetweenNameAndPrimaryAssociatedTypeClause = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.primaryAssociatedTypeClause")
  public var primaryAssociatedTypeClause: PrimaryAssociatedTypeClauseSyntax? {
    get {
      return protocolHeader.primaryAssociatedTypeClause
    }
    set {
      protocolHeader.primaryAssociatedTypeClause = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause")
  public var unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return protocolHeader.unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause
    }
    set {
      protocolHeader.unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.inheritanceClause")
  public var inheritanceClause: InheritanceClauseSyntax? {
    get {
      return protocolHeader.inheritanceClause
    }
    set {
      protocolHeader.inheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause")
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return protocolHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause
    }
    set {
      protocolHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.genericWhereClause")
  public var genericWhereClause: GenericWhereClauseSyntax? {
    get {
      return protocolHeader.genericWhereClause
    }
    set {
      protocolHeader.genericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenProtocolHeaderAndMemberBlock")
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenProtocolHeaderAndMemberBlock
    }
    set {
      unexpectedBetweenProtocolHeaderAndMemberBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.unexpectedBetweenProtocolKeywordAndName")
  public var unexpectedBetweenProtocolKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return protocolHeader.unexpectedBetweenProtocolKeywordAndName
    }
    set {
      protocolHeader.unexpectedBetweenProtocolKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.name")
  public var identifier: TokenSyntax {
    get {
      return protocolHeader.name
    }
    set {
      protocolHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "protocolHeader.unexpectedBetweenNameAndPrimaryAssociatedTypeClause")
  public var unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: UnexpectedNodesSyntax? {
    get {
      return protocolHeader.unexpectedBetweenNameAndPrimaryAssociatedTypeClause
    }
    set {
      protocolHeader.unexpectedBetweenNameAndPrimaryAssociatedTypeClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:protocolHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndProtocolKeyword: UnexpectedNodesSyntax? = nil,
    protocolKeyword: TokenSyntax = .keyword(.protocol),
    _ unexpectedBetweenProtocolKeywordAndName: UnexpectedNodesSyntax? = nil,
    name: TokenSyntax,
    _ unexpectedBetweenNameAndPrimaryAssociatedTypeClause: UnexpectedNodesSyntax? = nil,
    primaryAssociatedTypeClause: PrimaryAssociatedTypeClauseSyntax? = nil,
    _ unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      protocolHeader: ProtocolDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndProtocolKeyword,
        protocolKeyword: protocolKeyword,
        unexpectedBetweenProtocolKeywordAndName,
        name: name,
        unexpectedBetweenNameAndPrimaryAssociatedTypeClause,
        primaryAssociatedTypeClause: primaryAssociatedTypeClause,
        unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:protocolHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndProtocolKeyword: UnexpectedNodesSyntax? = nil,
    protocolKeyword: TokenSyntax = .keyword(.protocol),
    _ unexpectedBetweenProtocolKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: UnexpectedNodesSyntax? = nil,
    primaryAssociatedTypeClause: PrimaryAssociatedTypeClauseSyntax? = nil,
    _ unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      protocolHeader: ProtocolDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndProtocolKeyword,
        protocolKeyword: protocolKeyword,
        unexpectedBetweenProtocolKeywordAndIdentifier,
        name: identifier,
        unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause,
        primaryAssociatedTypeClause: primaryAssociatedTypeClause,
        unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }
}

extension RegexLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningPoundsAndOpeningSlash")
  public var unexpectedBetweenOpeningPoundsAndOpenSlash: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOpeningPoundsAndOpeningSlash
    }
    set {
      unexpectedBetweenOpeningPoundsAndOpeningSlash = newValue
    }
  }

  @available(*, deprecated, renamed: "openingSlash")
  public var openSlash: TokenSyntax {
    get {
      return openingSlash
    }
    set {
      openingSlash = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenOpeningSlashAndRegex")
  public var unexpectedBetweenOpenSlashAndRegexPattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOpeningSlashAndRegex
    }
    set {
      unexpectedBetweenOpeningSlashAndRegex = newValue
    }
  }

  @available(*, deprecated, renamed: "regex")
  public var regexPattern: TokenSyntax {
    get {
      return regex
    }
    set {
      regex = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenRegexAndClosingSlash")
  public var unexpectedBetweenRegexPatternAndCloseSlash: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRegexAndClosingSlash
    }
    set {
      unexpectedBetweenRegexAndClosingSlash = newValue
    }
  }

  @available(*, deprecated, renamed: "closingSlash")
  public var closeSlash: TokenSyntax {
    get {
      return closingSlash
    }
    set {
      closingSlash = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenClosingSlashAndClosingPounds")
  public var unexpectedBetweenCloseSlashAndClosingPounds: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenClosingSlashAndClosingPounds
    }
    set {
      unexpectedBetweenClosingSlashAndClosingPounds = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:openingPounds:_:openingSlash:_:regex:_:closingSlash:_:closingPounds:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeOpeningPounds: UnexpectedNodesSyntax? = nil,
    openingPounds: TokenSyntax? = nil,
    _ unexpectedBetweenOpeningPoundsAndOpenSlash: UnexpectedNodesSyntax? = nil,
    openSlash: TokenSyntax = .regexSlashToken(),
    _ unexpectedBetweenOpenSlashAndRegexPattern: UnexpectedNodesSyntax? = nil,
    regexPattern: TokenSyntax,
    _ unexpectedBetweenRegexPatternAndCloseSlash: UnexpectedNodesSyntax? = nil,
    closeSlash: TokenSyntax = .regexSlashToken(),
    _ unexpectedBetweenCloseSlashAndClosingPounds: UnexpectedNodesSyntax? = nil,
    closingPounds: TokenSyntax? = nil,
    _ unexpectedAfterClosingPounds: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeOpeningPounds,
      openingPounds: openingPounds,
      unexpectedBetweenOpeningPoundsAndOpenSlash,
      openingSlash: openSlash,
      unexpectedBetweenOpenSlashAndRegexPattern,
      regex: regexPattern,
      unexpectedBetweenRegexPatternAndCloseSlash,
      closingSlash: closeSlash,
      unexpectedBetweenCloseSlashAndClosingPounds,
      closingPounds: closingPounds,
      unexpectedAfterClosingPounds,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ReturnClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenArrowAndType")
  public var unexpectedBetweenArrowAndReturnType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArrowAndType
    }
    set {
      unexpectedBetweenArrowAndType = newValue
    }
  }

  @available(*, deprecated, renamed: "type")
  public var returnType: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterReturnType: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterType
    }
    set {
      unexpectedAfterType = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:arrow:_:type:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeArrow: UnexpectedNodesSyntax? = nil,
    arrow: TokenSyntax = .arrowToken(),
    _ unexpectedBetweenArrowAndReturnType: UnexpectedNodesSyntax? = nil,
    returnType: some TypeSyntaxProtocol,
    _ unexpectedAfterReturnType: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeArrow,
      arrow: arrow,
      unexpectedBetweenArrowAndReturnType,
      type: returnType,
      unexpectedAfterReturnType,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SameTypeRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftType")
  public var unexpectedBeforeLeftTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLeftType
    }
    set {
      unexpectedBeforeLeftType = newValue
    }
  }

  @available(*, deprecated, renamed: "leftType")
  public var leftTypeIdentifier: TypeSyntax {
    get {
      return leftType
    }
    set {
      leftType = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftTypeAndEqual")
  public var unexpectedBetweenLeftTypeIdentifierAndEqualityToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftTypeAndEqual
    }
    set {
      unexpectedBetweenLeftTypeAndEqual = newValue
    }
  }

  @available(*, deprecated, renamed: "equal")
  public var equalityToken: TokenSyntax {
    get {
      return equal
    }
    set {
      equal = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenEqualAndRightType")
  public var unexpectedBetweenEqualityTokenAndRightTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenEqualAndRightType
    }
    set {
      unexpectedBetweenEqualAndRightType = newValue
    }
  }

  @available(*, deprecated, renamed: "rightType")
  public var rightTypeIdentifier: TypeSyntax {
    get {
      return rightType
    }
    set {
      rightType = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterRightType")
  public var unexpectedAfterRightTypeIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterRightType
    }
    set {
      unexpectedAfterRightType = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftType:_:equal:_:rightType:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftTypeIdentifier: UnexpectedNodesSyntax? = nil,
    leftTypeIdentifier: some TypeSyntaxProtocol,
    _ unexpectedBetweenLeftTypeIdentifierAndEqualityToken: UnexpectedNodesSyntax? = nil,
    equalityToken: TokenSyntax,
    _ unexpectedBetweenEqualityTokenAndRightTypeIdentifier: UnexpectedNodesSyntax? = nil,
    rightTypeIdentifier: some TypeSyntaxProtocol,
    _ unexpectedAfterRightTypeIdentifier: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftTypeIdentifier,
      leftType: leftTypeIdentifier,
      unexpectedBetweenLeftTypeIdentifierAndEqualityToken,
      equal: equalityToken,
      unexpectedBetweenEqualityTokenAndRightTypeIdentifier,
      rightType: rightTypeIdentifier,
      unexpectedAfterRightTypeIdentifier,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SomeOrAnyTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenSomeOrAnySpecifierAndConstraint")
  public var unexpectedBetweenSomeOrAnySpecifierAndBaseType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenSomeOrAnySpecifierAndConstraint
    }
    set {
      unexpectedBetweenSomeOrAnySpecifierAndConstraint = newValue
    }
  }

  @available(*, deprecated, renamed: "constraint")
  public var baseType: TypeSyntax {
    get {
      return constraint
    }
    set {
      constraint = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterConstraint")
  public var unexpectedAfterBaseType: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterConstraint
    }
    set {
      unexpectedAfterConstraint = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:someOrAnySpecifier:_:constraint:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeSomeOrAnySpecifier: UnexpectedNodesSyntax? = nil,
    someOrAnySpecifier: TokenSyntax,
    _ unexpectedBetweenSomeOrAnySpecifierAndBaseType: UnexpectedNodesSyntax? = nil,
    baseType: some TypeSyntaxProtocol,
    _ unexpectedAfterBaseType: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeSomeOrAnySpecifier,
      someOrAnySpecifier: someOrAnySpecifier,
      unexpectedBetweenSomeOrAnySpecifierAndBaseType,
      constraint: baseType,
      unexpectedAfterBaseType,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SourceFileSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenStatementsAndEndOfFileToken")
  public var unexpectedBetweenStatementsAndEofToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenStatementsAndEndOfFileToken
    }
    set {
      unexpectedBetweenStatementsAndEndOfFileToken = newValue
    }
  }

  @available(*, deprecated, renamed: "endOfFileToken")
  public var eofToken: TokenSyntax {
    get {
      return endOfFileToken
    }
    set {
      endOfFileToken = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterEndOfFileToken")
  public var unexpectedAfterEofToken: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterEndOfFileToken
    }
    set {
      unexpectedAfterEndOfFileToken = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:shebang:_:statements:_:endOfFileToken:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeShebang: UnexpectedNodesSyntax? = nil,
    shebang: TokenSyntax? = nil,
    _ unexpectedBetweenShebangAndStatements: UnexpectedNodesSyntax? = nil,
    statements: CodeBlockItemListSyntax,
    _ unexpectedBetweenStatementsAndEofToken: UnexpectedNodesSyntax? = nil,
    eofToken: TokenSyntax = .endOfFileToken(),
    _ unexpectedAfterEofToken: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeShebang,
      shebang: shebang,
      unexpectedBetweenShebangAndStatements,
      statements: statements,
      unexpectedBetweenStatementsAndEofToken,
      endOfFileToken: eofToken,
      unexpectedAfterEofToken,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SpecializeAvailabilityArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAvailabilityLabel")
  public var unexpectedBeforeLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAvailabilityLabel
    }
    set {
      unexpectedBeforeAvailabilityLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "availabilityLabel")
  public var label: TokenSyntax {
    get {
      return availabilityLabel
    }
    set {
      availabilityLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityLabelAndColon")
  public var unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityLabelAndColon
    }
    set {
      unexpectedBetweenAvailabilityLabelAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndAvailabilityArguments")
  public var unexpectedBetweenColonAndAvailabilityList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndAvailabilityArguments
    }
    set {
      unexpectedBetweenColonAndAvailabilityArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilityList: AvailabilityArgumentListSyntax {
    get {
      return availabilityArguments
    }
    set {
      availabilityArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "addAvailabilityArgument")
  public func addAvailability(_ element: AvailabilityArgumentSyntax) -> Self {
    return addAvailabilityArgument(element)
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndSemicolon")
  public var unexpectedBetweenAvailabilityListAndSemicolon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAvailabilityArgumentsAndSemicolon
    }
    set {
      unexpectedBetweenAvailabilityArgumentsAndSemicolon = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:availabilityLabel:_:colon:_:availabilityArguments:_:semicolon:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLabel: UnexpectedNodesSyntax? = nil,
    label: TokenSyntax = .keyword(.availability),
    _ unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndAvailabilityList: UnexpectedNodesSyntax? = nil,
    availabilityList: AvailabilityArgumentListSyntax,
    _ unexpectedBetweenAvailabilityListAndSemicolon: UnexpectedNodesSyntax? = nil,
    semicolon: TokenSyntax = .semicolonToken(),
    _ unexpectedAfterSemicolon: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLabel,
      availabilityLabel: label,
      unexpectedBetweenLabelAndColon,
      colon: colon,
      unexpectedBetweenColonAndAvailabilityList,
      availabilityArguments: availabilityList,
      unexpectedBetweenAvailabilityListAndSemicolon,
      semicolon: semicolon,
      unexpectedAfterSemicolon,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SpecializeTargetFunctionArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeTargetLabel")
  public var unexpectedBeforeLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeTargetLabel
    }
    set {
      unexpectedBeforeTargetLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "targetLabel")
  public var label: TokenSyntax {
    get {
      return targetLabel
    }
    set {
      targetLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenTargetLabelAndColon")
  public var unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenTargetLabelAndColon
    }
    set {
      unexpectedBetweenTargetLabelAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndDeclName")
  public var unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndDeclName
    }
    set {
      unexpectedBetweenColonAndDeclName = newValue
    }
  }

  @available(*, deprecated, renamed: "declName")
  public var declname: DeclReferenceExprSyntax {
    get {
      return declName
    }
    set {
      declName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenDeclNameAndTrailingComma")
  public var unexpectedBetweenDeclnameAndTrailingComma: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenDeclNameAndTrailingComma
    }
    set {
      unexpectedBetweenDeclNameAndTrailingComma = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:targetLabel:_:colon:_:declName:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLabel: UnexpectedNodesSyntax? = nil,
    label: TokenSyntax = .keyword(.target),
    _ unexpectedBetweenLabelAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonAndDeclname: UnexpectedNodesSyntax? = nil,
    declname: DeclReferenceExprSyntax,
    _ unexpectedBetweenDeclnameAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLabel,
      targetLabel: label,
      unexpectedBetweenLabelAndColon,
      colon: colon,
      unexpectedBetweenColonAndDeclname,
      declName: declname,
      unexpectedBetweenDeclnameAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension StringLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOpeningPounds")
  public var unexpectedBeforeOpenDelimiter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeOpeningPounds
    }
    set {
      unexpectedBeforeOpeningPounds = newValue
    }
  }

  @available(*, deprecated, renamed: "openingPounds")
  public var openDelimiter: TokenSyntax? {
    get {
      return openingPounds
    }
    set {
      openingPounds = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenOpeningPoundsAndOpeningQuote")
  public var unexpectedBetweenOpenDelimiterAndOpenQuote: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOpeningPoundsAndOpeningQuote
    }
    set {
      unexpectedBetweenOpeningPoundsAndOpeningQuote = newValue
    }
  }

  @available(*, deprecated, renamed: "openingQuote")
  public var openQuote: TokenSyntax {
    get {
      return openingQuote
    }
    set {
      openingQuote = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenOpeningQuoteAndSegments")
  public var unexpectedBetweenOpenQuoteAndSegments: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenOpeningQuoteAndSegments
    }
    set {
      unexpectedBetweenOpeningQuoteAndSegments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenSegmentsAndClosingQuote")
  public var unexpectedBetweenSegmentsAndCloseQuote: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenSegmentsAndClosingQuote
    }
    set {
      unexpectedBetweenSegmentsAndClosingQuote = newValue
    }
  }

  @available(*, deprecated, renamed: "closingQuote")
  public var closeQuote: TokenSyntax {
    get {
      return closingQuote
    }
    set {
      closingQuote = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenClosingQuoteAndClosingPounds")
  public var unexpectedBetweenCloseQuoteAndCloseDelimiter: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenClosingQuoteAndClosingPounds
    }
    set {
      unexpectedBetweenClosingQuoteAndClosingPounds = newValue
    }
  }

  @available(*, deprecated, renamed: "closingPounds")
  public var closeDelimiter: TokenSyntax? {
    get {
      return closingPounds
    }
    set {
      closingPounds = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterClosingPounds")
  public var unexpectedAfterCloseDelimiter: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterClosingPounds
    }
    set {
      unexpectedAfterClosingPounds = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:openingPounds:_:openingQuote:_:segments:_:closingQuote:_:closingPounds:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeOpenDelimiter: UnexpectedNodesSyntax? = nil,
    openDelimiter: TokenSyntax? = nil,
    _ unexpectedBetweenOpenDelimiterAndOpenQuote: UnexpectedNodesSyntax? = nil,
    openQuote: TokenSyntax,
    _ unexpectedBetweenOpenQuoteAndSegments: UnexpectedNodesSyntax? = nil,
    segments: StringLiteralSegmentListSyntax,
    _ unexpectedBetweenSegmentsAndCloseQuote: UnexpectedNodesSyntax? = nil,
    closeQuote: TokenSyntax,
    _ unexpectedBetweenCloseQuoteAndCloseDelimiter: UnexpectedNodesSyntax? = nil,
    closeDelimiter: TokenSyntax? = nil,
    _ unexpectedAfterCloseDelimiter: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeOpenDelimiter,
      openingPounds: openDelimiter,
      unexpectedBetweenOpenDelimiterAndOpenQuote,
      openingQuote: openQuote,
      unexpectedBetweenOpenQuoteAndSegments,
      segments: segments,
      unexpectedBetweenSegmentsAndCloseQuote,
      closingQuote: closeQuote,
      unexpectedBetweenCloseQuoteAndCloseDelimiter,
      closingPounds: closeDelimiter,
      unexpectedAfterCloseDelimiter,
      trailingTrivia: trailingTrivia
    )
  }
}

extension StructDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeStructHeader")
  public var unexpectedBeforeAttributes: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeStructHeader
    }
    set {
      unexpectedBeforeStructHeader = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.attributes")
  public var attributes: AttributeListSyntax {
    get {
      return structHeader.attributes
    }
    set {
      structHeader.attributes = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.unexpectedBetweenAttributesAndModifiers")
  public var unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? {
    get {
      return structHeader.unexpectedBetweenAttributesAndModifiers
    }
    set {
      structHeader.unexpectedBetweenAttributesAndModifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.modifiers")
  public var modifiers: DeclModifierListSyntax {
    get {
      return structHeader.modifiers
    }
    set {
      structHeader.modifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.unexpectedBetweenModifiersAndStructKeyword")
  public var unexpectedBetweenModifiersAndStructKeyword: UnexpectedNodesSyntax? {
    get {
      return structHeader.unexpectedBetweenModifiersAndStructKeyword
    }
    set {
      structHeader.unexpectedBetweenModifiersAndStructKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.structKeyword")
  public var structKeyword: TokenSyntax {
    get {
      return structHeader.structKeyword
    }
    set {
      structHeader.structKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.unexpectedBetweenStructKeywordAndName")
  public var unexpectedBetweenStructKeywordAndName: UnexpectedNodesSyntax? {
    get {
      return structHeader.unexpectedBetweenStructKeywordAndName
    }
    set {
      structHeader.unexpectedBetweenStructKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.name")
  public var name: TokenSyntax {
    get {
      return structHeader.name
    }
    set {
      structHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenNameAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return structHeader.unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      structHeader.unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.genericParameterClause")
  public var genericParameterClause: GenericParameterClauseSyntax? {
    get {
      return structHeader.genericParameterClause
    }
    set {
      structHeader.genericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause")
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? {
    get {
      return structHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause
    }
    set {
      structHeader.unexpectedBetweenGenericParameterClauseAndInheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.inheritanceClause")
  public var inheritanceClause: InheritanceClauseSyntax? {
    get {
      return structHeader.inheritanceClause
    }
    set {
      structHeader.inheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause")
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return structHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause
    }
    set {
      structHeader.unexpectedBetweenInheritanceClauseAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.genericWhereClause")
  public var genericWhereClause: GenericWhereClauseSyntax? {
    get {
      return structHeader.genericWhereClause
    }
    set {
      structHeader.genericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenStructHeaderAndMemberBlock")
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenStructHeaderAndMemberBlock
    }
    set {
      unexpectedBetweenStructHeaderAndMemberBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.unexpectedBetweenStructKeywordAndName")
  public var unexpectedBetweenStructKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return structHeader.unexpectedBetweenStructKeywordAndName
    }
    set {
      structHeader.unexpectedBetweenStructKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.name")
  public var identifier: TokenSyntax {
    get {
      return structHeader.name
    }
    set {
      structHeader.name = newValue
    }
  }

  @available(*, deprecated, renamed: "structHeader.unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return structHeader.unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      structHeader.unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:structHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndStructKeyword: UnexpectedNodesSyntax? = nil,
    structKeyword: TokenSyntax = .keyword(.struct),
    _ unexpectedBetweenStructKeywordAndName: UnexpectedNodesSyntax? = nil,
    name: TokenSyntax,
    _ unexpectedBetweenNameAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      structHeader: StructDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndStructKeyword,
        structKeyword: structKeyword,
        unexpectedBetweenStructKeywordAndName,
        name: name,
        unexpectedBetweenNameAndGenericParameterClause,
        genericParameterClause: genericParameterClause,
        unexpectedBetweenGenericParameterClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:structHeader:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndStructKeyword: UnexpectedNodesSyntax? = nil,
    structKeyword: TokenSyntax = .keyword(.struct),
    _ unexpectedBetweenStructKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: UnexpectedNodesSyntax? = nil,
    inheritanceClause: InheritanceClauseSyntax? = nil,
    _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndMemberBlock: UnexpectedNodesSyntax? = nil,
    memberBlock: MemberBlockSyntax,
    _ unexpectedAfterMemberBlock: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      structHeader: StructDeclHeaderSyntax(
        attributes: attributes,
        unexpectedBetweenAttributesAndModifiers,
        modifiers: modifiers,
        unexpectedBetweenModifiersAndStructKeyword,
        structKeyword: structKeyword,
        unexpectedBetweenStructKeywordAndIdentifier,
        name: identifier,
        unexpectedBetweenIdentifierAndGenericParameterClause,
        genericParameterClause: genericParameterClause,
        unexpectedBetweenGenericParameterClauseAndInheritanceClause,
        inheritanceClause: inheritanceClause,
        unexpectedBetweenInheritanceClauseAndGenericWhereClause,
        genericWhereClause: genericWhereClause
      ),
      unexpectedBetweenGenericWhereClauseAndMemberBlock,
      memberBlock: memberBlock,
      unexpectedAfterMemberBlock,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SubscriptCallExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenCalledExpressionAndLeftSquare")
  public var unexpectedBetweenCalledExpressionAndLeftBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenCalledExpressionAndLeftSquare
    }
    set {
      unexpectedBetweenCalledExpressionAndLeftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "leftSquare")
  public var leftBracket: TokenSyntax {
    get {
      return leftSquare
    }
    set {
      leftSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndArguments")
  public var unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftSquareAndArguments
    }
    set {
      unexpectedBetweenLeftSquareAndArguments = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var argumentList: LabeledExprListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightSquare")
  public var unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenArgumentsAndRightSquare
    }
    set {
      unexpectedBetweenArgumentsAndRightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "rightSquare")
  public var rightBracket: TokenSyntax {
    get {
      return rightSquare
    }
    set {
      rightSquare = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenRightSquareAndTrailingClosure")
  public var unexpectedBetweenRightBracketAndTrailingClosure: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenRightSquareAndTrailingClosure
    }
    set {
      unexpectedBetweenRightSquareAndTrailingClosure = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:calledExpression:_:leftSquare:_:arguments:_:rightSquare:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeCalledExpression: UnexpectedNodesSyntax? = nil,
    calledExpression: some ExprSyntaxProtocol,
    _ unexpectedBetweenCalledExpressionAndLeftBracket: UnexpectedNodesSyntax? = nil,
    leftBracket: TokenSyntax = .leftSquareToken(),
    _ unexpectedBetweenLeftBracketAndArgumentList: UnexpectedNodesSyntax? = nil,
    argumentList: LabeledExprListSyntax,
    _ unexpectedBetweenArgumentListAndRightBracket: UnexpectedNodesSyntax? = nil,
    rightBracket: TokenSyntax = .rightSquareToken(),
    _ unexpectedBetweenRightBracketAndTrailingClosure: UnexpectedNodesSyntax? = nil,
    trailingClosure: ClosureExprSyntax? = nil,
    _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
    additionalTrailingClosures: MultipleTrailingClosureElementListSyntax = [],
    _ unexpectedAfterAdditionalTrailingClosures: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeCalledExpression,
      calledExpression: calledExpression,
      unexpectedBetweenCalledExpressionAndLeftBracket,
      leftSquare: leftBracket,
      unexpectedBetweenLeftBracketAndArgumentList,
      arguments: argumentList,
      unexpectedBetweenArgumentListAndRightBracket,
      rightSquare: rightBracket,
      unexpectedBetweenRightBracketAndTrailingClosure,
      trailingClosure: trailingClosure,
      unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures,
      additionalTrailingClosures: additionalTrailingClosures,
      unexpectedAfterAdditionalTrailingClosures,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SubscriptDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndParameterClause")
  public var unexpectedBetweenGenericParameterClauseAndIndices: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericParameterClauseAndParameterClause
    }
    set {
      unexpectedBetweenGenericParameterClauseAndParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "parameterClause")
  public var indices: FunctionParameterClauseSyntax {
    get {
      return parameterClause
    }
    set {
      parameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenParameterClauseAndReturnClause")
  public var unexpectedBetweenIndicesAndResult: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenParameterClauseAndReturnClause
    }
    set {
      unexpectedBetweenParameterClauseAndReturnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "returnClause")
  public var result: ReturnClauseSyntax {
    get {
      return returnClause
    }
    set {
      returnClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenReturnClauseAndGenericWhereClause")
  public var unexpectedBetweenResultAndGenericWhereClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenReturnClauseAndGenericWhereClause
    }
    set {
      unexpectedBetweenReturnClauseAndGenericWhereClause = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenGenericWhereClauseAndAccessorBlock")
  public var unexpectedBetweenGenericWhereClauseAndAccessor: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenGenericWhereClauseAndAccessorBlock
    }
    set {
      unexpectedBetweenGenericWhereClauseAndAccessorBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "accessorBlock")
  public var accessor: AccessorBlockSyntax? {
    get {
      return accessorBlock
    }
    set {
      accessorBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterAccessorBlock")
  public var unexpectedAfterAccessor: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterAccessorBlock
    }
    set {
      unexpectedAfterAccessorBlock = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:subscriptKeyword:_:genericParameterClause:_:parameterClause:_:returnClause:_:genericWhereClause:_:accessorBlock:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndSubscriptKeyword: UnexpectedNodesSyntax? = nil,
    subscriptKeyword: TokenSyntax = .keyword(.subscript),
    _ unexpectedBetweenSubscriptKeywordAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndIndices: UnexpectedNodesSyntax? = nil,
    indices: FunctionParameterClauseSyntax,
    _ unexpectedBetweenIndicesAndResult: UnexpectedNodesSyntax? = nil,
    result: ReturnClauseSyntax,
    _ unexpectedBetweenResultAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedBetweenGenericWhereClauseAndAccessor: UnexpectedNodesSyntax? = nil,
    accessor: AccessorBlockSyntax? = nil,
    _ unexpectedAfterAccessor: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndSubscriptKeyword,
      subscriptKeyword: subscriptKeyword,
      unexpectedBetweenSubscriptKeywordAndGenericParameterClause,
      genericParameterClause: genericParameterClause,
      unexpectedBetweenGenericParameterClauseAndIndices,
      parameterClause: indices,
      unexpectedBetweenIndicesAndResult,
      returnClause: result,
      unexpectedBetweenResultAndGenericWhereClause,
      genericWhereClause: genericWhereClause,
      unexpectedBetweenGenericWhereClauseAndAccessor,
      accessorBlock: accessor,
      unexpectedAfterAccessor,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SuppressedTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenWithoutTildeAndType")
  public var unexpectedBetweenWithoutTildeAndPatternType: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenWithoutTildeAndType
    }
    set {
      unexpectedBetweenWithoutTildeAndType = newValue
    }
  }

  @available(*, deprecated, renamed: "type")
  public var patternType: TypeSyntax {
    get {
      return type
    }
    set {
      type = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterPatternType: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterType
    }
    set {
      unexpectedAfterType = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:withoutTilde:_:type:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeWithoutTilde: UnexpectedNodesSyntax? = nil,
    withoutTilde: TokenSyntax,
    _ unexpectedBetweenWithoutTildeAndPatternType: UnexpectedNodesSyntax? = nil,
    patternType: some TypeSyntaxProtocol,
    _ unexpectedAfterPatternType: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeWithoutTilde,
      withoutTilde: withoutTilde,
      unexpectedBetweenWithoutTildeAndPatternType,
      type: patternType,
      unexpectedAfterPatternType,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SwitchCaseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAttribute")
  public var unexpectedBeforeUnknownAttr: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAttribute
    }
    set {
      unexpectedBeforeAttribute = newValue
    }
  }

  @available(*, deprecated, renamed: "attribute")
  public var unknownAttr: AttributeSyntax? {
    get {
      return attribute
    }
    set {
      attribute = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAttributeAndLabel")
  public var unexpectedBetweenUnknownAttrAndLabel: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAttributeAndLabel
    }
    set {
      unexpectedBetweenAttributeAndLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attribute:_:label:_:statements:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeUnknownAttr: UnexpectedNodesSyntax? = nil,
    unknownAttr: AttributeSyntax? = nil,
    _ unexpectedBetweenUnknownAttrAndLabel: UnexpectedNodesSyntax? = nil,
    label: Label,
    _ unexpectedBetweenLabelAndStatements: UnexpectedNodesSyntax? = nil,
    statements: CodeBlockItemListSyntax,
    _ unexpectedAfterStatements: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeUnknownAttr,
      attribute: unknownAttr,
      unexpectedBetweenUnknownAttrAndLabel,
      label: label,
      unexpectedBetweenLabelAndStatements,
      statements: statements,
      unexpectedAfterStatements,
      trailingTrivia: trailingTrivia
    )
  }
}

extension SwitchExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenSwitchKeywordAndSubject")
  public var unexpectedBetweenSwitchKeywordAndExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenSwitchKeywordAndSubject
    }
    set {
      unexpectedBetweenSwitchKeywordAndSubject = newValue
    }
  }

  @available(*, deprecated, renamed: "subject")
  public var expression: ExprSyntax {
    get {
      return subject
    }
    set {
      subject = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenSubjectAndLeftBrace")
  public var unexpectedBetweenExpressionAndLeftBrace: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenSubjectAndLeftBrace
    }
    set {
      unexpectedBetweenSubjectAndLeftBrace = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:switchKeyword:_:subject:_:leftBrace:_:cases:_:rightBrace:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeSwitchKeyword: UnexpectedNodesSyntax? = nil,
    switchKeyword: TokenSyntax = .keyword(.switch),
    _ unexpectedBetweenSwitchKeywordAndExpression: UnexpectedNodesSyntax? = nil,
    expression: some ExprSyntaxProtocol,
    _ unexpectedBetweenExpressionAndLeftBrace: UnexpectedNodesSyntax? = nil,
    leftBrace: TokenSyntax = .leftBraceToken(),
    _ unexpectedBetweenLeftBraceAndCases: UnexpectedNodesSyntax? = nil,
    cases: SwitchCaseListSyntax,
    _ unexpectedBetweenCasesAndRightBrace: UnexpectedNodesSyntax? = nil,
    rightBrace: TokenSyntax = .rightBraceToken(),
    _ unexpectedAfterRightBrace: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeSwitchKeyword,
      switchKeyword: switchKeyword,
      unexpectedBetweenSwitchKeywordAndExpression,
      subject: expression,
      unexpectedBetweenExpressionAndLeftBrace,
      leftBrace: leftBrace,
      unexpectedBetweenLeftBraceAndCases,
      cases: cases,
      unexpectedBetweenCasesAndRightBrace,
      rightBrace: rightBrace,
      unexpectedAfterRightBrace,
      trailingTrivia: trailingTrivia
    )
  }
}

extension TernaryExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeCondition")
  public var unexpectedBeforeConditionExpression: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeCondition
    }
    set {
      unexpectedBeforeCondition = newValue
    }
  }

  @available(*, deprecated, renamed: "condition")
  public var conditionExpression: ExprSyntax {
    get {
      return condition
    }
    set {
      condition = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenConditionAndQuestionMark")
  public var unexpectedBetweenConditionExpressionAndQuestionMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenConditionAndQuestionMark
    }
    set {
      unexpectedBetweenConditionAndQuestionMark = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenQuestionMarkAndThenExpression")
  public var unexpectedBetweenQuestionMarkAndFirstChoice: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenQuestionMarkAndThenExpression
    }
    set {
      unexpectedBetweenQuestionMarkAndThenExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "thenExpression")
  public var firstChoice: ExprSyntax {
    get {
      return thenExpression
    }
    set {
      thenExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenThenExpressionAndColon")
  public var unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenThenExpressionAndColon
    }
    set {
      unexpectedBetweenThenExpressionAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "colon")
  public var colonMark: TokenSyntax {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndElseExpression")
  public var unexpectedBetweenColonMarkAndSecondChoice: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndElseExpression
    }
    set {
      unexpectedBetweenColonAndElseExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "elseExpression")
  public var secondChoice: ExprSyntax {
    get {
      return elseExpression
    }
    set {
      elseExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterElseExpression")
  public var unexpectedAfterSecondChoice: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterElseExpression
    }
    set {
      unexpectedAfterElseExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:condition:_:questionMark:_:thenExpression:_:colon:_:elseExpression:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeConditionExpression: UnexpectedNodesSyntax? = nil,
    conditionExpression: some ExprSyntaxProtocol,
    _ unexpectedBetweenConditionExpressionAndQuestionMark: UnexpectedNodesSyntax? = nil,
    questionMark: TokenSyntax = .infixQuestionMarkToken(),
    _ unexpectedBetweenQuestionMarkAndFirstChoice: UnexpectedNodesSyntax? = nil,
    firstChoice: some ExprSyntaxProtocol,
    _ unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? = nil,
    colonMark: TokenSyntax = .colonToken(),
    _ unexpectedBetweenColonMarkAndSecondChoice: UnexpectedNodesSyntax? = nil,
    secondChoice: some ExprSyntaxProtocol,
    _ unexpectedAfterSecondChoice: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeConditionExpression,
      condition: conditionExpression,
      unexpectedBetweenConditionExpressionAndQuestionMark,
      questionMark: questionMark,
      unexpectedBetweenQuestionMarkAndFirstChoice,
      thenExpression: firstChoice,
      unexpectedBetweenFirstChoiceAndColonMark,
      colon: colonMark,
      unexpectedBetweenColonMarkAndSecondChoice,
      elseExpression: secondChoice,
      unexpectedAfterSecondChoice,
      trailingTrivia: trailingTrivia
    )
  }
}

extension TupleExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndElements")
  public var unexpectedBetweenLeftParenAndElementList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndElements
    }
    set {
      unexpectedBetweenLeftParenAndElements = newValue
    }
  }

  @available(*, deprecated, renamed: "elements")
  public var elementList: LabeledExprListSyntax {
    get {
      return elements
    }
    set {
      elements = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightParen")
  public var unexpectedBetweenElementListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementsAndRightParen
    }
    set {
      unexpectedBetweenElementsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftParen:_:elements:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndElementList: UnexpectedNodesSyntax? = nil,
    elementList: LabeledExprListSyntax,
    _ unexpectedBetweenElementListAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndElementList,
      elements: elementList,
      unexpectedBetweenElementListAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension TuplePatternElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLabel")
  public var unexpectedBeforeLabelName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeLabel
    }
    set {
      unexpectedBeforeLabel = newValue
    }
  }

  @available(*, deprecated, renamed: "label")
  public var labelName: TokenSyntax? {
    get {
      return label
    }
    set {
      label = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenLabelAndColon")
  public var unexpectedBetweenLabelNameAndLabelColon: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLabelAndColon
    }
    set {
      unexpectedBetweenLabelAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "colon")
  public var labelColon: TokenSyntax? {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPattern")
  public var unexpectedBetweenLabelColonAndPattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenColonAndPattern
    }
    set {
      unexpectedBetweenColonAndPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:label:_:colon:_:pattern:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLabelName: UnexpectedNodesSyntax? = nil,
    labelName: TokenSyntax? = nil,
    _ unexpectedBetweenLabelNameAndLabelColon: UnexpectedNodesSyntax? = nil,
    labelColon: TokenSyntax? = nil,
    _ unexpectedBetweenLabelColonAndPattern: UnexpectedNodesSyntax? = nil,
    pattern: some PatternSyntaxProtocol,
    _ unexpectedBetweenPatternAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLabelName,
      label: labelName,
      unexpectedBetweenLabelNameAndLabelColon,
      colon: labelColon,
      unexpectedBetweenLabelColonAndPattern,
      pattern: pattern,
      unexpectedBetweenPatternAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension TupleTypeElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeInoutKeyword")
  public var unexpectedBeforeInOut: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeInoutKeyword
    }
    set {
      unexpectedBeforeInoutKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "inoutKeyword")
  public var inOut: TokenSyntax? {
    get {
      return inoutKeyword
    }
    set {
      inoutKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenInoutKeywordAndFirstName")
  public var unexpectedBetweenInOutAndName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenInoutKeywordAndFirstName
    }
    set {
      unexpectedBetweenInoutKeywordAndFirstName = newValue
    }
  }

  @available(*, deprecated, renamed: "firstName")
  public var name: TokenSyntax? {
    get {
      return firstName
    }
    set {
      firstName = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenFirstNameAndSecondName")
  public var unexpectedBetweenNameAndSecondName: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenFirstNameAndSecondName
    }
    set {
      unexpectedBetweenFirstNameAndSecondName = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:inoutKeyword:_:firstName:_:secondName:_:colon:_:type:_:ellipsis:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeInOut: UnexpectedNodesSyntax? = nil,
    inOut: TokenSyntax? = nil,
    _ unexpectedBetweenInOutAndName: UnexpectedNodesSyntax? = nil,
    name: TokenSyntax? = nil,
    _ unexpectedBetweenNameAndSecondName: UnexpectedNodesSyntax? = nil,
    secondName: TokenSyntax? = nil,
    _ unexpectedBetweenSecondNameAndColon: UnexpectedNodesSyntax? = nil,
    colon: TokenSyntax? = nil,
    _ unexpectedBetweenColonAndType: UnexpectedNodesSyntax? = nil,
    type: some TypeSyntaxProtocol,
    _ unexpectedBetweenTypeAndEllipsis: UnexpectedNodesSyntax? = nil,
    ellipsis: TokenSyntax? = nil,
    _ unexpectedBetweenEllipsisAndTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingComma: TokenSyntax? = nil,
    _ unexpectedAfterTrailingComma: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeInOut,
      inoutKeyword: inOut,
      unexpectedBetweenInOutAndName,
      firstName: name,
      unexpectedBetweenNameAndSecondName,
      secondName: secondName,
      unexpectedBetweenSecondNameAndColon,
      colon: colon,
      unexpectedBetweenColonAndType,
      type: type,
      unexpectedBetweenTypeAndEllipsis,
      ellipsis: ellipsis,
      unexpectedBetweenEllipsisAndTrailingComma,
      trailingComma: trailingComma,
      unexpectedAfterTrailingComma,
      trailingTrivia: trailingTrivia
    )
  }
}

extension TypeAliasDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenTypealiasKeywordAndName")
  public var unexpectedBetweenTypealiasKeywordAndIdentifier: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenTypealiasKeywordAndName
    }
    set {
      unexpectedBetweenTypealiasKeywordAndName = newValue
    }
  }

  @available(*, deprecated, renamed: "name")
  public var identifier: TokenSyntax {
    get {
      return name
    }
    set {
      name = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenNameAndGenericParameterClause
    }
    set {
      unexpectedBetweenNameAndGenericParameterClause = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:typealiasKeyword:_:name:_:genericParameterClause:_:initializer:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndTypealiasKeyword: UnexpectedNodesSyntax? = nil,
    typealiasKeyword: TokenSyntax = .keyword(.typealias),
    _ unexpectedBetweenTypealiasKeywordAndIdentifier: UnexpectedNodesSyntax? = nil,
    identifier: TokenSyntax,
    _ unexpectedBetweenIdentifierAndGenericParameterClause: UnexpectedNodesSyntax? = nil,
    genericParameterClause: GenericParameterClauseSyntax? = nil,
    _ unexpectedBetweenGenericParameterClauseAndInitializer: UnexpectedNodesSyntax? = nil,
    initializer: TypeInitializerClauseSyntax,
    _ unexpectedBetweenInitializerAndGenericWhereClause: UnexpectedNodesSyntax? = nil,
    genericWhereClause: GenericWhereClauseSyntax? = nil,
    _ unexpectedAfterGenericWhereClause: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndTypealiasKeyword,
      typealiasKeyword: typealiasKeyword,
      unexpectedBetweenTypealiasKeywordAndIdentifier,
      name: identifier,
      unexpectedBetweenIdentifierAndGenericParameterClause,
      genericParameterClause: genericParameterClause,
      unexpectedBetweenGenericParameterClauseAndInitializer,
      initializer: initializer,
      unexpectedBetweenInitializerAndGenericWhereClause,
      genericWhereClause: genericWhereClause,
      unexpectedAfterGenericWhereClause,
      trailingTrivia: trailingTrivia
    )
  }
}

extension UnresolvedAsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAsKeyword")
  public var unexpectedBeforeAsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeAsKeyword
    }
    set {
      unexpectedBeforeAsKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "asKeyword")
  public var asTok: TokenSyntax {
    get {
      return asKeyword
    }
    set {
      asKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenAsKeywordAndQuestionOrExclamationMark")
  public var unexpectedBetweenAsTokAndQuestionOrExclamationMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenAsKeywordAndQuestionOrExclamationMark
    }
    set {
      unexpectedBetweenAsKeywordAndQuestionOrExclamationMark = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:asKeyword:_:questionOrExclamationMark:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAsTok: UnexpectedNodesSyntax? = nil,
    asTok: TokenSyntax = .keyword(.as),
    _ unexpectedBetweenAsTokAndQuestionOrExclamationMark: UnexpectedNodesSyntax? = nil,
    questionOrExclamationMark: TokenSyntax? = nil,
    _ unexpectedAfterQuestionOrExclamationMark: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAsTok,
      asKeyword: asTok,
      unexpectedBetweenAsTokAndQuestionOrExclamationMark,
      questionOrExclamationMark: questionOrExclamationMark,
      unexpectedAfterQuestionOrExclamationMark,
      trailingTrivia: trailingTrivia
    )
  }
}

extension UnresolvedIsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeIsKeyword")
  public var unexpectedBeforeIsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeIsKeyword
    }
    set {
      unexpectedBeforeIsKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "isKeyword")
  public var isTok: TokenSyntax {
    get {
      return isKeyword
    }
    set {
      isKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterIsKeyword")
  public var unexpectedAfterIsTok: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterIsKeyword
    }
    set {
      unexpectedAfterIsKeyword = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:isKeyword:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeIsTok: UnexpectedNodesSyntax? = nil,
    isTok: TokenSyntax = .keyword(.is),
    _ unexpectedAfterIsTok: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeIsTok,
      isKeyword: isTok,
      unexpectedAfterIsTok,
      trailingTrivia: trailingTrivia
    )
  }
}

extension UnresolvedTernaryExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenQuestionMarkAndThenExpression")
  public var unexpectedBetweenQuestionMarkAndFirstChoice: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenQuestionMarkAndThenExpression
    }
    set {
      unexpectedBetweenQuestionMarkAndThenExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "thenExpression")
  public var firstChoice: ExprSyntax {
    get {
      return thenExpression
    }
    set {
      thenExpression = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenThenExpressionAndColon")
  public var unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenThenExpressionAndColon
    }
    set {
      unexpectedBetweenThenExpressionAndColon = newValue
    }
  }

  @available(*, deprecated, renamed: "colon")
  public var colonMark: TokenSyntax {
    get {
      return colon
    }
    set {
      colon = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterColon")
  public var unexpectedAfterColonMark: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterColon
    }
    set {
      unexpectedAfterColon = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:questionMark:_:thenExpression:_:colon:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeQuestionMark: UnexpectedNodesSyntax? = nil,
    questionMark: TokenSyntax = .infixQuestionMarkToken(),
    _ unexpectedBetweenQuestionMarkAndFirstChoice: UnexpectedNodesSyntax? = nil,
    firstChoice: some ExprSyntaxProtocol,
    _ unexpectedBetweenFirstChoiceAndColonMark: UnexpectedNodesSyntax? = nil,
    colonMark: TokenSyntax = .colonToken(),
    _ unexpectedAfterColonMark: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeQuestionMark,
      questionMark: questionMark,
      unexpectedBetweenQuestionMarkAndFirstChoice,
      thenExpression: firstChoice,
      unexpectedBetweenFirstChoiceAndColonMark,
      colon: colonMark,
      unexpectedAfterColonMark,
      trailingTrivia: trailingTrivia
    )
  }
}

extension ValueBindingPatternSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeBindingSpecifier")
  public var unexpectedBeforeBindingKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBeforeBindingSpecifier
    }
    set {
      unexpectedBeforeBindingSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: TokenSyntax {
    get {
      return bindingSpecifier
    }
    set {
      bindingSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndPattern")
  public var unexpectedBetweenBindingKeywordAndValuePattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBindingSpecifierAndPattern
    }
    set {
      unexpectedBetweenBindingSpecifierAndPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "pattern")
  public var valuePattern: PatternSyntax {
    get {
      return pattern
    }
    set {
      pattern = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterPattern")
  public var unexpectedAfterValuePattern: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterPattern
    }
    set {
      unexpectedAfterPattern = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:bindingSpecifier:_:pattern:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeBindingKeyword: UnexpectedNodesSyntax? = nil,
    bindingKeyword: TokenSyntax,
    _ unexpectedBetweenBindingKeywordAndValuePattern: UnexpectedNodesSyntax? = nil,
    valuePattern: some PatternSyntaxProtocol,
    _ unexpectedAfterValuePattern: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeBindingKeyword,
      bindingSpecifier: bindingKeyword,
      unexpectedBetweenBindingKeywordAndValuePattern,
      pattern: valuePattern,
      unexpectedAfterValuePattern,
      trailingTrivia: trailingTrivia
    )
  }
}

extension VariableDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndBindingSpecifier")
  public var unexpectedBetweenModifiersAndBindingKeyword: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenModifiersAndBindingSpecifier
    }
    set {
      unexpectedBetweenModifiersAndBindingSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: TokenSyntax {
    get {
      return bindingSpecifier
    }
    set {
      bindingSpecifier = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndBindings")
  public var unexpectedBetweenBindingKeywordAndBindings: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenBindingSpecifierAndBindings
    }
    set {
      unexpectedBetweenBindingSpecifierAndBindings = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:attributes:_:modifiers:_:bindingSpecifier:_:bindings:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeAttributes: UnexpectedNodesSyntax? = nil,
    attributes: AttributeListSyntax = [],
    _ unexpectedBetweenAttributesAndModifiers: UnexpectedNodesSyntax? = nil,
    modifiers: DeclModifierListSyntax = [],
    _ unexpectedBetweenModifiersAndBindingKeyword: UnexpectedNodesSyntax? = nil,
    bindingKeyword: TokenSyntax,
    _ unexpectedBetweenBindingKeywordAndBindings: UnexpectedNodesSyntax? = nil,
    bindings: PatternBindingListSyntax,
    _ unexpectedAfterBindings: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeAttributes,
      attributes: attributes,
      unexpectedBetweenAttributesAndModifiers,
      modifiers: modifiers,
      unexpectedBetweenModifiersAndBindingKeyword,
      bindingSpecifier: bindingKeyword,
      unexpectedBetweenBindingKeywordAndBindings,
      bindings: bindings,
      unexpectedAfterBindings,
      trailingTrivia: trailingTrivia
    )
  }
}

extension WhereClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenWhereKeywordAndCondition")
  public var unexpectedBetweenWhereKeywordAndGuardResult: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenWhereKeywordAndCondition
    }
    set {
      unexpectedBetweenWhereKeywordAndCondition = newValue
    }
  }

  @available(*, deprecated, renamed: "condition")
  public var guardResult: ExprSyntax {
    get {
      return condition
    }
    set {
      condition = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterCondition")
  public var unexpectedAfterGuardResult: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterCondition
    }
    set {
      unexpectedAfterCondition = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:whereKeyword:_:condition:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeWhereKeyword: UnexpectedNodesSyntax? = nil,
    whereKeyword: TokenSyntax = .keyword(.where),
    _ unexpectedBetweenWhereKeywordAndGuardResult: UnexpectedNodesSyntax? = nil,
    guardResult: some ExprSyntaxProtocol,
    _ unexpectedAfterGuardResult: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeWhereKeyword,
      whereKeyword: whereKeyword,
      unexpectedBetweenWhereKeywordAndGuardResult,
      condition: guardResult,
      unexpectedAfterGuardResult,
      trailingTrivia: trailingTrivia
    )
  }
}

extension YieldStmtSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenYieldKeywordAndYieldedExpressions")
  public var unexpectedBetweenYieldKeywordAndYields: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenYieldKeywordAndYieldedExpressions
    }
    set {
      unexpectedBetweenYieldKeywordAndYieldedExpressions = newValue
    }
  }

  @available(*, deprecated, renamed: "yieldedExpressions")
  public var yields: YieldedExpressions {
    get {
      return yieldedExpressions
    }
    set {
      yieldedExpressions = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedAfterYieldedExpressions")
  public var unexpectedAfterYields: UnexpectedNodesSyntax? {
    get {
      return unexpectedAfterYieldedExpressions
    }
    set {
      unexpectedAfterYieldedExpressions = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:yieldKeyword:_:yieldedExpressions:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeYieldKeyword: UnexpectedNodesSyntax? = nil,
    yieldKeyword: TokenSyntax = .keyword(.yield),
    _ unexpectedBetweenYieldKeywordAndYields: UnexpectedNodesSyntax? = nil,
    yields: YieldedExpressions,
    _ unexpectedAfterYields: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeYieldKeyword,
      yieldKeyword: yieldKeyword,
      unexpectedBetweenYieldKeywordAndYields,
      yieldedExpressions: yields,
      unexpectedAfterYields,
      trailingTrivia: trailingTrivia
    )
  }
}

extension YieldedExpressionsClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndElements")
  public var unexpectedBetweenLeftParenAndElementList: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenLeftParenAndElements
    }
    set {
      unexpectedBetweenLeftParenAndElements = newValue
    }
  }

  @available(*, deprecated, renamed: "elements")
  public var elementList: YieldedExpressionListSyntax {
    get {
      return elements
    }
    set {
      elements = newValue
    }
  }

  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightParen")
  public var unexpectedBetweenElementListAndRightParen: UnexpectedNodesSyntax? {
    get {
      return unexpectedBetweenElementsAndRightParen
    }
    set {
      unexpectedBetweenElementsAndRightParen = newValue
    }
  }

  @available(*, deprecated, renamed: "init(leadingTrivia:_:leftParen:_:elements:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload
  public init(
    leadingTrivia: Trivia? = nil,
    _ unexpectedBeforeLeftParen: UnexpectedNodesSyntax? = nil,
    leftParen: TokenSyntax = .leftParenToken(),
    _ unexpectedBetweenLeftParenAndElementList: UnexpectedNodesSyntax? = nil,
    elementList: YieldedExpressionListSyntax,
    _ unexpectedBetweenElementListAndRightParen: UnexpectedNodesSyntax? = nil,
    rightParen: TokenSyntax = .rightParenToken(),
    _ unexpectedAfterRightParen: UnexpectedNodesSyntax? = nil,
    trailingTrivia: Trivia? = nil
  ) {
    self.init(
      leadingTrivia: leadingTrivia,
      unexpectedBeforeLeftParen,
      leftParen: leftParen,
      unexpectedBetweenLeftParenAndElementList,
      elements: elementList,
      unexpectedBetweenElementListAndRightParen,
      rightParen: rightParen,
      unexpectedAfterRightParen,
      trailingTrivia: trailingTrivia
    )
  }
}

extension DeclGroupSyntax {
  @available(*, deprecated, renamed: "header.attributes")
  public var attributes: AttributeListSyntax {
    get {
      return header.attributes
    }
    set {
      header.attributes = newValue
    }
  }

  @available(*, deprecated, renamed: "header.modifiers")
  public var modifiers: DeclModifierListSyntax {
    get {
      return header.modifiers
    }
    set {
      header.modifiers = newValue
    }
  }

  @available(*, deprecated, renamed: "header.introducer")
  public var introducer: TokenSyntax {
    get {
      return header.introducer
    }
    set {
      header.introducer = newValue
    }
  }

  @available(*, deprecated, renamed: "header.inheritanceClause")
  public var inheritanceClause: InheritanceClauseSyntax? {
    get {
      return header.inheritanceClause
    }
    set {
      header.inheritanceClause = newValue
    }
  }

  @available(*, deprecated, renamed: "header.genericWhereClause")
  public var genericWhereClause: GenericWhereClauseSyntax? {
    get {
      return header.genericWhereClause
    }
    set {
      header.genericWhereClause = newValue
    }
  }
}

extension FreestandingMacroExpansionSyntax {
  @available(*, deprecated, renamed: "pound")
  public var poundToken: TokenSyntax {
    get {
      return pound
    }
    set {
      pound = newValue
    }
  }

  @available(*, deprecated, renamed: "macroName")
  public var macro: TokenSyntax {
    get {
      return macroName
    }
    set {
      macroName = newValue
    }
  }

  @available(*, deprecated, renamed: "genericArgumentClause")
  public var genericArguments: GenericArgumentClauseSyntax? {
    get {
      return genericArgumentClause
    }
    set {
      genericArgumentClause = newValue
    }
  }

  @available(*, deprecated, renamed: "arguments")
  public var argumentList: LabeledExprListSyntax {
    get {
      return arguments
    }
    set {
      arguments = newValue
    }
  }
}
